<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kent.Boogaart.KBCsv</name>
    </assembly>
    <members>
        <member name="T:Kent.Boogaart.KBCsv.CsvParser">
            <summary>
            Implements the CSV parser.
            </summary>
            <remarks>
            This class implements the CSV parsing capabilities of KBCsv.
            </remarks>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvParser.SPACE">
            <summary>
            The space character.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvParser.TAB">
            <summary>
            The tab character.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvParser.CR">
            <summary>
            The carriage return character. Escape code is <c>\r</c>.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvParser.LF">
            <summary>
            The line-feed character. Escape code is <c>\n</c>.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvParser.BUFFER_SIZE">
            <summary>
            One char less than the size of the internal buffer. The extra char is used to support a faster peek operation.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvParser.DefaultValueSeparator">
            <summary>
            The default value separator.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvParser.DefaultValueDelimiter">
            <summary>
            The default value delimiter.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvParser._reader">
            <summary>
            The source of the CSV data.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvParser._preserveLeadingWhiteSpace">
            <summary>
            See <see cref="P:Kent.Boogaart.KBCsv.CsvParser.PreserveLeadingWhiteSpace"/>.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvParser._preserveTrailingWhiteSpace">
            <summary>
            See <see cref="P:Kent.Boogaart.KBCsv.CsvParser.PreserveTrailingWhiteSpace"/>.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvParser._valueSeparator">
            <summary>
            See <see cref="P:Kent.Boogaart.KBCsv.CsvParser.ValueSeparator"/>.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvParser._valueDelimiter">
            <summary>
            See <see cref="P:Kent.Boogaart.KBCsv.CsvParser.ValueDelimiter"/>.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvParser._buffer">
            <summary>
            Buffers CSV data.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvParser._bufferIndex">
            <summary>
            The current index into <see cref="F:Kent.Boogaart.KBCsv.CsvParser._buffer"/>.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvParser._bufferEndIndex">
            <summary>
            The last valid index into <see cref="F:Kent.Boogaart.KBCsv.CsvParser._buffer"/>.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvParser._valueList">
            <summary>
            The list of values currently parsed by the parser.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvParser._valuesListEndIndex">
            <summary>
            The last valid index into <see cref="F:Kent.Boogaart.KBCsv.CsvParser._valueList"/>.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvParser._valueBuffer">
            <summary>
            The buffer of characters containing the current value.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvParser._valueBufferEndIndex">
            <summary>
            The last valid index into <see cref="F:Kent.Boogaart.KBCsv.CsvParser._valueBuffer"/>.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvParser._valueBufferFirstEligibleLeadingWhiteSpace">
            <summary>
            An index into <see cref="F:Kent.Boogaart.KBCsv.CsvParser._valueBuffer"/> indicating the first character that might be removed if it is leading white-space.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvParser._valueBufferFirstEligibleTrailingWhiteSpace">
            <summary>
            An index into <see cref="F:Kent.Boogaart.KBCsv.CsvParser._valueBuffer"/> indicating the first character that might be removed if it is trailing white-space.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvParser._inDelimitedArea">
            <summary>
            <see langword="true"/> if the current value is delimited and the parser is in the delimited area.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvParser._valuePartStartIndex">
            <summary>
            The starting index of the current value part.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvParser._passedFirstRecord">
            <summary>
            Set to <see langword="true"/> once the first record is passed (or the <see cref="T:Kent.Boogaart.KBCsv.CsvReader"/> decides that the first record has been passed.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvParser._specialCharacterMask">
            <summary>
            Used to quickly recognise whether a character is potentially special or not.
            </summary>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvParser.#ctor(System.IO.TextReader)">
            <summary>
            Constructs and inititialises an instance of <c>CsvParser</c> with the details provided.
            </summary>
            <param name="reader">
            The instance of <see cref="T:System.IO.TextReader"/> from which CSV data will be read.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvParser.SkipRecord">
            <summary>
            Efficiently skips the next CSV record.
            </summary>
            <returns>
            <see langword="true"/> if a record was successfully skipped, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvParser.ParseRecord">
            <summary>
            Reads and parses the CSV into a <c>string</c> array containing the values contained in a single CSV record.
            </summary>
            <returns>
            An array of field values for the record, or <see langword="null"/> if no record was found.
            </returns>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvParser.CloseValuePart">
            <summary>
            Closes the current value part.
            </summary>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvParser.CloseValuePartExcludeCurrent">
            <summary>
            Closes the current value part, but excludes the current character from the value part.
            </summary>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvParser.CloseValue(System.Boolean)">
            <summary>
            Closes the current value by adding it to the list of values in the current record. Assumes that there is actually a value to add, either in <c>_value</c> or in
            <see cref="F:Kent.Boogaart.KBCsv.CsvParser._buffer"/> starting at <see cref="F:Kent.Boogaart.KBCsv.CsvParser._valuePartStartIndex"/> and ending at <see cref="F:Kent.Boogaart.KBCsv.CsvParser._bufferIndex"/>.
            </summary>
            <param name="includeCurrentChar">
            If <see langword="true"/>, the current character is included in the value. Otherwise, it is excluded.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvParser.IsWhiteSpace(System.Char)">
            <summary>
            Determines whether <paramref name="c"/> is white-space.
            </summary>
            <param name="c">
            The character to check.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="c"/> is white-space, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvParser.FillBuffer">
            <summary>
            Fills that data buffer. Assumes that the buffer is already exhausted.
            </summary>
            <returns>
            <see langword="true"/> if data was read into the buffer, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvParser.FillBufferIgnoreValues">
            <summary>
            Fills the buffer with data, but does not bother with closing values. This is used from the <see cref="M:Kent.Boogaart.KBCsv.CsvParser.SkipRecord"/> method,
            since that does not concern itself with values.
            </summary>
            <returns>
            <see langword="true"/> if data was read into the buffer, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvParser.SwallowChar">
            <summary>
            Swallows the current character in the data buffer. Assumes that there is a character to swallow, but refills the buffer if necessary.
            </summary>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvParser.System#IDisposable#Dispose">
            <summary>
            Disposes of this <c>CsvParser</c> instance.
            </summary>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvParser.Close">
            <summary>
            Closes this <c>CsvParser</c> instance and releases all resources acquired by it.
            </summary>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvParser.AddValue(System.String)">
            <summary>
            Adds a value to the value list.
            </summary>
            <param name="val">
            The value to add.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvParser.GetValues">
            <summary>
            Gets an array of values that have been added to <see cref="F:Kent.Boogaart.KBCsv.CsvParser._valueList"/>.
            </summary>
            <returns>
            An array of type <c>string</c> containing all the values in the value list, or <see langword="null"/> if there are no values in the list.
            </returns>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvParser.EnsureValueListCapacity">
            <summary>
            Ensures the value list contains enough space for another value, and increases its size if not.
            </summary>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvParser.AppendToValue(System.Int32,System.Int32)">
            <summary>
            Appends the specified characters from <see cref="F:Kent.Boogaart.KBCsv.CsvParser._buffer"/> onto the end of the current value.
            </summary>
            <param name="startIndex">
            The index at which to begin copying.
            </param>
            <param name="endIndex">
            The index at which to cease copying. The character at this index is not copied.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvParser.GetValue">
            <summary>
            Gets the current value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvParser.GetValue(System.Int32,System.Int32)">
            <summary>
            Gets the current value, optionally removing trailing white-space.
            </summary>
            <param name="valueBufferFirstEligibleLeadingWhiteSpace">
            The index of the first character that cannot possibly be leading white-space.
            </param>
            <param name="valueBufferFirstEligibleTrailingWhiteSpace">
            The index of the first character that may be trailing white-space.
            </param>
            <returns>
            An instance of <c>string</c> containing the resultant value.
            </returns>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvParser.EnsureValueBufferCapacity(System.Int32)">
            <summary>
            Ensures the value buffer contains enough space for <paramref name="count"/> more characters.
            </summary>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvParser.UpdateSpecialCharacterMask">
            <summary>
            Updates the mask used to quickly filter out non-special characters.
            </summary>
        </member>
        <member name="P:Kent.Boogaart.KBCsv.CsvParser.PreserveLeadingWhiteSpace">
            <summary>
            Gets or sets a value indicating whether leading whitespace is to be preserved.
            </summary>
        </member>
        <member name="P:Kent.Boogaart.KBCsv.CsvParser.PreserveTrailingWhiteSpace">
            <summary>
            Gets or sets a value indicating whether trailing whitespace is to be preserved.
            </summary>
        </member>
        <member name="P:Kent.Boogaart.KBCsv.CsvParser.ValueSeparator">
            <summary>
            Gets or sets the character that separates values in the CSV data.
            </summary>
        </member>
        <member name="P:Kent.Boogaart.KBCsv.CsvParser.ValueDelimiter">
            <summary>
            Gets or sets the character that optionally delimits values in the CSV data.
            </summary>
        </member>
        <member name="P:Kent.Boogaart.KBCsv.CsvParser.HasMoreRecords">
            <summary>
            Gets a value indicating whether the parser's buffer contains more records in addition to those already parsed.
            </summary>
        </member>
        <member name="P:Kent.Boogaart.KBCsv.CsvParser.PassedFirstRecord">
            <summary>
            Gets a value indicating whether the parser has passed the first record in the input source.
            </summary>
        </member>
        <member name="T:Kent.Boogaart.KBCsv.CsvReader">
            <summary>
            Provides a mechanism via which CSV data can be easily parsed.
            </summary>
            <remarks>
            <para>
            The <c>CsvReader</c> class allows CSV data to be read and parsed from any stream-based source. By default, CSV values are assumed to be separated
            by commas (<c>,</c>) and delimited by double quotes (<c>"</c>). If necessary, custom characters can be specified when creating the
            <c>CsvReader</c>.
            </para>
            <para>
            The number of records that have been parsed so far is exposed via the <see cref="P:Kent.Boogaart.KBCsv.CsvReader.RecordNumber"/> property. Reading a header record does not affect
            this property.
            </para>
            <para>
            Once a <c>CsvReader</c> instance is created, a header record can optionally be parsed. If a header record exists, it must be parsed first thing
            via the <see cref="M:Kent.Boogaart.KBCsv.CsvReader.ReadHeaderRecord"/> method. Upon successfully parsing the header record, it is exposed via the <see cref="P:Kent.Boogaart.KBCsv.CsvReader.HeaderRecord"/>
            property. An instance of <see cref="P:Kent.Boogaart.KBCsv.CsvReader.HeaderRecord"/> represents the header record.
            </para>
            <para>
            If a header record does not exist in the CSV data but the details of the header are known, the <see cref="P:Kent.Boogaart.KBCsv.CsvReader.HeaderRecord"/> property can be used
            to explicitly supply header information. Only one of <see cref="P:Kent.Boogaart.KBCsv.CsvReader.HeaderRecord"/> or <see cref="M:Kent.Boogaart.KBCsv.CsvReader.ReadHeaderRecord"/> can be successfully used to set
            header information.
            </para>
            <para>
            Data records can be read using the overloaded <see cref="M:Kent.Boogaart.KBCsv.CsvReader.ReadDataRecord"/> method. Data records are represented as instances of
            <see cref="T:Kent.Boogaart.KBCsv.DataRecord"/>. Alternatively, <see cref="M:Kent.Boogaart.KBCsv.CsvReader.ReadDataRecordAsStrings"/> returns data as an array of type <see cref="T:System.String"/>.
            </para>
            <para>
            The header and data records can be skipped using either of the <see cref="M:Kent.Boogaart.KBCsv.CsvReader.SkipRecord"/> methods. By default, skipping a record increments the
            record number as exposed by the <see cref="P:Kent.Boogaart.KBCsv.CsvReader.RecordNumber"/> property. However, you can optionally specify <see langword="false"/> when invoking
            <see cref="M:Kent.Boogaart.KBCsv.CsvReader.SkipRecord(System.Boolean)"/> to ensure the record number is not incremented.
            </para>
            <para>
            The properties <see cref="P:Kent.Boogaart.KBCsv.CsvReader.DataRecords"/> and <see cref="P:Kent.Boogaart.KBCsv.CsvReader.DataRecordsAsStrings"/> provide a convenient way to obtain
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> instances that iterate over CSV data as instances of <see cref="T:Kent.Boogaart.KBCsv.DataRecord"/> and <see cref="T:System.String"/>[]
            respectively.
            </para>
            </remarks>
            <threadsafety>
            The <c>CsvReader</c> class does not lock internally. Therefore, it is unsafe to share an instance across threads without implementing your own
            synchronisation solution.
            </threadsafety>
            <example>
            <para>
            The following example uses one of the <see cref="M:Kent.Boogaart.KBCsv.CsvReader.FromCsvString(System.String)"/> overloads to parse and screen dump the CSV data in a <c>string</c> instance:
            </para>
            <para>
            <code lang="C#">
            <![CDATA[
            string csvData = GetCsvData();
            
            using (CsvReader reader = CsvReader.FromCsvString(csvData)) {
            	foreach (DataRecord record in reader.DataRecords) {
            		System.Console.WriteLine(record.ToString());
            	}
            }
            ]]>
            </code>
            </para>
            <para>
            <code lang="vb">
            <![CDATA[
            Dim csvData As String = GetCsvData
            Dim reader As CsvReader = Nothing
            
            Try 
            	reader = CsvReader.FromCsvString(csvData)
            	
            	For Each record As DataRecord In reader.DataRecords
            		System.Console.WriteLine(record.ToString)
            	Next
            Finally
            	If (Not reader Is Nothing) Then
            		reader.Close
            	End If
            End Try
            ]]>
            </code>
            </para>
            </example>
            <example>
            <para>
            The following example parses CSV data in a file but specifies that the separator character is a colon (<c>:</c>), not a comma (<c>,</c>). In
            addition, it reads the first record as a header and references data via column name instead of index:
            </para>
            <para>
            <code lang="C#">
            <![CDATA[
            using (CsvReader reader = new CsvReader(@"C:\data.csv")) {
            	reader.ValueSeparator = ':';
            	reader.ReadHeaderRecord();
            	DataRecord record = null;
            	
            	while ((record = reader.ReadDataRecord()) != null) {
            		System.Console.WriteLine("{0} is {1} years old", record["Name"], record["Age"]);
            	}
            }
            ]]>
            </code>
            </para>
            <para>
            <code lang="vb">
            <![CDATA[
            Dim reader As CsvReader = Nothing
            
            Try
            	reader = New CsvReader("C:\data.csv")
            	reader.ValueSeparator = ":"c
            	reader.ReadHeaderRecord()
            	Dim record As DataRecord = reader.ReadDataRecord
            
            	While (Not record Is Nothing)
            		System.Console.WriteLine("{0} is {1} years old", record("Name"), record("Age"))
            		record = reader.ReadDataRecord
            	End While
            Finally
            	If (Not reader Is Nothing) Then
            		reader.Close()
            	End If
            End Try
            ]]>
            </code>
            </para>
            <para>
            The data in <c>C:\data.csv</c> might look like this, for example:
            <code>
            Name,Gender,Age
            Kent,M,25
            Belinda,F,26
            Tempany,F,0
            </code>
            </para>
            </example>
            <example>
            <para>
            The following example reads the data in a file and outputs every 10th record, along with a count of the records that have been printed:
            </para>
            <para>
            <code lang="C#">
            <![CDATA[
            using (CsvReader reader = new CsvReader(@"C:\data.csv")) {
            	DataRecord record = null;
            
            	while (true) {
            		reader.SkipRecords(9, false);
            		record = reader.ReadDataRecord();
            
            		if (record != null) {
            			Console.WriteLine("Record {0}: {1}", reader.RecordNumber, record);
            		} else {
            			break;
            		}
            	}
            }
            ]]>
            </code>
            </para>
            <para>
            <code lang="vb">
            <![CDATA[
            Dim reader As CsvReader = Nothing
            
            Try
            	reader = New CsvReader("C:\data.csv")
            	Dim record As DataRecord = Nothing
            
            	While True
            		reader.SkipRecords(9, False)
            		record = reader.ReadDataRecord
            
            		If (Not record Is Nothing) Then
            			Console.WriteLine("Record {0}: {1}", reader.RecordNumber, record)
            			record = reader.ReadDataRecord
            		Else
            			Exit While
            		End If
            	End While
            Finally
            	If (Not reader Is Nothing) Then
            		reader.Close()
            	End If
            End Try
            ]]>
            </code>
            </para>
            </example>
            <example>
            <para>
            The following example fills a <c>DataSet</c> with CSV data. The table is called "csv-data". White space before each value is preserved:
            </para>
            <para>
            <code lang="C#">
            <![CDATA[
            using (CsvReader reader = new CsvReader(@"C:\data.csv")) {
            	reader.PreserveLeadingWhiteSpace = true;
            	reader.ReadHeaderRecord();
            	DataSet dataSet = new DataSet();
            	reader.Fill(dataSet, "csv-data");
            }
            ]]>
            </code>
            </para>
            <para>
            <code lang="vb">
            <![CDATA[
            Dim reader As CsvReader = Nothing
            
            Try
            	reader = New CsvReader("C:\data.csv")
            	reader.PreserveLeadingWhiteSpace = True
            	reader.ReadHeaderRecord()
            	Dim dataSet As DataSet = New DataSet
            	reader.Fill(dataSet, "csv-data")
            Finally
            	If (Not reader Is Nothing) Then
            		reader.Close()
            	End If
            End Try
            ]]>
            </code>
            </para>
            </example>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvReader._parser">
            <summary>
            The instance of <see cref="T:Kent.Boogaart.KBCsv.CsvParser"/> being used to parse the CSV data.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvReader._headerRecord">
            <summary>
            See <see cref="P:Kent.Boogaart.KBCsv.CsvReader.HeaderRecord"/>.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvReader._recordNumber">
            <summary>
            See <see cref="P:Kent.Boogaart.KBCsv.CsvReader.RecordNumber"/>.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvReader._disposed">
            <summary>
            Set to <see langword="true"/> when this object is disposed.
            </summary>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvReader.FromCsvString(System.String)">
            <summary>
            Creates an instance of <c>CsvReader</c> that uses <paramref name="csv"/> as its CSV data.
            </summary>
            <remarks>
            This method can be used to create a <c>CsvReader</c> that reads the CSV data in the supplied <c>string</c>.
            </remarks>
            <param name="csv">
            The CSV data to be read.
            </param>
            <returns>
            An instance of <c>CsvReader</c> that will read <paramref name="csv"/>
            </returns>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvReader.#ctor(System.IO.Stream)">
            <summary>
            Constructs and initialises an instance of <c>CsvReader</c> based on the information provided.
            </summary>
            <param name="stream">
            The stream to read CSV data from.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Constructs and initialises an instance of <c>CsvReader</c> based on the information provided.
            </summary>
            <param name="stream">
            The stream to read CSV data from.
            </param>
            <param name="encoding">
            The encoding for the data in <paramref name="stream"/>.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvReader.#ctor(System.String)">
            <summary>
            Constructs and initialises an instance of <c>CsvReader</c> based on the information provided.
            </summary>
            <param name="path">
            The full path to the file containing CSV data.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvReader.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Constructs and initialises an instance of <c>CsvReader</c> based on the information provided.
            </summary>
            <param name="path">
            The full path to the file containing CSV data.
            </param>
            <param name="encoding">
            The encoding for the data in the file at <paramref name="path"/>.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvReader.#ctor(System.IO.TextReader)">
            <summary>
            Constructs and initialises an instance of <c>CsvReader</c> based on the information provided.
            </summary>
            <param name="reader">
            The instance of <see cref="T:System.IO.TextReader"/> from which CSV data can be read.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvReader.System#IDisposable#Dispose">
            <summary>
            Disposes of this <c>CsvReader</c> instance.
            </summary>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvReader.Dispose(System.Boolean)">
            <summary>
            Allows sub classes to implement disposing logic.
            </summary>
            <param name="disposing">
            <see langword="true"/> if this method is being called in response to a <see cref="M:Kent.Boogaart.KBCsv.CsvReader.Dispose(System.Boolean)"/> call, or <see langword="false"/> if
            it is being called during finalization.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvReader.Close">
            <summary>
            Closes this <c>CsvReader</c> instance and releases all resources acquired by it.
            </summary>
            <remarks>
            Once an instance of <c>CsvReader</c> is no longer needed, call this method to immediately release any resources. Closing a <c>CsvReader</c> is equivalent to
            disposing of it via a C# <c>using</c> block.
            </remarks>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvReader.ReadHeaderRecord">
            <summary>
            Reads the first record from the CSV source and treats it as the header for the remainder of the parse.
            </summary>
            <remarks>
            <para>
            CSV data sources can optionally include a header record, which contains the names of the columns in the data. This method can be called to
            ensure that the first record of CSV data is treated as a header record. After making a successful call to this method, the header record is
            available via the <see cref="P:Kent.Boogaart.KBCsv.CsvReader.HeaderRecord"/> property on this <c>CsvReader</c>, but also from the <see cref="P:Kent.Boogaart.KBCsv.DataRecord.HeaderRecord"/>
            property in each instance of <see cref="T:Kent.Boogaart.KBCsv.DataRecord"/> created by this <c>CsvReader</c>.
            </para>
            <para>
            If a header record is present and read via this method, data can be accessed via column name as well as column index. For example:
            <code>
            <![CDATA[
            using (CsvReader reader = new CsvReader(@"C:\data.csv")) {
            	reader.ReadHeaderRecord();
            	DataRecord dataRecord = reader.ReadDataRecord();
            	string age = dataRecord["Age"];
            }
            ]]>
            </code>
            </para>
            </remarks>
            <returns>
            The header for the CSV source, or <see langword="null"/> if no record was found to treat as a header.
            </returns>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvReader.ReadDataRecord">
            <summary>
            Reads the next data record and returns it. <see langword="null"/> is returned if no more records are found in the CSV source.
            </summary>
            <remarks>
            This method will parse the next record and return it as an instance of <see cref="T:Kent.Boogaart.KBCsv.DataRecord"/>. If the convenience of the <c>DataRecord</c> class is not needed,
            you can use the <see cref="M:Kent.Boogaart.KBCsv.CsvReader.ReadDataRecordAsStrings"/> to gain a slight performance benefit.
            </remarks>
            <returns>
            The next CSV data record, or <see langword="null"/> if no more records were found in the CSV source.
            </returns>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvReader.ReadDataRecordAsStrings">
            <summary>
            Reads the next data record and returns it as an array of strings.
            </summary>
            <remarks>
            This method may be useful if the convenience of a <see cref="T:Kent.Boogaart.KBCsv.DataRecord"/> instance is not required. Invoking this method instead of
            <see cref="M:Kent.Boogaart.KBCsv.CsvReader.ReadDataRecord"/> yields a slight performance benefit.
            </remarks>
            <returns>
            An array of type <c>string</c> containing the values in the next record, or <see langword="null"/> if no record was found.
            </returns>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvReader.ReadDataRecords">
            <summary>
            Reads and returns all CSV data records as a collection of <c>DataRecord</c> instances.
            </summary>
            <remarks>
            This method reads the CSV data into memory. For more efficient reading, it is often better to use the <see cref="P:Kent.Boogaart.KBCsv.CsvReader.DataRecords"/> property, which yields an
            enumerator that only keeps one record in memory at a time. Alternatively, you can restrict the number of records read by using the
            <see cref="M:Kent.Boogaart.KBCsv.CsvReader.ReadDataRecords(System.Int32)"/> overload.
            </remarks>
            <returns>
            A collection of all CSV records as <c>DataRecord</c> instances. This method will never return <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvReader.ReadDataRecords(System.Int32)">
            <summary>
            Reads and returns all CSV data records as <c>DataRecord</c> instances up to a specified maximum number of records.
            </summary>
            <param name="maximumRecords">
            The maximum number of records to read.
            </param>
            <remarks>
            This method reads the CSV data into memory. For more efficient reading, it is often better to use the <see cref="P:Kent.Boogaart.KBCsv.CsvReader.DataRecords"/> property, which yields an
            enumerator that only keeps one record in memory at a time.
            </remarks>
            <returns>
            A collection of records whose length will never surpass <paramref name="maximumRecords"/>. If there are insufficient records in the CSV data,
            this method will retrieve the remaining records. This method will never return <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvReader.ReadDataRecordsAsStrings">
            <summary>
            Reads and returns all CSV data records as <c>string</c> arrays.
            </summary>
            <remarks>
            This method reads the CSV data into memory. For more efficient reading, it is often better to use the <see cref="P:Kent.Boogaart.KBCsv.CsvReader.DataRecordsAsStrings"/> property, which yields an
            enumerator that only keeps one record in memory at a time. Alternatively, you can restrict the number of records read by using the
            <see cref="M:Kent.Boogaart.KBCsv.CsvReader.ReadDataRecordsAsStrings(System.Int32)"/> overload.
            </remarks>
            <returns>
            A collection of all CSV records as <c>string</c> arrays. This method will never return <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvReader.ReadDataRecordsAsStrings(System.Int32)">
            <summary>
            Reads and returns all CSV data records as <c>string</c> arrays up to a specified maximum number of records.
            </summary>
            <param name="maximumRecords">
            The maximum number of records to read.
            </param>
            <remarks>
            This method reads the CSV data into memory. For more efficient reading, it is often better to use the <see cref="P:Kent.Boogaart.KBCsv.CsvReader.DataRecordsAsStrings"/> property, which yields an
            enumerator that only keeps one record in memory at a time.
            </remarks>
            <returns>
            A collection of records whose length will never surpass <paramref name="maximumRecords"/>. If there are insufficient records in the CSV data,
            this method will retrieve the remaining records. This method will never return <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvReader.SkipRecord">
            <summary>
            Skips the next CSV record in the data source.
            </summary>
            <remarks>
            This method skips over a CSV record and increments the record counter if the skip was successful. To avoid incrementing the record counter,
            use <see cref="M:Kent.Boogaart.KBCsv.CsvReader.SkipRecord(System.Boolean)"/>.
            </remarks>
            <returns>
            <see langword="true"/> if the record was skipped, or <see langword="false"/> if there is no record to skip.
            </returns>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvReader.SkipRecord(System.Boolean)">
            <summary>
            Skips the next CSV record and optionally increments the record counter.
            </summary>
            <param name="incrementRecordNumber">
            If <see langword="true"/>, the <see cref="P:Kent.Boogaart.KBCsv.CsvReader.RecordNumber"/> property will be incremented on a successful skip operation.
            </param>
            <returns>
            <see langword="true"/> if the record was skipped, or <see langword="false"/> if there is no record to skip.
            </returns>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvReader.SkipRecords(System.Int32)">
            <summary>
            Skips the specified number of records and increments the record counter for each record skipped.
            </summary>
            <param name="number">
            The maximum number of records to skip.
            </param>
            <returns>
            The actual number of records skipped. If this is less than <paramref name="number"/> then the end of the CSV data was reached.
            </returns>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvReader.SkipRecords(System.Int32,System.Boolean)">
            <summary>
            Skips the specified number of records, optionally incrementing the record counter for each record skipped.
            </summary>
            <param name="number">
            The maximum number of records to skip.
            </param>
            <param name="incrementRecordNumber">
            If <see langword="true"/>, the <see cref="P:Kent.Boogaart.KBCsv.CsvReader.RecordNumber"/> property will be incremented for each record skipped.
            </param>
            <returns>
            The actual number of records skipped. If this is less than <paramref name="number"/> then the end of the CSV data was reached.
            </returns>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvReader.EnsureNotDisposed">
            <summary>
            Makes sure the object isn't disposed and, if so, throws an exception.
            </summary>
        </member>
        <member name="P:Kent.Boogaart.KBCsv.CsvReader.PreserveLeadingWhiteSpace">
            <summary>
            Gets or sets a value indicating whether leading whitespace is to be preserved during parsing.
            </summary>
        </member>
        <member name="P:Kent.Boogaart.KBCsv.CsvReader.PreserveTrailingWhiteSpace">
            <summary>
            Gets or sets a value indicating whether trailing whitespace is to be preserved during parsing.
            </summary>
        </member>
        <member name="P:Kent.Boogaart.KBCsv.CsvReader.ValueSeparator">
            <summary>
            Gets or sets the character placed between values in the CSV data.
            </summary>
            <remarks>
            This property can be used to determine what character the <c>CsvReader</c> will treat as a value separator whilst parsing CSV data. The
            default separator is a comma (<c>,</c>).
            </remarks>
        </member>
        <member name="P:Kent.Boogaart.KBCsv.CsvReader.ValueDelimiter">
            <summary>
            Gets the character possibly placed around values in the CSV data.
            </summary>
            <remarks>
            <para>
            This property can be used to determine what character the <c>CsvReader</c> will treat as a demarcation around values. The default delimiter
            is a double quote (<c>"</c>).
            </para>
            <para>
            Note that the CSV parser does not require values to be delimited with this character. However, values that are delimited can contain
            special characters such as <see cref="P:Kent.Boogaart.KBCsv.CsvReader.ValueSeparator"/> and <see cref="P:System.Environment.NewLine"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Kent.Boogaart.KBCsv.CsvReader.HeaderRecord">
            <summary>
            Gets or sets the CSV header for this reader.
            </summary>
            <value>
            The CSV header record for this reader, or <see langword="null"/> if no header record applies.
            </value>
            <remarks>
            This property yields the CSV header for the current CSV data. It can also be used to explicitly set a header record rather than using
            <see cref="M:Kent.Boogaart.KBCsv.CsvReader.ReadHeaderRecord"/>.
            </remarks>
        </member>
        <member name="P:Kent.Boogaart.KBCsv.CsvReader.RecordNumber">
            <summary>
            Gets the current record number.
            </summary>
            <remarks>
            This property gives the number of records that the <c>CsvReader</c> has parsed. The CSV header does not count. That is, calling
            <see cref="M:Kent.Boogaart.KBCsv.CsvReader.ReadHeaderRecord"/> will not increment this property. Only successful calls to <see cref="M:Kent.Boogaart.KBCsv.CsvReader.ReadDataRecord"/> (and related methods)
            will increment this property.
            </remarks>
        </member>
        <member name="P:Kent.Boogaart.KBCsv.CsvReader.HasMoreRecords">
            <summary>
            Gets a value indicating whether this <c>CsvReader</c> has more CSV records to read in addition to those already read.
            </summary>
            <remarks>
            This property can be used to determine whether a call to <see cref="M:Kent.Boogaart.KBCsv.CsvReader.ReadDataRecord"/>, for example, will successfully retrieve a record. It
            does not affect the state of the <c>CsvReader</c>.
            </remarks>
        </member>
        <member name="P:Kent.Boogaart.KBCsv.CsvReader.DataRecords">
            <summary>
            Gets an instance of <see cref="T:System.Collections.Generic.IEnumerable`1"/> that can be used to iterate over the CSV data records from the current position of
            this reader and its end.
            </summary>
            <remarks>
            This property can be used to iterate over the data records in this <c>CsvReader</c>.
            </remarks>
        </member>
        <member name="P:Kent.Boogaart.KBCsv.CsvReader.DataRecordsAsStrings">
            <summary>
            Gets an instance of <see cref="T:System.Collections.Generic.IEnumerable`1"/> that can be used to iterate over the CSV data in this reader as arrays of
            <c>string</c>s.
            </summary>
            <remarks>
            This property can be used to iterate over the data in this <c>CsvReader</c>.
            </remarks>
        </member>
        <member name="T:Kent.Boogaart.KBCsv.CsvWriter">
            <summary>
            Provides a mechanism via which CSV data can be easily written.
            </summary>
            <remarks>
            <para>
            The <c>CsvWriter</c> class allows CSV data to be written to any stream-based destination. By default, CSV values are separated by commas
            (<c>,</c>) and delimited by double quotes (<c>"</c>). If necessary, custom characters can be specified when creating the <c>CsvWriter</c>.
            </para>
            <para>
            The number of records that have been written so far is exposed via the <see cref="P:Kent.Boogaart.KBCsv.CsvWriter.RecordNumber"/> property. Writing a header record does not
            increment this property.
            </para>
            <para>
            A CSV header record can be optionally written by the <c>CsvWriter</c>. If a header record is to be written, it must be done first thing with
            the <see cref="M:Kent.Boogaart.KBCsv.CsvWriter.WriteHeaderRecord(Kent.Boogaart.KBCsv.HeaderRecord)"/> method. If a header record is written, it is exposed via the <see cref="P:Kent.Boogaart.KBCsv.CsvWriter.HeaderRecord"/> property.
            </para>
            <para>
            Data records can be written with the <see cref="M:Kent.Boogaart.KBCsv.CsvWriter.WriteDataRecord(Kent.Boogaart.KBCsv.DataRecord)"/> or <see cref="M:Kent.Boogaart.KBCsv.CsvWriter.WriteDataRecords(System.Collections.Generic.ICollection{Kent.Boogaart.KBCsv.DataRecord})"/> methods. These methods are overloaded to
            accept either instances of <see cref="T:Kent.Boogaart.KBCsv.DataRecord"/> or an array of <c>string</c>s.
            </para>
            </remarks>
            <threadsafety>
            The <c>CsvWriter</c> class does not lock internally. Therefore, it is unsafe to share an instance across threads without implementing your own
            synchronisation solution.
            </threadsafety>
            <example>
            <para>
            The following example writes some simple CSV data to a file:
            </para>
            <para>
            <code lang="C#">
            <![CDATA[
            using (CsvWriter writer = new CsvWriter(@"C:\Temp\data.csv")) {
            	writer.WriteHeaderRecord("Name", "Age", "Gender");
            	writer.WriteDataRecord("Kent", 25, Gender.Male);
            	writer.WriteDataRecord("Belinda", 26, Gender.Female);
            	writer.WriteDataRecord("Tempany", 0, Gender.Female);
            }
            ]]>
            </code>
            </para>
            <para>
            <code lang="vb">
            <![CDATA[
            Dim writer As CsvWriter = Nothing
            
            Try
            	writer = New CsvWriter("C:\Temp\data.csv")
            	writer.WriteHeaderRecord("Name", "Age", "Gender")
            	writer.WriteDataRecord("Kent", 25, Gender.Male)
            	writer.WriteDataRecord("Belinda", 26, Gender.Female)
            	writer.WriteDataRecord("Tempany", 0, Gender.Female)
            Finally
            	If (Not writer Is Nothing) Then
            		writer.Close()
            	End If
            End Try
            ]]>
            </code>
            </para>
            </example>
            <example>
            <para>
            The following example writes the contents of a <c>DataTable</c> to a <see cref="T:System.IO.MemoryStream"/>. CSV values are separated by tabs and
            delimited by the pipe characters (<c>|</c>). Linux-style line breaks are written by the <c>CsvWriter</c>, regardless of the hosting platform:
            </para>
            <para>
            <code lang="C#">
            <![CDATA[
            DataTable table = GetDataTable();
            MemoryStream memStream = new MemoryStream();
            
            using (CsvWriter writer = new CsvWriter(memStream)) {
            	writer.NewLine = "\r";
            	writer.ValueSeparator = '\t';
            	writer.ValueDelimiter = '|';
            	writer.WriteAll(table, true);
            }
            ]]>
            </code>
            </para>
            <para>
            <code lang="vb">
            <![CDATA[
            Dim table As DataTable = GetDataTable
            Dim memStream As MemoryStream = New MemoryStream
            Dim writer As CsvWriter = Nothing
            
            Try
            	writer = New CsvWriter(memStream)
            	writer.NewLine = vbLf
            	writer.ValueSeparator = vbTab
            	writer.ValueDelimiter = "|"c
            	writer.WriteAll(table, True)
            Finally
            	If (Not writer Is Nothing) Then
            		writer.Close()
            	End If
            End Try
            ]]>
            </code>
            </para>
            </example>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvWriter.SPACE">
            <summary>
            The space character.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvWriter.CR">
            <summary>
            The carriage return character. Escape code is <c>\r</c>.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvWriter.LF">
            <summary>
            The line-feed character. Escape code is <c>\n</c>.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvWriter._writer">
            <summary>
            The <see cref="T:System.IO.TextWriter"/> used to output CSV data.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvWriter._disposed">
            <summary>
            Set to <see langword="true"/> when this <c>CsvWriter</c> is disposed.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvWriter._headerRecord">
            <summary>
            See <see cref="P:Kent.Boogaart.KBCsv.CsvWriter.HeaderRecord"/>.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvWriter._alwaysDelimit">
            <summary>
            See <see cref="P:Kent.Boogaart.KBCsv.CsvWriter.AlwaysDelimit"/>.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvWriter._valueBuffer">
            <summary>
            The buffer of characters containing the current value.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvWriter._valueBufferEndIndex">
            <summary>
            The last valid index into <see cref="F:Kent.Boogaart.KBCsv.CsvWriter._valueBuffer"/>.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvWriter._valueSeparator">
            <summary>
            See <see cref="P:Kent.Boogaart.KBCsv.CsvWriter.ValueSeparator"/>.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvWriter._valueDelimiter">
            <summary>
            See <see cref="P:Kent.Boogaart.KBCsv.CsvWriter.ValueDelimiter"/>.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvWriter._recordNumber">
            <summary>
            See <see cref="P:Kent.Boogaart.KBCsv.CsvWriter.RecordNumber"/>.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.CsvWriter._passedFirstRecord">
            <summary>
            Set to <see langword="true"/> once the first record is written.
            </summary>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.#ctor(System.IO.Stream)">
            <summary>
            Constructs and initialises an instance of <c>CsvWriter</c> based on the information provided.
            </summary>
            <remarks>
            If the specified file already exists, it will be overwritten.
            </remarks>
            <param name="stream">
            The stream to which CSV data will be written.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Constructs and initialises an instance of <c>CsvWriter</c> based on the information provided.
            </summary>
            <remarks>
            If the specified file already exists, it will be overwritten.
            </remarks>
            <param name="stream">
            The stream to which CSV data will be written.
            </param>
            <param name="encoding">
            The encoding for the data in <paramref name="stream"/>.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.#ctor(System.String)">
            <summary>
            Constructs and initialises an instance of <c>CsvWriter</c> based on the information provided.
            </summary>
            <remarks>
            If the specified file already exists, it will be overwritten.
            </remarks>
            <param name="path">
            The full path to the file to which CSV data will be written.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Constructs and initialises an instance of <c>CsvWriter</c> based on the information provided.
            </summary>
            <remarks>
            If the specified file already exists, it will be overwritten.
            </remarks>
            <param name="path">
            The full path to the file to which CSV data will be written.
            </param>
            <param name="encoding">
            The encoding for the data in <paramref name="path"/>.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs and initialises an instance of <c>CsvWriter</c> based on the information provided.
            </summary>
            <remarks>
            If the specified file already exists, it will be overwritten.
            </remarks>
            <param name="path">
            The full path to the file to which CSV data will be written.
            </param>
            <param name="append">
            If <c>true</c>, data will be appended to the specified file.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.#ctor(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Constructs and initialises an instance of <c>CsvWriter</c> based on the information provided.
            </summary>
            <remarks>
            If the specified file already exists, it will be overwritten.
            </remarks>
            <param name="path">
            The full path to the file to which CSV data will be written.
            </param>
            <param name="append">
            If <c>true</c>, data will be appended to the specified file.
            </param>
            <param name="encoding">
            The encoding for the data in <paramref name="path"/>.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Constructs and initialises an instance of <c>CsvWriter</c> based on the information provided.
            </summary>
            <param name="writer">
            The <see cref="T:System.IO.TextWriter"/> to which CSV data will be written.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.System#IDisposable#Dispose">
            <summary>
            Disposes of this <c>CsvWriter</c> instance.
            </summary>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.Dispose(System.Boolean)">
            <summary>
            Allows sub classes to implement disposing logic.
            </summary>
            <param name="disposing">
            <see langword="true"/> if this method is being called in response to a <see cref="M:Kent.Boogaart.KBCsv.CsvWriter.Dispose(System.Boolean)"/> call, or <see langword="false"/> if
            it is being called during finalization.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.Close">
            <summary>
            Closes this <c>CsvWriter</c> instance and releases all resources acquired by it.
            </summary>
            <remarks>
            Once an instance of <c>CsvWriter</c> is no longer needed, call this method to immediately release any resources. Closing a <c>CsvWriter</c> is equivalent to
            disposing of it in a C# <c>using</c> block.
            </remarks>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.Flush">
            <summary>
            Flushes the underlying buffer of this <c>CsvWriter</c>.
            </summary>
            <remarks>
            This method can be used to flush the underlying <c>Stream</c> that this <c>CsvWriter</c> writes to.
            </remarks>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.WriteHeaderRecord(Kent.Boogaart.KBCsv.HeaderRecord)">
            <summary>
            Writes the specified record to this <c>CsvWriter</c>.
            </summary>
            <remarks>
            This method writes a single data record to this <c>CsvWriter</c>. The <see cref="P:Kent.Boogaart.KBCsv.CsvWriter.RecordNumber"/> property is incremented upon successfully writing
            the record.
            </remarks>
            <param name="headerRecord">
            The record to be written.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.WriteHeaderRecord(System.Object[])">
            <summary>
            Writes a data record with the specified values.
            </summary>
            <remarks>
            Each item in <paramref name="headerRecord"/> is converted to a <c>string</c> via its <c>ToString</c> implementation. If any item is <see langword="null"/>, it is substituted
            for an empty <c>string</c> (<see cref="F:System.String.Empty"/>).
            </remarks>
            <param name="headerRecord">
            The record to be written.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.WriteHeaderRecord(System.IFormatProvider,System.Object[])">
            <summary>
            Writes a data record with the specified values.
            </summary>
            <remarks>
            Each item in <paramref name="headerRecord"/> is converted to a <c>string</c> via its <c>ToString</c> implementation. If any item is <see langword="null"/>, it is substituted
            for an empty <c>string</c> (<see cref="F:System.String.Empty"/>).
            </remarks>
            <param name="provider">
            The format provider to use for any items in the data record that implement <see cref="T:System.IConvertible"/>.
            </param>
            <param name="headerRecord">
            The record to be written.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.WriteHeaderRecord(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Writes the specified record to this <c>CsvWriter</c>.
            </summary>
            <remarks>
            This method writes a single data record to this <c>CsvWriter</c>. The <see cref="P:Kent.Boogaart.KBCsv.CsvWriter.RecordNumber"/> property is incremented upon successfully writing
            the record.
            </remarks>
            <param name="headerRecord">
            The record to be written.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.WriteHeaderRecord(System.IFormatProvider,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Writes the specified record to this <c>CsvWriter</c>.
            </summary>
            <remarks>
            This method writes a single data record to this <c>CsvWriter</c>. The <see cref="P:Kent.Boogaart.KBCsv.CsvWriter.RecordNumber"/> property is incremented upon successfully writing
            the record.
            </remarks>
            <param name="provider">
            The format provider to use for any items in the data record that implement <see cref="T:System.IConvertible"/>.
            </param>
            <param name="headerRecord">
            The record to be written.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.WriteHeaderRecord(System.String[])">
            <summary>
            Writes the specified record to this <c>CsvWriter</c>.
            </summary>
            <remarks>
            This method writes a single data record to this <c>CsvWriter</c>. The <see cref="P:Kent.Boogaart.KBCsv.CsvWriter.RecordNumber"/> property is incremented upon successfully writing
            the record.
            </remarks>
            <param name="headerRecord">
            The record to be written.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.WriteHeaderRecord(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes the specified record to this <c>CsvWriter</c>.
            </summary>
            <remarks>
            This method writes a single data record to this <c>CsvWriter</c>. The <see cref="P:Kent.Boogaart.KBCsv.CsvWriter.RecordNumber"/> property is incremented upon successfully writing
            the record.
            </remarks>
            <param name="headerRecord">
            The record to be written.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.WriteDataRecord(Kent.Boogaart.KBCsv.DataRecord)">
            <summary>
            Writes the specified record to this <c>CsvWriter</c>.
            </summary>
            <remarks>
            This method writes a single data record to this <c>CsvWriter</c>. The <see cref="P:Kent.Boogaart.KBCsv.CsvWriter.RecordNumber"/> property is incremented upon successfully writing
            the record.
            </remarks>
            <param name="dataRecord">
            The record to be written.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.WriteDataRecord(System.Object[])">
            <summary>
            Writes a data record with the specified values.
            </summary>
            <remarks>
            Each item in <paramref name="dataRecord"/> is converted to a <c>string</c> via its <c>ToString</c> implementation. If any item is <see langword="null"/>, it is substituted
            for an empty <c>string</c> (<see cref="F:System.String.Empty"/>).
            </remarks>
            <param name="dataRecord">
            The record to be written.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.WriteDataRecord(System.IFormatProvider,System.Object[])">
            <summary>
            Writes a data record with the specified values.
            </summary>
            <remarks>
            Each item in <paramref name="dataRecord"/> is converted to a <c>string</c> via its <c>ToString</c> implementation. If any item is <see langword="null"/>, it is substituted
            for an empty <c>string</c> (<see cref="F:System.String.Empty"/>).
            </remarks>
            <param name="provider">
            The format provider to use for any items in the data record that implement <see cref="T:System.IConvertible"/>.
            </param>
            <param name="dataRecord">
            The record to be written.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.WriteDataRecord(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Writes the specified record to this <c>CsvWriter</c>.
            </summary>
            <remarks>
            This method writes a single data record to this <c>CsvWriter</c>. The <see cref="P:Kent.Boogaart.KBCsv.CsvWriter.RecordNumber"/> property is incremented upon successfully writing
            the record.
            </remarks>
            <param name="dataRecord">
            The record to be written.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.WriteDataRecord(System.IFormatProvider,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Writes the specified record to this <c>CsvWriter</c>.
            </summary>
            <remarks>
            This method writes a single data record to this <c>CsvWriter</c>. The <see cref="P:Kent.Boogaart.KBCsv.CsvWriter.RecordNumber"/> property is incremented upon successfully writing
            the record.
            </remarks>
            <param name="provider">
            The format provider to use for any items in the data record that implement <see cref="T:System.IConvertible"/>.
            </param>
            <param name="dataRecord">
            The record to be written.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.WriteDataRecord(System.String[])">
            <summary>
            Writes the specified record to this <c>CsvWriter</c>.
            </summary>
            <remarks>
            This method writes a single data record to this <c>CsvWriter</c>. The <see cref="P:Kent.Boogaart.KBCsv.CsvWriter.RecordNumber"/> property is incremented upon successfully writing
            the record.
            </remarks>
            <param name="dataRecord">
            The record to be written.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.WriteDataRecord(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes the specified record to this <c>CsvWriter</c>.
            </summary>
            <remarks>
            This method writes a single data record to this <c>CsvWriter</c>. The <see cref="P:Kent.Boogaart.KBCsv.CsvWriter.RecordNumber"/> property is incremented upon successfully writing
            the record.
            </remarks>
            <param name="dataRecord">
            The record to be written.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.WriteDataRecords(System.Collections.Generic.ICollection{Kent.Boogaart.KBCsv.DataRecord})">
            <summary>
            Writes all records specified by <paramref name="dataRecords"/> to this <c>CsvWriter</c>.
            </summary>
            <remarks>
            This method writes all data records in <paramref name="dataRecords"/> to this <c>CsvWriter</c> and increments the <see cref="P:Kent.Boogaart.KBCsv.CsvWriter.RecordNumber"/> property
            as records are written.
            </remarks>
            <param name="dataRecords">
            The records to be written.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.WriteDataRecords(System.Collections.Generic.ICollection{System.String[]})">
            <summary>
            Writes all records specified by <paramref name="dataRecords"/> to this <c>CsvWriter</c>.
            </summary>
            <remarks>
            This method writes all data records in <paramref name="dataRecords"/> to this <c>CsvWriter</c> and increments the <see cref="P:Kent.Boogaart.KBCsv.CsvWriter.RecordNumber"/> property
            as records are written.
            </remarks>
            <param name="dataRecords">
            The records to be written.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.WriteRecord(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Writes the specified record to the target <see cref="T:System.IO.TextWriter"/>, ensuring all values are correctly separated and escaped.
            </summary>
            <remarks>
            This method is used internally by the <c>CsvWriter</c> to write CSV records.
            </remarks>
            <param name="record">
            The record to be written.
            </param>
            <param name="incrementRecordNumber">
            <see langword="true"/> if the record number should be incremented, otherwise <see langword="false"/>.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.WriteValue(System.String)">
            <summary>
            Writes the specified value to the target <see cref="T:System.IO.TextWriter"/>, ensuring it is correctly escaped.
            </summary>
            <remarks>
            This method is used internally by the <c>CsvWriter</c> to write individual CSV values.
            </remarks>
            <param name="val">
            The value to be written.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.AppendToValue(System.Char)">
            <summary>
            Appends the specified character onto the end of the current value.
            </summary>
            <param name="c">
            The character to append.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.EnsureValueBufferCapacity(System.Int32)">
            <summary>
            Ensures the value buffer contains enough space for <paramref name="count"/> more characters.
            </summary>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.EnsureNotDisposed">
            <summary>
            Makes sure the object isn't disposed and, if so, throws an exception.
            </summary>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.CsvWriter.ConvertItemToString(System.IFormatProvider,System.Object)">
            <summary>
            Converts an item to a string given an <see cref="T:System.IFormatProvider"/>.
            </summary>
        </member>
        <member name="P:Kent.Boogaart.KBCsv.CsvWriter.Encoding">
            <summary>
            Gets the encoding of the underlying writer for this <c>CsvWriter</c>.
            </summary>
        </member>
        <member name="P:Kent.Boogaart.KBCsv.CsvWriter.AlwaysDelimit">
            <summary>
            Gets or sets a value indicating whether values should always be delimited.
            </summary>
            <remarks>
            By default the <c>CsvWriter</c> will only delimit values that require delimiting. Setting this property to <c>true</c> will ensure that all written values are
            delimited.
            </remarks>
        </member>
        <member name="P:Kent.Boogaart.KBCsv.CsvWriter.ValueSeparator">
            <summary>
            Gets or sets the character placed between values in the CSV data.
            </summary>
            <remarks>
            This property retrieves the character that this <c>CsvWriter</c> will use to separate distinct values in the CSV data. The default value
            of this property is a comma (<c>,</c>).
            </remarks>
        </member>
        <member name="P:Kent.Boogaart.KBCsv.CsvWriter.ValueDelimiter">
            <summary>
            Gets the character possibly placed around values in the CSV data.
            </summary>
            <remarks>
            <para>
            This property retrieves the character that this <c>CsvWriter</c> will use to demarcate values in the CSV data. The default value of this
            property is a double quote (<c>"</c>).
            </para>
            <para>
            If <see cref="P:Kent.Boogaart.KBCsv.CsvWriter.AlwaysDelimit"/> is <c>true</c>, then values written by this <c>CsvWriter</c> will always be delimited with this character. Otherwise, the
            <c>CsvWriter</c> will decide whether values must be delimited based on their content.
            </para>
            </remarks>
        </member>
        <member name="P:Kent.Boogaart.KBCsv.CsvWriter.NewLine">
            <summary>
            Gets or sets the line terminator for this <c>CsvWriter</c>.
            </summary>
            <remarks>
            This property gets or sets the line terminator for the underlying <c>TextWriter</c> used by this <c>CsvWriter</c>. If this is set to <see langword="null"/> the
            default newline string is used instead.
            </remarks>
        </member>
        <member name="P:Kent.Boogaart.KBCsv.CsvWriter.HeaderRecord">
            <summary>
            Gets the CSV header for this writer.
            </summary>
            <value>
            The CSV header record for this writer, or <see langword="null"/> if no header record applies.
            </value>
            <remarks>
            This property can be used to retrieve the <see cref="P:Kent.Boogaart.KBCsv.CsvWriter.HeaderRecord"/> that represents the header record for this <c>CsvWriter</c>. If a
            header record has been written (using, for example, <see cref="M:Kent.Boogaart.KBCsv.CsvWriter.WriteHeaderRecord(Kent.Boogaart.KBCsv.HeaderRecord)"/>) then this property will retrieve the details of the
            header record. If a header record has not been written, this property will return <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Kent.Boogaart.KBCsv.CsvWriter.RecordNumber">
            <summary>
            Gets the current record number.
            </summary>
            <remarks>
            This property gives the number of records that the <c>CsvWriter</c> has written. The CSV header does not count. That is, calling
            <see cref="M:Kent.Boogaart.KBCsv.CsvWriter.WriteHeaderRecord(Kent.Boogaart.KBCsv.HeaderRecord)"/> will not increment this property. Only successful calls to <see cref="M:Kent.Boogaart.KBCsv.CsvWriter.WriteDataRecord(Kent.Boogaart.KBCsv.DataRecord)"/> (and related methods)
            will increment this property.
            </remarks>
        </member>
        <member name="T:Kent.Boogaart.KBCsv.DataRecord">
            <summary>
            Represents a single CSV data record.
            </summary>
            <remarks>
            <para>
            Instances of this class are used to represent a record of CSV data. Each record has any number of values in it, accessible via the indexers in
            this class.
            </para>
            <para>
            If the CSV data source that this record originates from had a header record initialised, it is exposed via the <see cref="P:Kent.Boogaart.KBCsv.DataRecord.HeaderRecord"/>
            property.
            </para>
            </remarks>
        </member>
        <member name="T:Kent.Boogaart.KBCsv.RecordBase">
            <summary>
            A base class for CSV record types.
            </summary>
            <remarks>
            The CSV record types <see cref="T:Kent.Boogaart.KBCsv.HeaderRecord"/> and <see cref="T:Kent.Boogaart.KBCsv.DataRecord"/> obtain common functionality by inheriting from this class.
            </remarks>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.RecordBase.ValueSeparator">
            <summary>
            The character used to separator values in the <see cref="M:Kent.Boogaart.KBCsv.RecordBase.ToString"/> implementation
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.RecordBase._values">
            <summary>
            See <see cref="P:Kent.Boogaart.KBCsv.RecordBase.Values"/>.
            </summary>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.RecordBase.#ctor">
            <summary>
            Initialises an instance of <c>RecordBase</c> with no values.
            </summary>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.RecordBase.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initialises an instance of the <c>RecordBase</c> class with the values specified.
            </summary>
            <param name="values">
            The values for the CSV record.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.RecordBase.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Initialises an instance of the <c>RecordBase</c> class with the values specified, optionally making the value collection read-only.
            </summary>
            <param name="values">
            The values for the CSV record.
            </param>
            <param name="readOnly">
            If <see langword="true"/>, the value collection will be read-only.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.RecordBase.GetValueOrNull(System.Int32)">
            <summary>
            Gets the value at the specified index, or <see langword="null"/> if the index is invalid.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The value, or <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.RecordBase.Equals(System.Object)">
            <summary>
            Determines whether this <c>RecordBase</c> is equal to <paramref name="obj"/>.
            </summary>
            <remarks>
            Two <c>RecordBase</c> instances are considered equal if they contain the same number of values, and each of their corresponding values are also
            equal.
            </remarks>
            <param name="obj">
            The object to compare to this <c>RecordBase</c>.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> is equal to this <c>RecordBase</c>, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.RecordBase.GetHashCode">
            <summary>
            Gets a hash code for this <c>RecordBase</c>.
            </summary>
            <returns>
            A hash code for this <c>RecordBase</c>.
            </returns>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.RecordBase.ToString">
            <summary>
            Returns a <c>string</c> representation of this CSV record.
            </summary>
            <remarks>
            This method is provided for debugging and diagnostics only. Each value in the record is present in the returned string, with a bullet
            character (<c>U+2022</c>) separating them.
            </remarks>
            <returns>
            A <c>string</c> representation of this record.
            </returns>
        </member>
        <member name="P:Kent.Boogaart.KBCsv.RecordBase.Item(System.Int32)">
            <summary>
            Gets the value at the specified index for this CSV record.
            </summary>
        </member>
        <member name="P:Kent.Boogaart.KBCsv.RecordBase.Values">
            <summary>
            Gets a collection of values in this CSV record.
            </summary>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.DataRecord._headerRecord">
            <summary>
            See <see cref="P:Kent.Boogaart.KBCsv.DataRecord.HeaderRecord"/>.
            </summary>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.DataRecord.FromParser(Kent.Boogaart.KBCsv.HeaderRecord,Kent.Boogaart.KBCsv.CsvParser)">
            <summary>
            Creates and returns an instance of <c>DataRecord</c> by parsing with the provided CSV parser.
            </summary>
            <param name="headerRecord">
            The header record for the parsed data record, or <see langword="null"/> if irrelevant.
            </param>
            <param name="parser">
            The CSV parser to use.
            </param>
            <returns>
            The CSV record, or <see langword="null"/> if no record was found in the reader provided.
            </returns>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.DataRecord.#ctor(Kent.Boogaart.KBCsv.HeaderRecord)">
            <summary>
            Constructs an instance of <c>DataRecord</c> with the header specified.
            </summary>
            <param name="headerRecord">
            The header record for this CSV record, or <see langword="null"/> if no header record applies.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.DataRecord.#ctor(Kent.Boogaart.KBCsv.HeaderRecord,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructs an instance of <c>DataRecord</c> with the header and values specified.
            </summary>
            <param name="headerRecord">
            The header record for this CSV record, or <see langword="null"/> if no header record applies.
            </param>
            <param name="values">
            The values for this CSV record.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.DataRecord.#ctor(Kent.Boogaart.KBCsv.HeaderRecord,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Constructs an instance of <c>DataRecord</c> with the header and values specified, optionally making the values in this data record
            read-only.
            </summary>
            <param name="headerRecord">
            The header record for this CSV record, or <see langword="null"/> if no header record applies.
            </param>
            <param name="values">
            The values for this CSV record.
            </param>
            <param name="readOnly">
            If <see langword="true"/>, the values in this data record are read-only.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.DataRecord.GetValueOrNull(System.String)">
            <summary>
            Gets the value in the specified column, or <see langword="null"/> if the value does not exist.
            </summary>
            <param name="column">
            The column name.
            </param>
            <returns>
            The value, or <see langword="null"/> if the value does not exist for this record.
            </returns>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.DataRecord.Equals(System.Object)">
            <summary>
            Determines whether this <c>DataRecord</c> is equal to <paramref name="obj"/>.
            </summary>
            <remarks>
            Two <c>DataRecord</c> instances are considered equal if all their values are equal and their header records are equal.
            </remarks>
            <param name="obj">
            The object to compare to this <c>DataRecord</c>.
            </param>
            <returns>
            <see langword="true"/> if this <c>DataRecord</c> equals <paramref name="obj"/>, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.DataRecord.GetHashCode">
            <summary>
            Gets a hash code for this <c>DataRecord</c>.
            </summary>
            <returns>
            A hash code for this <c>DataRecord</c>.
            </returns>
        </member>
        <member name="P:Kent.Boogaart.KBCsv.DataRecord.HeaderRecord">
            <summary>
            Gets the header record for this CSV record, or <see langword="null"/> if no header record applies.
            </summary>
            <remarks>
            If no header record was initially read from the CSV data source, then this property yields <see langword="null"/>. Otherwise, it yields the
            <see cref="P:Kent.Boogaart.KBCsv.DataRecord.HeaderRecord"/> instance that contains the details of the header record.
            </remarks>
        </member>
        <member name="P:Kent.Boogaart.KBCsv.DataRecord.Item(System.String)">
            <summary>
            Gets a value in this CSV record by column name.
            </summary>
            <remarks>
            This indexer can be used to retrieve a record value by column name. It is only possible to do so if the header record was initialised in the
            CSV data source. If not, <see cref="P:Kent.Boogaart.KBCsv.DataRecord.HeaderRecord"/> will be <see langword="null"/> and this indexer will throw an exception if used.
            </remarks>
        </member>
        <member name="T:Kent.Boogaart.KBCsv.HeaderRecord">
            <summary>
            Represents a header record from a CSV source.
            </summary>
            <remarks>
            An instance of this class represents the header record in a CSV data source. Such a record defines only the column names for the CSV data.
            </remarks>
        </member>
        <member name="F:Kent.Boogaart.KBCsv.HeaderRecord._columnToIndexMap">
            <summary>
            Maps column names to indexes.
            </summary>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.HeaderRecord.FromParser(Kent.Boogaart.KBCsv.CsvParser)">
            <summary>
            Creates and returns an instance of <c>HeaderRecord</c> by parsing via the provided CSV parser.
            </summary>
            <param name="parser">
            The CSV parser to use.
            </param>
            <returns>
            The CSV header record, or <see langword="null"/> if no record was found in the parser provided.
            </returns>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.HeaderRecord.#ctor">
            <summary>
            Constructs an empty instance of <c>HeaderRecord</c>.
            </summary>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.HeaderRecord.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructs an instance of <c>HeaderRecord</c> with the columns specified.
            </summary>
            <param name="columns">
            The columns in the CSV header.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.HeaderRecord.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Constructs an instance of <c>HeaderRecord</c> with the columns specified, optionally making the values in the header record read-only.
            </summary>
            <param name="columns">
            The columns in the CSV header.
            </param>
            <param name="readOnly">
            If <see langword="true"/>, the values in this header record are read-only.
            </param>
        </member>
        <member name="M:Kent.Boogaart.KBCsv.HeaderRecord.IndexOf(System.String)">
            <summary>
            Gets the index of the column with the specified name.
            </summary>
            <param name="column">
            The name of the column.
            </param>
            <returns>
            The index of the column, or <c>-1</c> if the column does not exist in this header record.
            </returns>
        </member>
        <member name="P:Kent.Boogaart.KBCsv.HeaderRecord.Item(System.String)">
            <summary>
            Gets the index of the specified column in this header record.
            </summary>
            <remarks>
            This indexer can be used to determine the corresponding index of a named column in this header record. If the specified column is not found
            in this header record, an exception is thrown.
            </remarks>
        </member>
    </members>
</doc>
