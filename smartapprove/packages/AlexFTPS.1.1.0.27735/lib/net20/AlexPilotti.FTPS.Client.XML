<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AlexPilotti.FTPS.Client</name>
    </assembly>
    <members>
        <member name="T:AlexPilotti.FTPS.Common.FTPStream">
            <summary>
            Incapsulates a Stream used during FTP get and put commands.
            </summary>
        </member>
        <member name="T:AlexPilotti.FTPS.Common.FTPException">
            <summary>
            Base FTP exception class.
            </summary>
        </member>
        <member name="T:AlexPilotti.FTPS.Common.FTPOperationCancelledException">
            <summary>
            Exception indicating that a command or set of commands have been cancelled by the caller, via a callback method or event.
            </summary>
        </member>
        <member name="T:AlexPilotti.FTPS.Common.FTPCommandException">
            <summary>
            FTP exception generated by a command with a return code >= 400, as stated in RFC 959.
            </summary>
        </member>
        <member name="T:AlexPilotti.FTPS.Common.FTPSslException">
            <summary>
            FTP exception related to the SSL/TLS support
            </summary>
        </member>
        <member name="T:AlexPilotti.FTPS.Common.DirectoryListParser">
            <summary>
            Based on Adarsh's code: http://blogs.msdn.com/adarshk/archive/2004/09/15/230177.aspx
            </summary>
        </member>
        <member name="T:AlexPilotti.FTPS.Common.SslInfo">
            <summary>
            Encapsulates the SSL/TLS algorithms connection information.
            </summary>
        </member>
        <member name="T:AlexPilotti.FTPS.Client.ESSLSupportMode">
            <summary>
            The SSL/TLS support requested or required for a connection.
            </summary>
        </member>
        <member name="F:AlexPilotti.FTPS.Client.ESSLSupportMode.ClearText">
            <summary>
            No SSL/TLS support. Used for standard FTP connections.
            </summary>
        </member>
        <member name="F:AlexPilotti.FTPS.Client.ESSLSupportMode.CredentialsRequested">
            <summary>
            Requests a SSL/TLS connection during authentication. 
            Authentication is performed using <see cref="F:AlexPilotti.FTPS.Client.ESSLSupportMode.ClearText"/> if SSL/TLS is not supported by the server.
            Reverts to <see cref="F:AlexPilotti.FTPS.Client.ESSLSupportMode.ClearText"/> after authetication if the CCC command is supported by the server.
            </summary>
        </member>
        <member name="F:AlexPilotti.FTPS.Client.ESSLSupportMode.CredentialsRequired">
            <summary>
            Requires a SSL/TLS connection during authentication. 
            Reverts to <see cref="F:AlexPilotti.FTPS.Client.ESSLSupportMode.ClearText"/> after authetication if the CCC command is supported by the server.
            </summary>
        </member>
        <member name="F:AlexPilotti.FTPS.Client.ESSLSupportMode.ControlChannelRequested">
            <summary>
            Requests a SSL/TLS connection on the control channel. 
            </summary>
            <remarks>
            Acts like <see cref="F:AlexPilotti.FTPS.Client.ESSLSupportMode.CredentialsRequested"/> but does not revert to <see cref="F:AlexPilotti.FTPS.Client.ESSLSupportMode.ClearText"/> after authentication.
            </remarks>
        </member>
        <member name="F:AlexPilotti.FTPS.Client.ESSLSupportMode.ControlChannelRequired">
            <summary>
            Requires a SSL/TLS connection on the control channel. 
            </summary>
            <remarks>
            Acts like <see cref="F:AlexPilotti.FTPS.Client.ESSLSupportMode.CredentialsRequired"/> but does not revert to <see cref="F:AlexPilotti.FTPS.Client.ESSLSupportMode.ClearText"/> after authentication.
            </remarks>
        </member>
        <member name="F:AlexPilotti.FTPS.Client.ESSLSupportMode.DataChannelRequested">
            <summary>
            Requests a SSL/TLS connection on the data channel, implies <see cref="F:AlexPilotti.FTPS.Client.ESSLSupportMode.CredentialsRequested"/>.
            Data transfers are not encrypted is not supported by the server.
            </summary>
        </member>
        <member name="F:AlexPilotti.FTPS.Client.ESSLSupportMode.DataChannelRequired">
            <summary>
            Requires a SSL/TLS connection on the data channel, implies <see cref="F:AlexPilotti.FTPS.Client.ESSLSupportMode.CredentialsRequired"/>.
            </summary>
        </member>
        <member name="F:AlexPilotti.FTPS.Client.ESSLSupportMode.ControlAndDataChannelsRequested">
            <summary>
            Requests a SSL/TLS connection on both control and data channels, implies <see cref="F:AlexPilotti.FTPS.Client.ESSLSupportMode.ControlChannelRequested"/> and <see cref="F:AlexPilotti.FTPS.Client.ESSLSupportMode.DataChannelRequested"/>.
            Control channel commands and data transfers are not encrypted is not supported by the server.
            </summary>
        </member>
        <member name="F:AlexPilotti.FTPS.Client.ESSLSupportMode.ControlAndDataChannelsRequired">
            <summary>
            Requires a SSL/TLS connection on both control and data channels, implies <see cref="F:AlexPilotti.FTPS.Client.ESSLSupportMode.ControlChannelRequired"/> and <see cref="F:AlexPilotti.FTPS.Client.ESSLSupportMode.DataChannelRequired"/>.
            </summary>
        </member>
        <member name="F:AlexPilotti.FTPS.Client.ESSLSupportMode.All">
            <summary>
            An alias for <see cref="F:AlexPilotti.FTPS.Client.ESSLSupportMode.ControlAndDataChannelsRequired"/>
            </summary>
        </member>
        <member name="F:AlexPilotti.FTPS.Client.ESSLSupportMode.Implicit">
            <summary>
            Implicit SSL/TLS, not supported by RFC 4217. Both control channel and data channel are always encrypted.
            </summary>
        </member>
        <member name="T:AlexPilotti.FTPS.Client.ETransferActions">
            <summary>
            Possible actions occurring during a file transfer.
            </summary>
        </member>
        <member name="T:AlexPilotti.FTPS.Client.EPatternStyle">
            <summary>
            File pattern style used in <see cref="M:AlexPilotti.FTPS.Client.FTPSClient.GetFiles(System.String,System.String,System.String,AlexPilotti.FTPS.Client.EPatternStyle,System.Boolean,AlexPilotti.FTPS.Client.FileTransferCallback)"/> and  <see cref="M:AlexPilotti.FTPS.Client.FTPSClient.PutFiles(System.String,System.String,System.String,AlexPilotti.FTPS.Client.EPatternStyle,System.Boolean,AlexPilotti.FTPS.Client.FileTransferCallback)"/>.
            </summary>
        </member>
        <member name="F:AlexPilotti.FTPS.Client.EPatternStyle.Verbatim">
            <summary>
            Interpret as is.
            </summary>
        </member>
        <member name="F:AlexPilotti.FTPS.Client.EPatternStyle.Wildcard">
            <summary>
            Interpret as wildcard, where <c>*</c> means 0 or more chars having any value and <c>?</c> means one char having any value. 
            </summary>
        </member>
        <member name="F:AlexPilotti.FTPS.Client.EPatternStyle.Regex">
            <summary>
            Interpret as a regular expression.
            </summary>
        </member>
        <member name="T:AlexPilotti.FTPS.Client.EDataConnectionMode">
            <summary>
            Trasfer mode used in connections
            </summary>
        </member>
        <member name="T:AlexPilotti.FTPS.Client.FileTransferCallback">
            <summary>
            Callback used during file transfers to notify the caller about any command progress. 
            </summary>
            <param name="sender"></param>
            <param name="action"></param>
            <param name="localObjectName"></param>
            <param name="remoteObjectName"></param>
            <param name="fileTransmittedBytes"></param>
            <param name="fileTransferSize"><c>null</c> if not available (e.g. the server does not support the SIZE command).</param>
            <param name="cancel"></param>
        </member>
        <member name="T:AlexPilotti.FTPS.Client.FTPSClient">
            <summary>
            Class used to connect to an FTP/FTPS server. 
            The main goal of this class is to provide a complete and easy to use FTP client connection, implementing SSL/TLS extension 
            and providing tested compatibility to the main FTP server products. 
            
            Implemented RFCs: 959, 2228, 2389, 2428, 2640, 3659, 4217. 
            
            Not all commands described in the above RFCs are implemented at the current stage.
            </summary>
            <remarks>
            Requirements: MS Framework 2.0 and above or Mono 2.0 and above.
            </remarks>
        </member>
        <member name="F:AlexPilotti.FTPS.Client.FTPSClient.useCtrlEndPointAddressForData">
            <summary>
            <c>true</c> to ignore the address returned by PASV
            </summary>
        </member>
        <member name="F:AlexPilotti.FTPS.Client.FTPSClient.sslMinKeyExchangeAlgStrength">
            <summary>
            0 means no check
            </summary>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.Connect(System.String)">
            <summary>
            Anonymous authentication
            </summary>
            <param name="hostname"></param>
            <returns>The text of the \"welcome message\" sent by the server.</returns>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.Connect(System.String,AlexPilotti.FTPS.Client.ESSLSupportMode)">
            <summary>
            Anonymous authentication
            </summary>
            <param name="hostname"></param>
            <returns>The text of the \"welcome message\" sent by the server.</returns>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.Connect(System.String,System.Int32,System.Net.NetworkCredential,AlexPilotti.FTPS.Client.ESSLSupportMode,System.Net.Security.RemoteCertificateValidationCallback,System.Security.Cryptography.X509Certificates.X509Certificate,System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Connects to a FTP server using the provided parameters. 
            The default representation tipe is set to Binary.
            The text encoding is set to UTF8, if supported by the server via the FEAT command.
            </summary>
            <param name="hostname"></param>
            <param name="port"></param>
            <param name="credential"></param>
            <param name="sslSupportMode"></param>
            <param name="userValidateServerCertificate"></param>
            <param name="x509ClientCert"></param>
            <param name="sslMinKeyExchangeAlgStrength"></param>
            <param name="sslMinCipherAlgStrength"></param>
            <param name="sslMinHashAlgStrength"></param>
            <param name="timeout">Connection timeout in ms. <c>null</c> can be specifiad to keep the default value of 120s.</param>
            <returns>The text of the \"welcome message\" sent by the server.</returns>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.Connect(System.String,System.Int32,System.Net.NetworkCredential,AlexPilotti.FTPS.Client.ESSLSupportMode,System.Net.Security.RemoteCertificateValidationCallback,System.Security.Cryptography.X509Certificates.X509Certificate,System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Connects to a FTP server using the provided parameters. 
            The default representation tipe is set to Binary.
            The text encoding is set to UTF8, if supported by the server via the FEAT command.
            </summary>
            <param name="hostname"></param>
            <param name="port"></param>
            <param name="credential"></param>
            <param name="sslSupportMode"></param>
            <param name="userValidateServerCertificate"></param>
            <param name="x509ClientCert"></param>
            <param name="sslMinKeyExchangeAlgStrength"></param>
            <param name="sslMinCipherAlgStrength"></param>
            <param name="sslMinHashAlgStrength"></param>
            <param name="timeout">Connection timeout in ms. <c>null</c> can be specifiad to keep the default value of 120s.</param>
            <param name="useCtrlEndPointAddressForData"><c>true</c> to use the control channel remote address for data connections instead of the address returned by PASV</param>
            <returns>The text of the \"welcome message\" sent by the server.</returns>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.Connect(System.String,System.Int32,System.Net.NetworkCredential,AlexPilotti.FTPS.Client.ESSLSupportMode,System.Net.Security.RemoteCertificateValidationCallback,System.Security.Cryptography.X509Certificates.X509Certificate,System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32},System.Boolean,AlexPilotti.FTPS.Client.EDataConnectionMode)">
            <summary>
            Connects to a FTP server using the provided parameters. 
            The default representation tipe is set to Binary.
            The text encoding is set to UTF8, if supported by the server via the FEAT command.
            </summary>
            <param name="hostname"></param>
            <param name="port"></param>
            <param name="credential"></param>
            <param name="sslSupportMode"></param>
            <param name="userValidateServerCertificate"></param>
            <param name="x509ClientCert"></param>
            <param name="sslMinKeyExchangeAlgStrength"></param>
            <param name="sslMinCipherAlgStrength"></param>
            <param name="sslMinHashAlgStrength"></param>
            <param name="timeout">Connection timeout in ms. <c>null</c> can be specifiad to keep the default value of 120s.</param>
            <param name="useCtrlEndPointAddressForData"><c>true</c> to use the control channel remote address for data connections instead of the address returned by PASV</param>
            <param name="dataConnectionMode">Active or Passive data connection mode</param>
            <returns>The text of the \"welcome message\" sent by the server.</returns>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.SetTransferMode(AlexPilotti.FTPS.Common.ETransferMode)">
            <summary>
            Set the representation type according to the given parameter
            </summary>
            <param name="transferMode"></param>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.GetFeatures">
            <summary>
            Features returned from the FEAT command
            </summary>
            <returns>null if the FEAT command is not supported by the server</returns>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.GetFileTransferSize(System.String)">
            <summary>
            Remote transfer file size returned by the SIZE command.
            </summary>
            <param name="remoteFileName"></param>
            <returns>The file transmission size in bytes, based on the current transfer mode or <c>null</c> if the SIZE command is not supported.</returns>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.GetFile(System.String)">
            <summary>
            Retrieves the given file from the server. A <see cref="T:AlexPilotti.FTPS.Common.FTPStream"/> is returned, to be read until the end of file.
            See the <see cref="M:AlexPilotti.FTPS.Client.FTPSClient.GetFile(System.String,System.String)"/> overload to easily save the stream to a local file. 
            </summary>
            <param name="remoteFileName"></param>
            <returns></returns>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.GetFile(System.String,System.String)">
            <summary>
            GetFile overload to easily transfer a file from remote to local
            </summary>
            <param name="remoteFileName"></param>
            <param name="localFileName"></param>
            <returns>Transferred bytes count.</returns>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.GetFile(System.String,System.String,AlexPilotti.FTPS.Client.FileTransferCallback)">
            <summary>
            GetFile overload to easily transfer a file from remote to local
            </summary>
            <param name="remoteFileName"></param>
            <param name="localFileName"></param>
            <param name="transferCallback"></param>
            <returns>Transferred bytes count.</returns>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.GetFiles(System.String,System.String,System.String,AlexPilotti.FTPS.Client.EPatternStyle,System.Boolean,AlexPilotti.FTPS.Client.FileTransferCallback)">
            <summary>
            Transfers all files, matching the given pattern, from the given remote directory. Optionally recursive
            </summary>
            <param name="remoteDirectoryName">Absolute or relative remote path, null indicates the current directory</param>
            <param name="localDirectoryName">Absolute local path</param>
            <param name="filePattern">May be null to transfer all files</param>
            <param name="patternStyle"></param>
            <param name="recursive"></param>
            <param name="transferCallback"></param>
            <remarks>
            </remarks>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.GetFiles(System.String,System.String,AlexPilotti.FTPS.Client.EPatternStyle,System.Boolean)">
            <summary>
            Transfers all files, matching the given pattern, from the current remote directory. Optionally recursive
            </summary>
            <param name="localDirectoryName"></param>
            <param name="filePattern"></param>
            <param name="patternStyle"></param>
            <param name="recursive"></param>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.GetFiles(System.String,System.Boolean)">
            <summary>
            Transfers all files from the current remote directory. Optionally recursive
            </summary>
            <param name="localDirectoryName"></param>
            <param name="recursive"></param>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.GetFiles(System.String)">
            <summary>
            Transfers all files from the current remote directory without recursion
            </summary>
            <param name="localDirectoryName"></param>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.PutFile(System.String)">
            <summary>
            Stores a remote file, returning a <see cref="T:AlexPilotti.FTPS.Common.FTPStream"/> to be used for writing the file contents. Call <see cref="M:AlexPilotti.FTPS.Common.FTPStream.Close"/> on the stream once done.
            See the <see cref="M:AlexPilotti.FTPS.Client.FTPSClient.PutFile(System.String,System.String)"/> overload to easily transfer the contents of a local file. 
            </summary>
            <param name="remoteFileName"></param>
            <returns></returns>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.PutFile(System.String,System.String)">
            <summary>
            PutFile overload to easily transfer a file from local to remote
            </summary>
            <param name="localFileName"></param>
            <param name="remoteFileName"></param>
            <returns>Transferred bytes count.</returns>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.PutFile(System.String,System.String,AlexPilotti.FTPS.Client.FileTransferCallback)">
            <summary>
            PutFile overload to easily transfer a file from local to remote
            </summary>
            <param name="localFileName"></param>
            <param name="remoteFileName"></param>
            <param name="transferCallback"></param>
            <returns>Transferred bytes count.</returns>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.PutFiles(System.String,System.String,System.String,AlexPilotti.FTPS.Client.EPatternStyle,System.Boolean,AlexPilotti.FTPS.Client.FileTransferCallback)">
            <summary>
            
            </summary>
            <param name="localDirectoryName"></param>
            <param name="remoteDirectoryName"></param>
            <param name="filePattern"></param>
            <param name="patternStyle"></param>
            <param name="recursive"></param>
            <param name="transferCallback"></param>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.PutFiles(System.String,System.String,AlexPilotti.FTPS.Client.EPatternStyle,System.Boolean)">
            <summary>
            Transfers all files, matching the given pattern, to the current remote directory. Optionally recursive
            </summary>
            <param name="localDirectoryName"></param>
            <param name="filePattern"></param>
            <param name="patternStyle"></param>
            <param name="recursive"></param>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.PutFiles(System.String,System.Boolean)">
            <summary>
            Transfers all files to the current remote directory. Optionally recursive
            </summary>
            <param name="localDirectoryName"></param>
            <param name="recursive"></param>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.PutFiles(System.String)">
            <summary>
            Transfers all files to the current remote directory without recursion
            </summary>
            <param name="localDirectoryName"></param>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.AppendFile(System.String,System.String)">
            <summary>
            AppendFile overload to easily transfer a file from local to remote
            </summary>
            <param name="localFileName"></param>
            <param name="remoteFileName"></param>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.AppendFile(System.String,System.String,AlexPilotti.FTPS.Client.FileTransferCallback)">
            <summary>
            AppendFile overload to easily transfer a file from local to remote
            </summary>
            <param name="localFileName"></param>
            <param name="remoteFileName"></param>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.PutUniqueFile(System.String,System.String@)">
            <summary>
            PutUniqueFile overload to easily transfer a file from local to remote
            </summary>
            <param name="localFileName"></param>
            <param name="remoteFileName"></param>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.PutUniqueFile(System.String,System.String@,AlexPilotti.FTPS.Client.FileTransferCallback)">
            <summary>
            PutUniqueFile overload to easily transfer a file from local to remote.
            </summary>
            <param name="localFileName"></param>
            <param name="remoteFileName"></param>
            <param name="transferCallback"></param>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.DeleteFile(System.String)">
            <summary>
            Deletes the given remote file.
            </summary>
            <param name="remoteDirName"></param>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.RenameFile(System.String,System.String)">
            <summary>
            Renames the given remote file.
            </summary>
            <param name="remoteDirName"></param>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.MakeDir(System.String)">
            <summary>
            Creates the given remote directory.
            </summary>
            <param name="remoteDirName"></param>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.RemoveDir(System.String)">
            <summary>
            Removes the given remote directory.
            </summary>
            <param name="remoteDirName"></param>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.ChangeToUpperDir">
            <summary>
            Changes the remote directory to the parent directory.
            </summary>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.GetShortDirectoryList(System.String)">
            <summary>
            Returns an array of file names and directories contained in the given directory. 
            Please use <see cref="M:AlexPilotti.FTPS.Client.FTPSClient.GetShortDirectoryList(System.String)"/> or <see cref="M:AlexPilotti.FTPS.Client.FTPSClient.GetDirectoryListUnparsed(System.String)"/> for more detailed directory information.
            </summary>
            <param name="remoteDirName"></param>
            <returns></returns>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.GetDirectoryList(System.String)">
            <summary>
            Returns a list of the contents form the given directory. A parsing is performed on the data returned fronm the LIST command.
            </summary>
            <param name="remoteDirName"></param>
            <returns></returns>
            <remarks>
            Please use <see cref="M:AlexPilotti.FTPS.Client.FTPSClient.GetShortDirectoryList(System.String)"/> or <see cref="M:AlexPilotti.FTPS.Client.FTPSClient.GetDirectoryListUnparsed(System.String)"/> in case of parsing errors, 
            as the contents returned from FTP servers may differ from the common DOS and UNIX formats adopted here.
            </remarks>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.GetDirectoryListUnparsed(System.String)">
            <summary>
            returns the given directory list data as returned from the server, without parsing its contents.
            </summary>
            <param name="dirName"></param>
            <returns></returns>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.PushCurrentDirectory">
            <summary>
            Pushes the current remote directory on a stack, in order to easily restore it later calling <see cref="M:AlexPilotti.FTPS.Client.FTPSClient.PopCurrentDirectory"/>.
            </summary>
            <returns>The current remote directory.</returns>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.PopCurrentDirectory">
            <summary>
            Restores the current directory. For details please see <see cref="M:AlexPilotti.FTPS.Client.FTPSClient.PushCurrentDirectory"/>.   
            Throws an exception if the stack is empty.
            </summary>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.SetCurrentDirectory(System.String)">
            <summary>
            Changes the remote current directory.
            </summary>
            <param name="remoteDirName"></param>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.GetSystem">
            <summary>
            Returns some remote system information, as returned from the SYST command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.GetFileModificationTime(System.String)">
            <summary>
            Returns the modification time of the given remote file or <c>null</c> if the MDTM feature is not supported by the server.
            </summary>
            <param name="remoteFileName"></param>
            <returns></returns>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.SetLanguage(System.String)">
            <summary>
            Set the language used by the server during the current connection. Please check the features returned by <see cref="!:GetFeatues"/> for a list of 
            available languages supported by the server.
            </summary>
            <param name="ietfLanguageTag">RFC 1766 language tag.</param>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.SetTextEncoding(AlexPilotti.FTPS.Common.ETextEncoding)">
            <summary>
            Set the given text encoding.
            </summary>
            <param name="textEncoding"></param>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.SendCustomCommand(System.String)">
            <summary>
            Sends the given FTP command text to the server.
            </summary>
            <param name="command"></param>
            <returns>Returns the parsed server reply.</returns>
            <remarks>In case of return codes >= 400 an exception is thrown.</remarks>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.Close">
            <summary>
            Closes the current connection, freeing resources. 
            </summary>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.SetSslInfo(System.Net.Security.SslStream)">
            <summary>
            Copies the protocol information form the given stream.
            </summary>
            <param name="sslStream"></param>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.CheckSymLinks(System.String,System.Collections.Generic.IList{AlexPilotti.FTPS.Common.DirectoryListItem})">
            <summary>
            Workaround needed because it is not possible to determine if a symlink is a directory or a file based on the UNIX style directory listing.
            </summary>
            <param name="remoteDirectoryName"></param>
            <param name="dirList"></param>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.EnsureDir(System.String,AlexPilotti.FTPS.Client.FileTransferCallback)">
            <summary>
            Check if the given directory exists and create it if it doesn't.
            </summary>
            <param name="remoteDirectoryName"></param>
            <param name="transferCallback"></param>        
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.CheckCommandInjection(System.String)">
            <summary>
            Basic injection check
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.CombineRemotePath(System.String,System.String)">
            <summary>
            Works like Path.Combine(...), but without replacing the "/" separator with Path.DirectorySeparatorChar
            </summary>
            <param name="path1"></param>
            <param name="path2"></param>
            <returns></returns>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.UserCmd(System.String)">
            <summary>
            
            </summary>
            <param name="userName"></param>
            <returns><c>true</c> if the PASS command is required, false <c>otherwise</c>.</returns>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.PassCmd(System.String)">
            <summary>
            
            </summary>
            <param name="password"></param>
            <returns>Returns the server \"welcome message\" in case of successful login.</returns>
        </member>
        <member name="M:AlexPilotti.FTPS.Client.FTPSClient.LangCmd(System.String)">
            <summary>
            
            </summary>
            <param name="ietfLanguageTag">RFC 1766 language tag</param>
        </member>
        <member name="P:AlexPilotti.FTPS.Client.FTPSClient.SslSupportRequestedMode">
            <summary>
            The requested SSL/TLS support level.
            </summary>
        </member>
        <member name="P:AlexPilotti.FTPS.Client.FTPSClient.SslSupportCurrentMode">
            <summary>
            The current SSL/TLS support level.
            </summary>
        </member>
        <member name="P:AlexPilotti.FTPS.Client.FTPSClient.TextEncoding">
            <summary>
            The current text encoding
            </summary>
        </member>
        <member name="P:AlexPilotti.FTPS.Client.FTPSClient.TransferMode">
            <summary>
            The current transfer mode
            </summary>
        </member>
        <member name="P:AlexPilotti.FTPS.Client.FTPSClient.WelcomeMessage">
            <summary>
            The welcome message returned by the server during connection.
            </summary>
        </member>
        <member name="P:AlexPilotti.FTPS.Client.FTPSClient.BannerMessage">
            <summary>
            The banner message returned by the server during connection.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:AlexPilotti.FTPS.Client.FTPSClient.RemoteCertificate" -->
        <member name="P:AlexPilotti.FTPS.Client.FTPSClient.SslInfo">
            <summary>
            The key exchange, hash and cipher algorithms used by the SSL/TLS connection or <c>null</c> if encryption is not used.
            </summary>
        </member>
        <member name="P:AlexPilotti.FTPS.Client.FTPSClient.LocalCertificate">
            <summary>
            The client X.509 certificate used by the current connection
            </summary>
            <value><c>null</c> if the connection is not using a client certificate</value>
        </member>
    </members>
</doc>
