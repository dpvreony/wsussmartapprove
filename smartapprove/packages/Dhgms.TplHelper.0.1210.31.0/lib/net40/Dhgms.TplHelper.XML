<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dhgms.TplHelper</name>
    </assembly>
    <members>
        <member name="T:Dhgms.TplHelper.Model.Provider.Job.MsSql`1">
            <summary>
            Handles job reporting to MS SQL
            </summary>
            <typeparam name="TJobResultClass">
            </typeparam>
        </member>
        <member name="T:Dhgms.TplHelper.Model.Provider.Job.Base`1">
            <summary>
            Base provider for Tasks
            Used for handling how IO's are handled
            Allows for the IO's to be changed without recoding the core program on a per-program basis
            </summary>
            <typeparam name="TJobResultClass">
            </typeparam>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.Base`1.OnJobFailure(System.Guid,System.String,System.Exception)">
            <summary>
            Handles sending of error information to different mediums
            </summary>
            <param name="jobGuid">
            Unique GUID used to identify job
            </param>
            <param name="jobName">
            Friendly name of job
            </param>
            <param name="e">
            Exception message
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.Base`1.OnJobStart(System.Guid)">
            <summary>
            Notify the provider of a job start
            </summary>
            <param name="jobGuid">
            Unique ID of the job
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.Base`1.OnJobSucess(System.Guid,System.String,`0)">
            <summary>
            The on job sucess.
            </summary>
            <param name="jobGuid">
            Unique GUID used to identify program
            </param>
            <param name="jobName">
            Friendly name of program
            </param>
            <param name="taskResult">
            Run results of task
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.Base`1.OnTaskFailure(System.Guid,System.Exception)">
            <summary>
            Handles the sending of a task failure notification, if required
            </summary>
            <param name="taskGuid">
            The GUID relating to the task
            </param>
            <param name="e">
            Exception message
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.Base`1.OnTaskStart(System.Guid)">
            <summary>
            Handles the sending of a task start notification, if required
            </summary>
            <param name="taskGuid">
            The GUID relating to the task
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.Base`1.OnTaskSucess(System.Guid)">
            <summary>
            Handles the sending of a task completion notification, if required
            </summary>
            <param name="taskGuid">
            The GUID relating to the task
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.MsSql`1.OnJobFailure(System.Guid,System.String,System.Exception)">
            <summary>
            Handles sending of error information to different mediums
            </summary>
            <param name="programGuid">
            Unique GUID used to identify program
            </param>
            <param name="programName">
            Friendly name of program
            </param>
            <param name="e">
            Exception message
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.MsSql`1.OnJobStart(System.Guid)">
            <summary>
            Notify the provider of a job start
            </summary>
            <param name="jobGuid">
            Unique ID of the job
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.MsSql`1.OnJobSucess(System.Guid,System.String,`0)">
            <summary>
            Handles sending out the result information
            </summary>
            <param name="jobGuid">
            Unique GUID used to identify program
            </param>
            <param name="jobName">
            Friendly name of program
            </param>
            <param name="taskResult">
            Run results of task
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.MsSql`1.OnTaskFailure(System.Guid,System.Exception)">
            <summary>
            Handles the sending of a task failure notification, if required
            </summary>
            <param name="taskGuid">
            The GUID relating to the task
            </param>
            <param name="e">
            Exception message
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.MsSql`1.OnTaskStart(System.Guid)">
            <summary>
            Handles the sending of a task start notification, if required
            </summary>
            <param name="taskGuid">
            The GUID relating to the task
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.MsSql`1.OnTaskSucess(System.Guid)">
            <summary>
            Handles the sending of a task completion notification, if required
            </summary>
            <param name="taskGuid">
            The GUID relating to the task
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.MsSql`1.OnInitialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            On Initlize event
            </summary>
            <param name="name">
            </param>
            <param name="config">
            </param>
        </member>
        <member name="T:Dhgms.TplHelper.Model.Exception.NoDataReaderException">
            <summary>
            We failed to get the resource stream. Used when loading a resource file.
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Exception.NoDataReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Exception.NoDataReaderException"/> class. 
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Exception.NoDataReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Exception.NoDataReaderException"/> class. 
            </summary>
            <param name="message">
            Exception Message
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Exception.NoDataReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Exception.NoDataReaderException"/> class. 
            </summary>
            <param name="message">
            Exception Message
            </param>
            <param name="innerException">
            Inner Exception
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Exception.NoDataReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Exception.NoDataReaderException"/> class. 
            </summary>
            <param name="info">
            Serialization Info
            </param>
            <param name="context">
            Context
            </param>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Task.Sql.StronglyTypedCollection`3">
            <summary>
            Task for pulling an SQL query into a stongly typed collection
            </summary>
            <typeparam name="TDatabaseHelperClass">
            The type for the database helper
            </typeparam>
            <typeparam name="TInformationClass">
            The type for the information class
            </typeparam>
            <typeparam name="TParameterClass">
            The type for the SQL Parameters
            </typeparam>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Task.Sql.Base`3">
            <summary>
            Base class for an SQL task
            </summary>
            <typeparam name="TTaskResultClass">
            The Task Result Class used to return information about the task run.
            </typeparam>
            <typeparam name="TDatabaseHelperClass">
            The DB Helper Class used for commands
            </typeparam>
            <typeparam name="TParameterClass">
            The .NET DB Parameter Type
            </typeparam>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Task.Base`1">
            <summary>
            Base class for a task
            </summary>
            <typeparam name="TTaskResultClass">
            The type of result being returned by the task
            </typeparam>
        </member>
        <member name="F:Dhgms.TplHelper.Controller.Task.Base`1.Name">
            <summary>
            Name of the current task
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Base`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Task.Base`1"/> class. 
            </summary>
            <param name="name">
            The task Name.
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Base`1.Execute(Quartz.IJobExecutionContext)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.ITrigger"/>
                        fires that is associated with the <see cref="T:Quartz.IJob"/>.
            </summary>
            <remarks>
            The implementation may wish to set a  result object on the 
                        JobExecutionContext before this method exits.  The result itself
                        is meaningless to Quartz, but may be informative to 
                        <see cref="T:Quartz.IJobListener"/>s or 
                        <see cref="T:Quartz.ITriggerListener"/>s that are watching the job's 
                        execution.
            </remarks>
            <param name="context">The execution context.</param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Base`1.OnProcess(`0)">
            <summary>
            The OnProcess event for doing the donkey work
            </summary>
            <param name="result">
            object that contains result information
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.Base`3.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Task.Sql.Base`3"/> class. 
            </summary>
            <param name="taskName">
            The name of the task
            </param>
            <param name="connectionString">
            Database Connection String
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.Base`3.GetParameters">
            <summary>
            Gets a list of parameters for the SQL command
            </summary>
            <returns>
            list of parameters for the SQL command
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.Base`3.GetSql">
            <summary>
            Gets the SQL to execute
            </summary>
            <returns>
            the SQL to execute
            </returns>
        </member>
        <member name="P:Dhgms.TplHelper.Controller.Task.Sql.Base`3.ConnectionString">
            <summary>
            Gets or sets the database connection string
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Controller.Task.Sql.Base`3.DbHelper">
            <summary>
            Gets the database Helper
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.StronglyTypedCollection`3.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Task.Sql.StronglyTypedCollection`3"/> class.
            </summary>
            <param name="taskName">
            The task name.
            </param>
            <param name="connectionString">
            The connection string.
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.StronglyTypedCollection`3.OnProcess(Dhgms.TplHelper.Model.Info.TaskResult.StronglyTypedCollection{`1})">
            <summary>
            The OnProcess event for doing the donkey work
            </summary>
            <param name="result">
            object that contains result information
            </param>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Task.Sql.IsTransferNeeded">
            <summary>
            Task for checking is a table has been updated since it was last transferred
            </summary>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Task.Sql.EmbeddedBoolean`2">
            <summary>
            Base class for an SQL task that processes a 32-bit integer from an embedded script
            </summary>
            <typeparam name="TDatabaseHelperClass">
            The type for the database helper
            </typeparam>
            <typeparam name="TParameterClass">
            The type for the SQL Parameters
            </typeparam>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Task.Sql.Embedded`3">
            <summary>
            Base class for an SQL task that uses an embedded resource
            </summary>
            <typeparam name="TTaskResultClass">
            The type of the task result class
            </typeparam>
            <typeparam name="TDatabaseHelperClass">
            The type of the database helper class
            </typeparam>
            <typeparam name="TParameterClass">
            The type of the SQL parameter class
            </typeparam>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.Embedded`3.#ctor(System.String,System.String,System.Reflection.Assembly,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Task.Sql.Embedded`3"/> class. 
            </summary>
            <param name="taskName">
            Name of the task
            </param>
            <param name="connectionString">
            Database connection string
            </param>
            <param name="assembly">
            The assembly containing the resource
            </param>
            <param name="resourceNamespace">
            Namespace where the resource file resides. Usually the application name
            </param>
            <param name="resourceFileName">
            The filename of the embedded resource
            </param>
            <param name="assumeSqlSafe">
            Whether to skip the SQL injection safety check.  Use only if you know the code you are passing in is safe and contains a quoted string that is preventing it passing the saftey check
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.Embedded`3.GetSql">
            <summary>
            Gets the SQL to execute
            </summary>
            <returns>
            the SQL to execute
            </returns>
        </member>
        <member name="P:Dhgms.TplHelper.Controller.Task.Sql.Embedded`3.Assembly">
            <summary>
            Gets or sets the assembly containing the resource
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Controller.Task.Sql.Embedded`3.AssumeSqlSafe">
            <summary>
            Gets or sets a value indicating whether to assume the SQL is safe and don't do the SQL injection safety check
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Controller.Task.Sql.Embedded`3.ResourceFileName">
            <summary>
            Gets or sets the filename of the embedded resource
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Controller.Task.Sql.Embedded`3.ResourceNamespace">
            <summary>
            Gets or sets the namespace where the resource file resides. Usually the application name
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.EmbeddedBoolean`2.#ctor(System.String,System.String,System.Reflection.Assembly,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Task.Sql.EmbeddedBoolean`2"/> class. 
            </summary>
            <param name="taskName">
            Name of the task
            </param>
            <param name="connectionString">
            Database connection string
            </param>
            <param name="assembly">
            The assembly containing the resource
            </param>
            <param name="resourceNamespace">
            Namespace where the resource file resides. Usually the application name
            </param>
            <param name="resourceFileName">
            The filename of the embedded resource
            </param>
            <param name="assumeSqlSafe">
            Whether to skip the SQL injection safety check.  Use only if you know the code you are passing in is safe and contains a quoted string that is preventing it passing the saftey check
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.EmbeddedBoolean`2.OnProcess(Dhgms.TplHelper.Model.Info.TaskResult.SingleResultBoolean)">
            <summary>
            The OnProcess event for doing the donkey work
            </summary>
            <param name="result">
            The result.
            </param>
        </member>
        <member name="F:Dhgms.TplHelper.Controller.Task.Sql.IsTransferNeeded.tableName">
            <summary>
            Name of the table to check
            </summary>
        </member>
        <member name="F:Dhgms.TplHelper.Controller.Task.Sql.IsTransferNeeded.sinceDate">
            <summary>
            The date which will indicate we need to do a transfer
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.IsTransferNeeded.#ctor(System.String,System.String,System.DateTime,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Task.Sql.IsTransferNeeded"/> class. 
            </summary>
            <param name="connectionString">
            Database connection string
            </param>
            <param name="tableName">
            Name of the table to check
            </param>
            <param name="sinceDate">
            Date the table was last transferred
            </param>
            <param name="assumeSqlSafe">
            Whether to skip the SQL injection safety check.  Use only if you know the code you are passing in is safe and contains a quoted string that is preventing it passing the saftey check
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.IsTransferNeeded.GetParameters">
            <summary>
            Gets a list of parameters for the SQL command
            </summary>
            <returns>
            list of parameters for the SQL command
            </returns>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Task.Sql.EmbeddedSingleRecord`3">
            <summary>
            Task for pulling an Embedded SQL query into a stongly typed collection
            </summary>
            <typeparam name="TDatabaseHelperClass">
            The type for the database helper
            </typeparam>
            <typeparam name="TInformationClass">
            The type for the information class
            </typeparam>
            <typeparam name="TParameterClass">
            The type for the SQL Parameters
            </typeparam>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.EmbeddedSingleRecord`3.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Task.Sql.EmbeddedSingleRecord`3"/> class. 
            </summary>
            <param name="taskName">
            Name of the task
            </param>
            <param name="connectionString">
            Database connection string
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.EmbeddedSingleRecord`3.OnProcess(Dhgms.TplHelper.Model.Info.TaskResult.SingleStronglyTyped{`1})">
            <summary>
            The OnProcess event for doing the donkey work
            </summary>
            <param name="result">
            object that contains result information
            </param>
        </member>
        <member name="T:Dhgms.TplHelper.Model.Info.TaskResult.SingleStronglyTyped`1">
            <summary>
            Represents a task that returns a strongly typed record
            </summary>
            <typeparam name="TInformationClass">
            The information class for the strongly typed record
            </typeparam>
        </member>
        <member name="T:Dhgms.TplHelper.Model.Info.TaskResult.Base">
            <summary>
            Represents the base task result
            </summary>
        </member>
        <member name="F:Dhgms.TplHelper.Model.Info.TaskResult.Base.name">
            <summary>
            Name of the task
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.Base.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Info.TaskResult.Base"/> class.
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.Base.#ctor(Dhgms.TplHelper.Model.Info.TaskResult.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Info.TaskResult.Base"/> class.
            </summary>
            <param name="other">
            Object to copy
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.Base.#ctor(System.String,System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Info.TaskResult.Base"/> class.
            </summary>
            <param name="name">Name of the task</param>
            <param name="started">Timestamp of when the task started</param>
            <param name="finished">Timestamp of when the task finished</param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.Base.OnDisposing">
            <summary>
            The on disposing event
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.Base.CompareTo(Dhgms.TplHelper.Model.Info.TaskResult.Base)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="other">
            The instance to compare to
            </param>
            <returns>
            0 if equal, otherwise non zero
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.Base.Equals(Dhgms.TplHelper.Model.Info.TaskResult.Base)">
            <summary>
            Checks if the current instance matches another of the same type
            </summary>
            <param name="other">object to compare</param>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.Base.GetHashCode">
            <summary>
            Gets the hash code for the object
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.Base.GetStronglyTypedObjectFromDataReaderRow(System.Data.Common.DbDataReader)">
            <summary>
            Get Strongly Typed Object from a data reader
            </summary>
            <param name="dataReader">
            The data Reader.
            </param>
            <returns>
            strongly typed object.
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.Base.DoTableValidation">
            <summary>
            Checks a table to ensure it meets the required schema
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.Base.ToStringArray">
            <summary>
            Gets a collection of string data for use for something like a CSV file
            </summary>
            <returns>a collection of strings representing the data record</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.Base.DoXmlElement(System.Xml.XmlWriter,System.String)">
            <summary>
            Adds an XML Element to an XML Writer
            </summary>
            <param name="writer">
            The XML writer to add the element to.
            </param>
            <param name="parentElementName">
            The name for the parenet element being produced.
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.Base.GetDataColumns">
            <summary>
            Gets a collection of data columns representing the type
            </summary>
            <returns>a collection of strings representing the data record</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.Base.GetDifferences(Dhgms.TplHelper.Model.Info.TaskResult.Base)">
            <summary>
            Checks this instance against another to see where there are differences
            </summary>
            <param name="other">other instance to compare</param>
            <returns>summary of where there are differences</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.Base.DoEntityFrameworkModel(System.Data.Entity.DbModelBuilder,System.String)">
            <summary>
            Maps the information class to the entity framework model
            </summary>
            <param name="modelBuilder">
            model builder object
            </param>
            <param name="tableName">
            The table Name in the database
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.Base.GetOdataVocabularies">
            <summary>
            Gets the CDSL that defines the OData Vocabularies for this class
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Info.TaskResult.Base.Name">
            <summary>
            Gets or sets Name of the task
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Info.TaskResult.Base.Started">
            <summary>
            Gets or sets Timestamp of when the task started
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Info.TaskResult.Base.Finished">
            <summary>
            Gets or sets Timestamp of when the task finished
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Info.TaskResult.Base.HeaderRecord">
            <summary>
            Gets a header record for use for something like a CSV file
            </summary>
            <returns>a collection of strings representing the header record</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleStronglyTyped`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Info.TaskResult.StronglyTypedCollection`1"/> class. 
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleStronglyTyped`1.#ctor(System.String,System.DateTime,System.DateTime,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Info.TaskResult.SingleStronglyTyped`1"/> class. 
            Constructor
            </summary>
            <param name="name">
            Name of the task
            </param>
            <param name="started">
            Timestamp of when the task started
            </param>
            <param name="finished">
            Timestamp of when the task finished
            </param>
            <param name="result">
            The result for the task
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleStronglyTyped`1.CompareTo(`0)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="other">
            The other.
            </param>
            <return>
            0 if equal, otherwise non zero
            </return>
            <returns>
            The compare to.
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleStronglyTyped`1.DoTableValidation">
            <summary>
            Checks a table to ensure it meets the required schema
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleStronglyTyped`1.Equals(Dhgms.TplHelper.Model.Info.TaskResult.StronglyTypedCollection{`0})">
            <summary>
            Checks if the current instance matches another of the same type
            </summary>
            <param name="other">
            object to compare
            </param>
            <returns>
            true if equal, otherwise false
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleStronglyTyped`1.GetDataColumns">
            <summary>
            Gets a collection of data columns representing the type
            </summary>
            <returns>
            a collection of strings representing the data record
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleStronglyTyped`1.GetDifferences(Dhgms.TplHelper.Model.Info.TaskResult.StronglyTypedCollection{`0})">
            <summary>
            Checks this instance against another to see where there are differences
            </summary>
            <param name="other">
            other instance to compare
            </param>
            <returns>
            summary of where there are differences
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleStronglyTyped`1.GetHashCode">
            <summary>
            Gets the hash code for the object
            </summary>
            <returns>
            hash code
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleStronglyTyped`1.GetStronglyTypedObjectFromDataReaderRow(System.Data.Common.DbDataReader)">
            <summary>
            Get Strongly Typed Object from a data reader
            </summary>
            <param name="dataReader">
            The data Reader.
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleStronglyTyped`1.ToStringArray">
            <summary>
            Gets a collection of string data for use for something like a CSV file
            </summary>
            <returns>
            a collection of strings representing the data record
            </returns>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Info.TaskResult.SingleStronglyTyped`1.HeaderRecord">
            <summary>
            Gets a header record for use for something like a CSV file
            </summary>
            <returns>a collection of strings representing the header record</returns>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Info.TaskResult.SingleStronglyTyped`1.Result">
            <summary>
            The result for the task
            </summary>
        </member>
        <member name="T:Dhgms.TplHelper.Model.Info.JobResult.Base">
            <summary>
            Base class for a job result
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.JobResult.Base.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Info.JobResult.Base"/> class. 
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.JobResult.Base.#ctor(System.Net.Mail.MailAddressCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Info.JobResult.Base"/> class. 
            </summary>
            <param name="emailRecipients">
            The email Recipients.
            </param>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Info.JobResult.Base.EmailRecipients">
            <summary>
            Collection of Email Recipients
            </summary>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Task.Sql.Integer32`2">
            <summary>
            Base class for an SQL task that processes a 32-bit integer
            </summary>
            <typeparam name="TDatabaseHelperClass">
            The DB Helper Class used for commands
            </typeparam>
            <typeparam name="TParameterClass">
            The .NET DB Parameter Type
            </typeparam>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.Integer32`2.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Task.Sql.Integer32`2"/> class. 
            </summary>
            <param name="taskName">
            The name of the task
            </param>
            <param name="connectionString">
            Database Connection String
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.Integer32`2.OnProcess(Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32)">
            <summary>
            The OnProcess event for doing the donkey work
            </summary>
            <param name="result">
            The result.
            </param>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Task.SqlExport.PipeDelimited`1">
            <summary>
            Exports a data reader to a pipe delimited file
            </summary>
            <typeparam name="TInformationClass">
            The information class that represents the output record format
            </typeparam>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Task.SqlExport.Csv`1">
            <summary>
            Exports a data reader to a csv file
            </summary>
            <typeparam name="TInformationClass">
            The information class that represents the output record format
            </typeparam>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Task.SqlExport.Base">
            <summary>
            Base class for a data export
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlExport.Base.#ctor(System.String,System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Task.SqlExport.Base"/> class. 
            </summary>
            <param name="taskName">
            Name of the task
            </param>
            <param name="connectionString">
            Database connection string
            </param>
            <param name="sqlCommand">
            The SQL command to execute
            </param>
            <param name="parameters">
            Parameters for the SQL command
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlExport.Base.OnOutputResults(System.Data.Common.DbDataReader)">
            <summary>
            Event for outputing the results
            </summary>
            <param name="dataReader">
            The results to output
            </param>
            <returns>
            The on output results.
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlExport.Base.OnProcess(Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor)">
            <summary>
            The OnProcess event for doing the donkey work
            </summary>
            <param name="result">
            object that contains result information
            </param>
        </member>
        <member name="P:Dhgms.TplHelper.Controller.Task.SqlExport.Base.DbHelper">
            <summary>
            Gets the Database helper class
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Controller.Task.SqlExport.Base.ConnectionString">
            <summary>
            Gets or sets ConnectionString.
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Controller.Task.SqlExport.Base.Parameters">
            <summary>
            Gets or sets Parameters.
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Controller.Task.SqlExport.Base.SqlCommand">
            <summary>
            Gets or sets SqlCommand.
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlExport.Csv`1.#ctor(System.String,System.String,System.String,System.Data.SqlClient.SqlParameter[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Task.SqlExport.Csv`1"/> class. 
            </summary>
            <param name="taskName">
            Name of the task
            </param>
            <param name="connectionString">
            Database connection string
            </param>
            <param name="sqlCommand">
            The SQL command to execute
            </param>
            <param name="parameters">
            Parameters for the SQL command
            </param>
            <param name="outputFileName">
            The file we are saving to
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlExport.Csv`1.OnOutputResults(System.Data.Common.DbDataReader)">
            <summary>
            Event for outputing the results
            </summary>
            <param name="dataReader">
            The results to output
            </param>
            <returns>
            The on output results.
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlExport.Csv`1.OnOverrideOutputFormat(Kent.Boogaart.KBCsv.CsvWriter)">
            <summary>
            Used to change the output format, if needed
            </summary>
            <param name="output">
            output object
            </param>
        </member>
        <member name="P:Dhgms.TplHelper.Controller.Task.SqlExport.Csv`1.OutputFileName">
            <summary>
            Gets or sets the file we are saving to
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlExport.PipeDelimited`1.#ctor(System.String,System.String,System.String,System.Data.SqlClient.SqlParameter[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Task.SqlExport.PipeDelimited`1"/> class. 
            </summary>
            <param name="taskName">
            Name of the task
            </param>
            <param name="connectionString">
            Database connection string
            </param>
            <param name="sqlCommand">
            The SQL command to execute
            </param>
            <param name="parameters">
            Parameters for the SQL command
            </param>
            <param name="outputFileName">
            The file we are saving to
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlExport.PipeDelimited`1.OnOverrideOutputFormat(Kent.Boogaart.KBCsv.CsvWriter)">
            <summary>
            Used to change the output format, if needed
            </summary>
            <param name="output">
            output object
            </param>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.PipeDelimited`1">
            <summary>
            Bulk Inserts a pipe-delimited file into MS SQL Server
            </summary>
            <typeparam name="TInformationClass">
            Information Class that represents the file to be loaded
            </typeparam>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.Csv`1">
            <summary>
            Bulk Inserts a CSV file into MS SQL Server
            </summary>
            <typeparam name="TInformationClass">
            The information class that represents the file being imported
            </typeparam>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.File">
            <summary>
            Base class for an SQL Bulk Import Task that uses a Data Table as its source
            </summary>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.DataReader">
            <summary>
            Base class for an SQL Bulk Import Task that uses a Data Reader as its source
            </summary>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.Base">
            <summary>
            Base class for an SQL Bulk Copy Task
            </summary>
        </member>
        <member name="F:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.Base.DestinationConnectionString">
            <summary>
            Destination Database Connection String
            </summary>
        </member>
        <member name="F:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.Base.DestinationDatabase">
            <summary>
            the name of the destination database
            </summary>
        </member>
        <member name="F:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.Base.DestinationSchema">
            <summary>
            the schema the destination table sits in
            </summary>
        </member>
        <member name="F:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.Base.DestinationTable">
            <summary>
            the table the data is going to end up in
            </summary>
        </member>
        <member name="F:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.Base.TargetTableDeleteAction">
            <summary>
            the delete action to be taken on the target table
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.Base.#ctor(System.String,System.String,System.String,System.String,System.String,Dhgms.TplHelper.Model.Info.DestinationTableDeleteAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.Base"/> class. 
            </summary>
            <param name="taskName">
            Name of the data being bulk imported
            </param>
            <param name="destinationConnectionString">
            Connection String for the target database
            </param>
            <param name="destinationDatabase">
            Name of the database the table sits in
            </param>
            <param name="destinationSchema">
            the schema the destination table sits in
            </param>
            <param name="destinationTable">
            the table the data is going to end up in
            </param>
            <param name="targetTableDeleteAction">
            the delete action to be taken on the target table
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.Base.OnFetchAndProcessSourceData">
            <summary>
            Fetches the data and passes it on to be bulk inserted
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.Base.OnProcess(Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor)">
            <summary>
            The OnProcess event for doing the donkey work
            </summary>
            <param name="result">
            object that contains result information
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.DataReader.#ctor(System.String,System.String,System.String,System.String,System.String,Dhgms.TplHelper.Model.Info.DestinationTableDeleteAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.DataReader"/> class. 
            </summary>
            <param name="taskName">
            Name of the data being bulk imported
            </param>
            <param name="destinationConnectionString">
            Connection String for the target database
            </param>
            <param name="destinationDatabase">
            Name of the database the table sits in
            </param>
            <param name="destinationSchema">
            the schema the destination table sits in
            </param>
            <param name="destinationTable">
            the table the data is going to end up in
            </param>
            <param name="targetTableDeleteAction">
            the delete action to be taken on the target table
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.DataReader.ActOnData(System.Data.IDataReader)">
            <summary>
            Carries out the bulk copy from the data reader
            </summary>
            <param name="reader">
            Data Reader to copy data from
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.File.#ctor(System.String,System.String,System.String,System.String,System.String,Dhgms.TplHelper.Model.Info.DestinationTableDeleteAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.File"/> class. 
            </summary>
            <param name="taskName">
            Name of the data being bulk imported
            </param>
            <param name="destinationConnectionString">
            Connection String for the target database
            </param>
            <param name="destinationDatabase">
            Name of the database the table sits in
            </param>
            <param name="destinationSchema">
            the schema the destination table sits in
            </param>
            <param name="destinationTable">
            the table the data is going to end up in
            </param>
            <param name="targetTableDeleteAction">
            the delete action to be taken on the target table
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.File.OnFetchAndProcessSourceData">
            <summary>
            Fetches the data and passes it on to be bulk inserted
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.Csv`1.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,Dhgms.TplHelper.Model.Info.DestinationTableDeleteAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.Csv`1"/> class. 
            </summary>
            <param name="taskName">
            Name of the data being bulk imported
            </param>
            <param name="sourceFileName">
            Location of the CSV file to import
            </param>
            <param name="destinationConnectionString">
            Connection String for the target database
            </param>
            <param name="destinationDatabase">
            Name of the database the table sits in
            </param>
            <param name="destinationSchema">
            the schema the destination table sits in
            </param>
            <param name="destinationTable">
            the table the data is going to end up in
            </param>
            <param name="targetTableDeleteAction">
            the delete action to be taken on the target table
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.Csv`1.OnFetchAndProcessSourceData">
            <summary>
            Fetches the data and passes it on to be bulk inserted
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.Csv`1.OnOverrideFileFormat(Kent.Boogaart.KBCsv.CsvReader)">
            <summary>
            Used to change the output format, if needed
            </summary>
            <param name="output">
            output object
            </param>
        </member>
        <member name="P:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.Csv`1.SourceFileName">
            <summary>
            Gets or sets the name of the file we pull the data from
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.PipeDelimited`1.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,Dhgms.TplHelper.Model.Info.DestinationTableDeleteAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.PipeDelimited`1"/> class. 
            </summary>
            <param name="taskName">
            Name of the data being bulk imported
            </param>
            <param name="sourceFileName">
            Location of the CSV file to import
            </param>
            <param name="destinationConnectionString">
            Connection String for the target database
            </param>
            <param name="destinationDatabase">
            Name of the database the table sits in
            </param>
            <param name="destinationSchema">
            the schema the destination table sits in
            </param>
            <param name="destinationTable">
            the table the data is going to end up in
            </param>
            <param name="targetTableDeleteAction">
            the delete action to be taken on the target table
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.PipeDelimited`1.OnOverrideFileFormat(Kent.Boogaart.KBCsv.CsvReader)">
            <summary>
            Used to change the output format, if needed
            </summary>
            <param name="output">
            output object
            </param>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Task.Sql.BuildMissingIndexes">
            <summary>
            Task for building indexes reported as missing by MS SQL Server
            </summary>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Task.Sql.EmbeddedInteger32`2">
            <summary>
            Base class for an SQL task that processes a 32-bit integer from an embedded script
            </summary>
            <typeparam name="TDatabaseHelperClass">
            The type for the database helper
            </typeparam>
            <typeparam name="TParameterClass">
            The type for the SQL Parameters
            </typeparam>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.EmbeddedInteger32`2.#ctor(System.String,System.String,System.Reflection.Assembly,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Task.Sql.EmbeddedInteger32`2"/> class. 
            </summary>
            <param name="taskName">
            </param>
            <param name="connectionString">
            </param>
            <param name="assembly">
            </param>
            <param name="resourceNamespace">
            </param>
            <param name="resourceFileName">
            </param>
            <param name="assumeSqlSafe">
            Whether to skip the SQL injection safety check.  Use only if you know the code you are passing in is safe and contains a quoted string that is preventing it passing the saftey check
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.EmbeddedInteger32`2.OnProcess(Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32)">
            <summary>
            The OnProcess event for doing the donkey work
            </summary>
            <param name="result">
            The result.
            </param>
        </member>
        <member name="F:Dhgms.TplHelper.Controller.Task.Sql.BuildMissingIndexes.useIncludedColumns">
            <summary>
            Flag to indiciate whether the index should use included columns
            </summary>
        </member>
        <member name="F:Dhgms.TplHelper.Controller.Task.Sql.BuildMissingIndexes.indexFileGroupName">
            <summary>
            The name of the index file group
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.BuildMissingIndexes.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Task.Sql.BuildMissingIndexes"/> class. 
            </summary>
            <param name="connectionString">
            Database connection string
            </param>
            <param name="indexFileGroupName">
            File Group the indexes are to be stored on
            </param>
            <param name="useIncludedColumns">
            Whether to build indexes with "included" columns
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.BuildMissingIndexes.GetParameters">
            <summary>
            Gets a list of parameters for the SQL command
            </summary>
            <returns>
            list of parameters for the SQL command
            </returns>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.JobHandler`3">
            <summary>
            Generic class for an programs run, takes out the workload from error handling and reporting
            </summary>
            <typeparam name="TJobResultClass">
            Result information relating to a job
            </typeparam>
            <typeparam name="TJobClass">
            The class containing the processing logic for a job
            </typeparam>
            <typeparam name="TApplicationSettings">
            Application settings relating to a job
            </typeparam>
        </member>
        <member name="F:Dhgms.TplHelper.Controller.JobHandler`3.programGuid">
            <summary>
            The program guid.
            </summary>
        </member>
        <member name="F:Dhgms.TplHelper.Controller.JobHandler`3.programName">
            <summary>
            The program name.
            </summary>
        </member>
        <member name="F:Dhgms.TplHelper.Controller.JobHandler`3.mutex">
            <summary>
            The _mutex.
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.JobHandler`3.#ctor(System.String,System.Guid,Dhgms.TplHelper.Model.Info.ApplicationInstanceMutexLock)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.JobHandler`3"/> class. 
            </summary>
            <param name="programName">
            The program Name.
            </param>
            <param name="programGuid">
            The program Guid.
            </param>
            <param name="applicationInstanceMutexLock">
            The type of mutex lock to apply to the program
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.JobHandler`3.Dispose">
            <summary>
            Entry point for disposing the object
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.JobHandler`3.Process">
            <summary>
            Entry point for doing the work
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.JobHandler`3.Dispose(System.Boolean)">
            <summary>
            does the donkey work for disposing the object
            </summary>
            <param name="disposing">
            whether we're being disposed
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.JobHandler`3.DoWatcher">
            <summary>
            Sets up the watcher for handling crash dumps
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.JobHandler`3.DoJob">
            <summary>
            Does the actual work for running the task and handling the result
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.JobHandler`3.GetMutexName">
            <summary>
            Gets the mutex name that should be used for the mutex lock
            </summary>
            <returns>
            the mutex name that should be used for the mutex lock
            </returns>
        </member>
        <member name="P:Dhgms.TplHelper.Controller.JobHandler`3.ApplicationInstanceMutexLock">
            <summary>
            Gets how to apply a mutex lock to this process
            </summary>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.JobHandler`3.JobListener">
            <summary>
            Basic job listener
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.JobHandler`3.JobListener.JobExecutionVetoed(Quartz.IJobExecutionContext)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.IJobDetail"/>
                        was about to be executed (an associated <see cref="T:Quartz.ITrigger"/>
                        has occurred), but a <see cref="T:Quartz.ITriggerListener"/> vetoed it's 
                        execution.
            </summary>
            <param name="context">
            The context.
            </param>
            <seealso cref="M:Quartz.IJobListener.JobToBeExecuted(Quartz.IJobExecutionContext)"/>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.JobHandler`3.JobListener.JobToBeExecuted(Quartz.IJobExecutionContext)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.IJobDetail"/>
                        is about to be executed (an associated <see cref="T:Quartz.ITrigger"/>
                        has occurred).
            <para>
            This method will not be invoked if the execution of the Job was vetoed
                        by a <see cref="T:Quartz.ITriggerListener"/>.
            </para>
            </summary>
            <param name="context">
            The context.
            </param>
            <seealso cref="M:Quartz.IJobListener.JobExecutionVetoed(Quartz.IJobExecutionContext)"/>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.JobHandler`3.JobListener.JobWasExecuted(Quartz.IJobExecutionContext,Quartz.JobExecutionException)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> after a <see cref="T:Quartz.IJobDetail"/>
                        has been executed, and be for the associated <see cref="T:Quartz.Spi.IOperableTrigger"/>'s
                        <see cref="M:Quartz.Spi.IOperableTrigger.Triggered(Quartz.ICalendar)"/> method has been called.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="jobException">
            The job Exception.
            </param>
        </member>
        <member name="P:Dhgms.TplHelper.Controller.JobHandler`3.JobListener.Name">
            <summary>
            Gets the name of the <see cref="T:Quartz.IJobListener"/>.
            </summary>
        </member>
        <member name="T:Dhgms.TplHelper.Model.Info.JobResult.TaskCollection">
            <summary>
            Job Result for a collection of tasks
            </summary>
        </member>
        <member name="F:Dhgms.TplHelper.Model.Info.JobResult.TaskCollection.Finished">
            <summary>
            Timestamp for when the job finished
            </summary>
        </member>
        <member name="F:Dhgms.TplHelper.Model.Info.JobResult.TaskCollection.Started">
            <summary>
            Timestamp for when the job started
            </summary>
        </member>
        <member name="F:Dhgms.TplHelper.Model.Info.JobResult.TaskCollection.TaskResults">
            <summary>
            List of task results for the job
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.JobResult.TaskCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Info.JobResult.TaskCollection"/> class. 
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.JobResult.TaskCollection.#ctor(System.Net.Mail.MailAddressCollection,System.DateTime,System.DateTime,System.Collections.Generic.List{Dhgms.TplHelper.Model.Info.TaskResult.Base})">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Info.JobResult.TaskCollection"/> class. 
            </summary>
            <param name="emailRecipients">
            Email Recipients for the report
            </param>
            <param name="started">
            When the job started
            </param>
            <param name="finished">
            When the job finished
            </param>
            <param name="taskResults">
            Results of Tasks
            </param>
        </member>
        <member name="T:Dhgms.TplHelper.Model.Info.DestinationTableDeleteAction">
            <summary>
            Defines the actions that can be taken on a destination table for a bulk copy
            </summary>
        </member>
        <member name="F:Dhgms.TplHelper.Model.Info.DestinationTableDeleteAction.None">
            <summary>
            No action of the table
            </summary>
        </member>
        <member name="F:Dhgms.TplHelper.Model.Info.DestinationTableDeleteAction.Truncate">
            <summary>
            Truncates the table
            </summary>
        </member>
        <member name="F:Dhgms.TplHelper.Model.Info.DestinationTableDeleteAction.WipeAndReseed">
            <summary>
            Deletes the contents of a table and uses the reseed index command
            Used when a target table has foreign keys
            </summary>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Task.Sql.EmbeddedNonQuery`2">
            <summary>
            Class for handling an SQL statement that has been embedded into the assembly
            </summary>
            <typeparam name="TDatabaseHelperClass">
            The type for the database helper
            </typeparam>
            <typeparam name="TParameterClass">
            The type for the SQL Parameters
            </typeparam>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.EmbeddedNonQuery`2.#ctor(System.String,System.String,System.Reflection.Assembly,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Task.Sql.EmbeddedNonQuery`2"/> class. 
            </summary>
            <param name="taskName">
            Name of the task
            </param>
            <param name="connectionString">
            Database connection string
            </param>
            <param name="assembly">
            The assembly containing the resource
            </param>
            <param name="resourceNamespace">
            Namespace where the resource file resides. Usually the application name
            </param>
            <param name="resourceFileName">
            The filename of the embedded resource
            </param>
            <param name="assumeSqlSafe">
            Whether to skip the SQL injection safety check.  Use only if you know the code you are passing in is safe and contains a quoted string that is preventing it passing the saftey check
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.EmbeddedNonQuery`2.OnProcess(Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32)">
            <summary>
            The OnProcess event for doing the donkey work
            </summary>
            <param name="result">
            The result.
            </param>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.Database">
            <summary>
            Base class for SQL Bulk Copy Tasks that use a database as the source
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.Database.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,Dhgms.TplHelper.Model.Info.DestinationTableDeleteAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.Database"/> class. 
            </summary>
            <param name="taskName">
            Name of the data being bulk imported
            </param>
            <param name="sourceConnectionString">
            Connection String for the source database
            </param>
            <param name="sourceSql">
            SQL to get the source data
            </param>
            <param name="destinationConnectionString">
            Connection String for the target database
            </param>
            <param name="destinationDatabase">
            Name of the database the table sits in
            </param>
            <param name="destinationSchema">
            the schema the destination table sits in
            </param>
            <param name="destinationTable">
            the table the data is going to end up in
            </param>
            <param name="targetTableDeleteAction">
            the delete action to be taken on the target table
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.Database.GetSourceDbCommand(System.Data.Common.DbConnection,System.String)">
            <summary>
            Gets the db command for the source database
            </summary>
            <param name="sourceConnection">
            The source Connection.
            </param>
            <param name="sourceSql">
            The source Sql.
            </param>
            <returns>
            db command for the source database
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.Database.GetSourceDbConnection(System.String)">
            <summary>
            gets the db connection for the source db
            </summary>
            <param name="sourceConnectionString">
            The source Connection String.
            </param>
            <returns>
            db connection for the source db
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.Database.OnFetchAndProcessSourceData">
            <summary>
            Fetches the data and passes it on to be bulk inserted
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.Database.SourceConnectionString">
            <summary>
            Connection String for the source database
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.Database.SourceSql">
            <summary>
            SQL to get the source data
            </summary>
        </member>
        <member name="T:Dhgms.TplHelper.Model.Provider.Job.EventLog`1">
            <summary>
            Handles job reporting to the Event Log
            </summary>
            <typeparam name="TJobResultClass">
            </typeparam>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.EventLog`1.OnJobFailure(System.Guid,System.String,System.Exception)">
            <summary>
            Handles sending of error information to different mediums
            </summary>
            <param name="programGuid">
            Unique GUID used to identify program
            </param>
            <param name="programName">
            Friendly name of program
            </param>
            <param name="e">
            Exception message
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.EventLog`1.OnJobStart(System.Guid)">
            <summary>
            Notify the provider of a job start
            </summary>
            <param name="jobGuid">
            Unique ID of the job
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.EventLog`1.OnJobSucess(System.Guid,System.String,`0)">
            <summary>
            Handles sending out the result information
            </summary>
            <param name="jobGuid">
            Unique GUID used to identify program
            </param>
            <param name="jobName">
            Friendly name of program
            </param>
            <param name="taskResult">
            Run results of task
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.EventLog`1.OnTaskFailure(System.Guid,System.Exception)">
            <summary>
            Handles the sending of a task failure notification, if required
            </summary>
            <param name="taskGuid">
            The GUID relating to the task
            </param>
            <param name="e">
            Exception message
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.EventLog`1.OnTaskStart(System.Guid)">
            <summary>
            Handles the sending of a task start notification, if required
            </summary>
            <param name="taskGuid">
            The GUID relating to the task
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.EventLog`1.OnTaskSucess(System.Guid)">
            <summary>
            Handles the sending of a task completion notification, if required
            </summary>
            <param name="taskGuid">
            The GUID relating to the task
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.EventLog`1.OnInitialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            On Initlize event
            </summary>
            <param name="name">
            </param>
            <param name="config">
            </param>
        </member>
        <member name="T:Dhgms.TplHelper.Model.ProviderProxy.Job`1">
            <summary>
            The job.
            </summary>
            <typeparam name="TJobResultClass">
            </typeparam>
        </member>
        <member name="M:Dhgms.TplHelper.Model.ProviderProxy.Job`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.ProviderProxy.Job`1"/> class. 
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.ProviderProxy.Job`1.OnJobFailure(System.Guid,System.String,System.Int32,System.Exception)">
            <summary>
            Output the failure information
            </summary>
            <param name="programGuid">
            The Program Unique ID
            </param>
            <param name="programName">
            The Program Friendly Name
            </param>
            <param name="runId">
            The Unique ID of the current run
            </param>
            <param name="e">
            The exception to report
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.ProviderProxy.Job`1.OnJobStart(System.Guid)">
            <summary>
            Notify the provider of a job start
            </summary>
            <param name="programGuid">
            The program Guid.
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.ProviderProxy.Job`1.OnJobSucess(System.Guid,System.String,`0)">
            <summary>
            Outputs job result information to all providers
            </summary>
            <param name="programGuid">
            The Program Unique ID
            </param>
            <param name="programName">
            The Program Friendly Name
            </param>
            <param name="taskResult">
            The Job Results
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.ProviderProxy.Job`1.Register(System.Guid,System.String)">
            <summary>
            Register the Job with the providers
            This is so some providers can act on the first run of a job
            </summary>
            <param name="programGuid">
            The program Guid.
            </param>
            <param name="programName">
            The program Name.
            </param>
        </member>
        <member name="T:Dhgms.TplHelper.Model.Helper.Task">
            <summary>
            Helper methods for tasks
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Helper.Task.Execute``2(``0)">
            <summary>
            Runs a task instantly
            </summary>
            <param name="task">
            The task to run.
            </param>
            <typeparam name="TTaskClass">
            The type of the task being run
            </typeparam>
            <typeparam name="TResultClass">
            The type of the result information being returned
            </typeparam>
            <returns>
            Job Result Information
            </returns>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Task.Sql.SingleRecord`3">
            <summary>
            Task for pulling an Embedded SQL query into a stongly typed collection
            </summary>
            <typeparam name="TDatabaseHelperClass">
            The type for the database helper
            </typeparam>
            <typeparam name="TInformationClass">
            The type for the information class
            </typeparam>
            <typeparam name="TParameterClass">
            The type for the SQL Parameters
            </typeparam>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.SingleRecord`3.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Task.Sql.SingleRecord`3"/> class. 
            </summary>
            <param name="taskName">
            Name of the task
            </param>
            <param name="connectionString">
            Database connection string
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.SingleRecord`3.OnProcess(Dhgms.TplHelper.Model.Info.TaskResult.SingleStronglyTyped{`1})">
            <summary>
            The OnProcess event for doing the donkey work
            </summary>
            <param name="result">
            object that contains result information
            </param>
        </member>
        <member name="T:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32">
            <summary>
            Represents a task that returns a single integer 32 result
            </summary>
        </member>
        <member name="F:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32.result">
            <summary>
            The result for the task
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32"/> class.
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32.#ctor(Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32"/> class.
            </summary>
            <param name="other">
            Object to copy
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32.#ctor(System.String,System.DateTime,System.DateTime,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32"/> class.
            </summary>
            <param name="name">Name of the task</param>
            <param name="started">Timestamp of when the task started</param>
            <param name="finished">Timestamp of when the task finished</param>
            <param name="result">The result for the task</param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32.OnDisposing">
            <summary>
            The on disposing event
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32.CompareTo(Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="other">
            The instance to compare to
            </param>
            <returns>
            0 if equal, otherwise non zero
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32.Equals(Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32)">
            <summary>
            Checks if the current instance matches another of the same type
            </summary>
            <param name="other">object to compare</param>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32.GetHashCode">
            <summary>
            Gets the hash code for the object
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32.GetStronglyTypedObjectFromDataReaderRow(System.Data.Common.DbDataReader)">
            <summary>
            Get Strongly Typed Object from a data reader
            </summary>
            <param name="dataReader">
            The data Reader.
            </param>
            <returns>
            strongly typed object.
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32.DoTableValidation">
            <summary>
            Checks a table to ensure it meets the required schema
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32.ToStringArray">
            <summary>
            Gets a collection of string data for use for something like a CSV file
            </summary>
            <returns>a collection of strings representing the data record</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32.DoXmlElement(System.Xml.XmlWriter,System.String)">
            <summary>
            Adds an XML Element to an XML Writer
            </summary>
            <param name="writer">
            The XML writer to add the element to.
            </param>
            <param name="parentElementName">
            The name for the parenet element being produced.
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32.GetDataColumns">
            <summary>
            Gets a collection of data columns representing the type
            </summary>
            <returns>a collection of strings representing the data record</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32.GetDifferences(Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32)">
            <summary>
            Checks this instance against another to see where there are differences
            </summary>
            <param name="other">other instance to compare</param>
            <returns>summary of where there are differences</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32.DoEntityFrameworkModel(System.Data.Entity.DbModelBuilder,System.String)">
            <summary>
            Maps the information class to the entity framework model
            </summary>
            <param name="modelBuilder">
            model builder object
            </param>
            <param name="tableName">
            The table Name in the database
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32.GetOdataVocabularies">
            <summary>
            Gets the CDSL that defines the OData Vocabularies for this class
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32.Result">
            <summary>
            Gets or sets The result for the task
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32.HeaderRecord">
            <summary>
            Gets a header record for use for something like a CSV file
            </summary>
            <returns>a collection of strings representing the header record</returns>
        </member>
        <member name="T:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultInteger32Difference">
            <summary>
            Represents a task that returns a single integer 32 result
            </summary>
        </member>
        <member name="T:Dhgms.TplHelper.Model.Difference.TaskResult.BaseDifference">
            <summary>
            Represents the base task result
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.BaseDifference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Difference.TaskResult.BaseDifference"/> class.
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.BaseDifference.#ctor(Dhgms.TplHelper.Model.Difference.TaskResult.BaseDifference)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Difference.TaskResult.BaseDifference"/> class.
            </summary>
            <param name="other">
            Object to copy
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.BaseDifference.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Difference.TaskResult.BaseDifference"/> class.
            </summary>
            <param name="name">Name of the task</param>
            <param name="started">Timestamp of when the task started</param>
            <param name="finished">Timestamp of when the task finished</param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.BaseDifference.OnDisposing">
            <summary>
            The on disposing event
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.BaseDifference.CompareTo(Dhgms.TplHelper.Model.Difference.TaskResult.BaseDifference)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="other">
            The instance to compare to
            </param>
            <returns>
            0 if equal, otherwise non zero
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.BaseDifference.Equals(Dhgms.TplHelper.Model.Difference.TaskResult.BaseDifference)">
            <summary>
            Checks if the current instance matches another of the same type
            </summary>
            <param name="other">object to compare</param>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.BaseDifference.GetHashCode">
            <summary>
            Gets the hash code for the object
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.BaseDifference.GetStronglyTypedObjectFromDataReaderRow(System.Data.Common.DbDataReader)">
            <summary>
            Get Strongly Typed Object from a data reader
            </summary>
            <param name="dataReader">
            The data Reader.
            </param>
            <returns>
            strongly typed object.
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.BaseDifference.DoTableValidation">
            <summary>
            Checks a table to ensure it meets the required schema
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.BaseDifference.ToStringArray">
            <summary>
            Gets a collection of string data for use for something like a CSV file
            </summary>
            <returns>a collection of strings representing the data record</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.BaseDifference.DoXmlElement(System.Xml.XmlWriter,System.String)">
            <summary>
            Adds an XML Element to an XML Writer
            </summary>
            <param name="writer">
            The XML writer to add the element to.
            </param>
            <param name="parentElementName">
            The name for the parenet element being produced.
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.BaseDifference.GetDataColumns">
            <summary>
            Gets a collection of data columns representing the type
            </summary>
            <returns>a collection of strings representing the data record</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.BaseDifference.GetColumnNames">
            <summary>
            Gets the names of the columns that are different
            </summary>
            <returns>
            list of names of the columns that are different
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.BaseDifference.GetOdataVocabularies">
            <summary>
            Gets the CDSL that defines the OData Vocabularies for this class
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Difference.TaskResult.BaseDifference.Name">
            <summary>
            Name of the task
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Difference.TaskResult.BaseDifference.Started">
            <summary>
            Timestamp of when the task started
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Difference.TaskResult.BaseDifference.Finished">
            <summary>
            Timestamp of when the task finished
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Difference.TaskResult.BaseDifference.HeaderRecord">
            <summary>
            Gets a header record for use for something like a CSV file
            </summary>
            <returns>a collection of strings representing the header record</returns>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Difference.TaskResult.BaseDifference.Count">
            <summary>
            Gets the number of properties that are different
            </summary>
            <return>
            the number of properties that are different
            </return>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultInteger32Difference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultInteger32Difference"/> class.
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultInteger32Difference.#ctor(Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultInteger32Difference)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultInteger32Difference"/> class.
            </summary>
            <param name="other">
            Object to copy
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultInteger32Difference.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultInteger32Difference"/> class.
            </summary>
            <param name="name">Name of the task</param>
            <param name="started">Timestamp of when the task started</param>
            <param name="finished">Timestamp of when the task finished</param>
            <param name="result">The result for the task</param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultInteger32Difference.OnDisposing">
            <summary>
            The on disposing event
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultInteger32Difference.CompareTo(Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultInteger32Difference)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="other">
            The instance to compare to
            </param>
            <returns>
            0 if equal, otherwise non zero
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultInteger32Difference.Equals(Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultInteger32Difference)">
            <summary>
            Checks if the current instance matches another of the same type
            </summary>
            <param name="other">object to compare</param>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultInteger32Difference.GetHashCode">
            <summary>
            Gets the hash code for the object
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultInteger32Difference.GetStronglyTypedObjectFromDataReaderRow(System.Data.Common.DbDataReader)">
            <summary>
            Get Strongly Typed Object from a data reader
            </summary>
            <param name="dataReader">
            The data Reader.
            </param>
            <returns>
            strongly typed object.
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultInteger32Difference.DoTableValidation">
            <summary>
            Checks a table to ensure it meets the required schema
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultInteger32Difference.ToStringArray">
            <summary>
            Gets a collection of string data for use for something like a CSV file
            </summary>
            <returns>a collection of strings representing the data record</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultInteger32Difference.DoXmlElement(System.Xml.XmlWriter,System.String)">
            <summary>
            Adds an XML Element to an XML Writer
            </summary>
            <param name="writer">
            The XML writer to add the element to.
            </param>
            <param name="parentElementName">
            The name for the parenet element being produced.
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultInteger32Difference.GetDataColumns">
            <summary>
            Gets a collection of data columns representing the type
            </summary>
            <returns>a collection of strings representing the data record</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultInteger32Difference.GetColumnNames">
            <summary>
            Gets the names of the columns that are different
            </summary>
            <returns>
            list of names of the columns that are different
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultInteger32Difference.GetOdataVocabularies">
            <summary>
            Gets the CDSL that defines the OData Vocabularies for this class
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultInteger32Difference.Result">
            <summary>
            The result for the task
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultInteger32Difference.HeaderRecord">
            <summary>
            Gets a header record for use for something like a CSV file
            </summary>
            <returns>a collection of strings representing the header record</returns>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultInteger32Difference.Count">
            <summary>
            Gets the number of properties that are different
            </summary>
            <return>
            the number of properties that are different
            </return>
        </member>
        <member name="T:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultDateTime">
            <summary>
            Represents a task that returns a single date result
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultDateTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultDateTime"/> class.
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultDateTime.#ctor(Dhgms.TplHelper.Model.Info.TaskResult.SingleResultDateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultDateTime"/> class.
            </summary>
            <param name="other">
            Object to copy
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultDateTime.#ctor(System.String,System.DateTime,System.DateTime,System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultDateTime"/> class.
            </summary>
            <param name="name">Name of the task</param>
            <param name="started">Timestamp of when the task started</param>
            <param name="finished">Timestamp of when the task finished</param>
            <param name="result">The result for the task</param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultDateTime.OnDisposing">
            <summary>
            The on disposing event
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultDateTime.CompareTo(Dhgms.TplHelper.Model.Info.TaskResult.SingleResultDateTime)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="other">
            The instance to compare to
            </param>
            <returns>
            0 if equal, otherwise non zero
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultDateTime.Equals(Dhgms.TplHelper.Model.Info.TaskResult.SingleResultDateTime)">
            <summary>
            Checks if the current instance matches another of the same type
            </summary>
            <param name="other">object to compare</param>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultDateTime.GetHashCode">
            <summary>
            Gets the hash code for the object
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultDateTime.GetStronglyTypedObjectFromDataReaderRow(System.Data.Common.DbDataReader)">
            <summary>
            Get Strongly Typed Object from a data reader
            </summary>
            <param name="dataReader">
            The data Reader.
            </param>
            <returns>
            strongly typed object.
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultDateTime.DoTableValidation">
            <summary>
            Checks a table to ensure it meets the required schema
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultDateTime.ToStringArray">
            <summary>
            Gets a collection of string data for use for something like a CSV file
            </summary>
            <returns>a collection of strings representing the data record</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultDateTime.DoXmlElement(System.Xml.XmlWriter,System.String)">
            <summary>
            Adds an XML Element to an XML Writer
            </summary>
            <param name="writer">
            The XML writer to add the element to.
            </param>
            <param name="parentElementName">
            The name for the parenet element being produced.
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultDateTime.GetDataColumns">
            <summary>
            Gets a collection of data columns representing the type
            </summary>
            <returns>a collection of strings representing the data record</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultDateTime.GetDifferences(Dhgms.TplHelper.Model.Info.TaskResult.SingleResultDateTime)">
            <summary>
            Checks this instance against another to see where there are differences
            </summary>
            <param name="other">other instance to compare</param>
            <returns>summary of where there are differences</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultDateTime.DoEntityFrameworkModel(System.Data.Entity.DbModelBuilder,System.String)">
            <summary>
            Maps the information class to the entity framework model
            </summary>
            <param name="modelBuilder">
            model builder object
            </param>
            <param name="tableName">
            The table Name in the database
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultDateTime.GetOdataVocabularies">
            <summary>
            Gets the CDSL that defines the OData Vocabularies for this class
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultDateTime.Result">
            <summary>
            Gets or sets The result for the task
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultDateTime.HeaderRecord">
            <summary>
            Gets a header record for use for something like a CSV file
            </summary>
            <returns>a collection of strings representing the header record</returns>
        </member>
        <member name="T:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultDateTimeDifference">
            <summary>
            Represents a task that returns a single date result
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultDateTimeDifference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultDateTimeDifference"/> class.
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultDateTimeDifference.#ctor(Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultDateTimeDifference)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultDateTimeDifference"/> class.
            </summary>
            <param name="other">
            Object to copy
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultDateTimeDifference.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultDateTimeDifference"/> class.
            </summary>
            <param name="name">Name of the task</param>
            <param name="started">Timestamp of when the task started</param>
            <param name="finished">Timestamp of when the task finished</param>
            <param name="result">The result for the task</param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultDateTimeDifference.OnDisposing">
            <summary>
            The on disposing event
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultDateTimeDifference.CompareTo(Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultDateTimeDifference)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="other">
            The instance to compare to
            </param>
            <returns>
            0 if equal, otherwise non zero
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultDateTimeDifference.Equals(Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultDateTimeDifference)">
            <summary>
            Checks if the current instance matches another of the same type
            </summary>
            <param name="other">object to compare</param>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultDateTimeDifference.GetHashCode">
            <summary>
            Gets the hash code for the object
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultDateTimeDifference.GetStronglyTypedObjectFromDataReaderRow(System.Data.Common.DbDataReader)">
            <summary>
            Get Strongly Typed Object from a data reader
            </summary>
            <param name="dataReader">
            The data Reader.
            </param>
            <returns>
            strongly typed object.
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultDateTimeDifference.DoTableValidation">
            <summary>
            Checks a table to ensure it meets the required schema
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultDateTimeDifference.ToStringArray">
            <summary>
            Gets a collection of string data for use for something like a CSV file
            </summary>
            <returns>a collection of strings representing the data record</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultDateTimeDifference.DoXmlElement(System.Xml.XmlWriter,System.String)">
            <summary>
            Adds an XML Element to an XML Writer
            </summary>
            <param name="writer">
            The XML writer to add the element to.
            </param>
            <param name="parentElementName">
            The name for the parenet element being produced.
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultDateTimeDifference.GetDataColumns">
            <summary>
            Gets a collection of data columns representing the type
            </summary>
            <returns>a collection of strings representing the data record</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultDateTimeDifference.GetColumnNames">
            <summary>
            Gets the names of the columns that are different
            </summary>
            <returns>
            list of names of the columns that are different
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultDateTimeDifference.GetOdataVocabularies">
            <summary>
            Gets the CDSL that defines the OData Vocabularies for this class
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultDateTimeDifference.Result">
            <summary>
            The result for the task
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultDateTimeDifference.HeaderRecord">
            <summary>
            Gets a header record for use for something like a CSV file
            </summary>
            <returns>a collection of strings representing the header record</returns>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultDateTimeDifference.Count">
            <summary>
            Gets the number of properties that are different
            </summary>
            <return>
            the number of properties that are different
            </return>
        </member>
        <member name="T:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultBoolean">
            <summary>
            Represents a task that returns a single boolean result
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultBoolean.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultBoolean"/> class.
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultBoolean.#ctor(Dhgms.TplHelper.Model.Info.TaskResult.SingleResultBoolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultBoolean"/> class.
            </summary>
            <param name="other">
            Object to copy
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultBoolean.#ctor(System.String,System.DateTime,System.DateTime,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultBoolean"/> class.
            </summary>
            <param name="name">Name of the task</param>
            <param name="started">Timestamp of when the task started</param>
            <param name="finished">Timestamp of when the task finished</param>
            <param name="result">The result for the task</param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultBoolean.OnDisposing">
            <summary>
            The on disposing event
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultBoolean.CompareTo(Dhgms.TplHelper.Model.Info.TaskResult.SingleResultBoolean)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="other">
            The instance to compare to
            </param>
            <returns>
            0 if equal, otherwise non zero
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultBoolean.Equals(Dhgms.TplHelper.Model.Info.TaskResult.SingleResultBoolean)">
            <summary>
            Checks if the current instance matches another of the same type
            </summary>
            <param name="other">object to compare</param>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultBoolean.GetHashCode">
            <summary>
            Gets the hash code for the object
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultBoolean.GetStronglyTypedObjectFromDataReaderRow(System.Data.Common.DbDataReader)">
            <summary>
            Get Strongly Typed Object from a data reader
            </summary>
            <param name="dataReader">
            The data Reader.
            </param>
            <returns>
            strongly typed object.
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultBoolean.DoTableValidation">
            <summary>
            Checks a table to ensure it meets the required schema
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultBoolean.ToStringArray">
            <summary>
            Gets a collection of string data for use for something like a CSV file
            </summary>
            <returns>a collection of strings representing the data record</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultBoolean.DoXmlElement(System.Xml.XmlWriter,System.String)">
            <summary>
            Adds an XML Element to an XML Writer
            </summary>
            <param name="writer">
            The XML writer to add the element to.
            </param>
            <param name="parentElementName">
            The name for the parenet element being produced.
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultBoolean.GetDataColumns">
            <summary>
            Gets a collection of data columns representing the type
            </summary>
            <returns>a collection of strings representing the data record</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultBoolean.GetDifferences(Dhgms.TplHelper.Model.Info.TaskResult.SingleResultBoolean)">
            <summary>
            Checks this instance against another to see where there are differences
            </summary>
            <param name="other">other instance to compare</param>
            <returns>summary of where there are differences</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultBoolean.DoEntityFrameworkModel(System.Data.Entity.DbModelBuilder,System.String)">
            <summary>
            Maps the information class to the entity framework model
            </summary>
            <param name="modelBuilder">
            model builder object
            </param>
            <param name="tableName">
            The table Name in the database
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultBoolean.GetOdataVocabularies">
            <summary>
            Gets the CDSL that defines the OData Vocabularies for this class
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultBoolean.Result">
            <summary>
            Gets or sets The result for the task
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Info.TaskResult.SingleResultBoolean.HeaderRecord">
            <summary>
            Gets a header record for use for something like a CSV file
            </summary>
            <returns>a collection of strings representing the header record</returns>
        </member>
        <member name="T:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultBooleanDifference">
            <summary>
            Represents a task that returns a single boolean result
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultBooleanDifference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultBooleanDifference"/> class.
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultBooleanDifference.#ctor(Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultBooleanDifference)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultBooleanDifference"/> class.
            </summary>
            <param name="other">
            Object to copy
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultBooleanDifference.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultBooleanDifference"/> class.
            </summary>
            <param name="name">Name of the task</param>
            <param name="started">Timestamp of when the task started</param>
            <param name="finished">Timestamp of when the task finished</param>
            <param name="result">The result for the task</param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultBooleanDifference.OnDisposing">
            <summary>
            The on disposing event
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultBooleanDifference.CompareTo(Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultBooleanDifference)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="other">
            The instance to compare to
            </param>
            <returns>
            0 if equal, otherwise non zero
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultBooleanDifference.Equals(Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultBooleanDifference)">
            <summary>
            Checks if the current instance matches another of the same type
            </summary>
            <param name="other">object to compare</param>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultBooleanDifference.GetHashCode">
            <summary>
            Gets the hash code for the object
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultBooleanDifference.GetStronglyTypedObjectFromDataReaderRow(System.Data.Common.DbDataReader)">
            <summary>
            Get Strongly Typed Object from a data reader
            </summary>
            <param name="dataReader">
            The data Reader.
            </param>
            <returns>
            strongly typed object.
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultBooleanDifference.DoTableValidation">
            <summary>
            Checks a table to ensure it meets the required schema
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultBooleanDifference.ToStringArray">
            <summary>
            Gets a collection of string data for use for something like a CSV file
            </summary>
            <returns>a collection of strings representing the data record</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultBooleanDifference.DoXmlElement(System.Xml.XmlWriter,System.String)">
            <summary>
            Adds an XML Element to an XML Writer
            </summary>
            <param name="writer">
            The XML writer to add the element to.
            </param>
            <param name="parentElementName">
            The name for the parenet element being produced.
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultBooleanDifference.GetDataColumns">
            <summary>
            Gets a collection of data columns representing the type
            </summary>
            <returns>a collection of strings representing the data record</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultBooleanDifference.GetColumnNames">
            <summary>
            Gets the names of the columns that are different
            </summary>
            <returns>
            list of names of the columns that are different
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultBooleanDifference.GetOdataVocabularies">
            <summary>
            Gets the CDSL that defines the OData Vocabularies for this class
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultBooleanDifference.Result">
            <summary>
            The result for the task
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultBooleanDifference.HeaderRecord">
            <summary>
            Gets a header record for use for something like a CSV file
            </summary>
            <returns>a collection of strings representing the header record</returns>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Difference.TaskResult.SingleResultBooleanDifference.Count">
            <summary>
            Gets the number of properties that are different
            </summary>
            <return>
            the number of properties that are different
            </return>
        </member>
        <member name="T:Dhgms.TplHelper.Model.Info.ApplicationInstanceMutexLock">
            <summary>
            Defines the possibilities for Application Instance Locking through a
            mutex.
            </summary>
        </member>
        <member name="F:Dhgms.TplHelper.Model.Info.ApplicationInstanceMutexLock.None">
            <summary>
            No Mutex Lock Applied.
            </summary>
        </member>
        <member name="F:Dhgms.TplHelper.Model.Info.ApplicationInstanceMutexLock.PerSystemFullyQualifiedPath">
            <summary>
            Global Mutex lock is done on the fully qualified path of the executable.
            In order to run multiple copies, they must be in different folders.
            </summary>
        </member>
        <member name="F:Dhgms.TplHelper.Model.Info.ApplicationInstanceMutexLock.PerSystemGuid">
            <summary>
            Global Mutex lock is based on the Job guid.  In order to run multiple copies
            they need to be run on seperate machines
            </summary>
        </member>
        <member name="F:Dhgms.TplHelper.Model.Info.ApplicationInstanceMutexLock.PerUserFullyQualifiedPath">
            <summary>
            Local (session id) Mutex lock is done on the fully qualified path of the executable.
            In order to run multiple copies, they must be in different folders.
            </summary>
        </member>
        <member name="F:Dhgms.TplHelper.Model.Info.ApplicationInstanceMutexLock.PerUserGuid">
            <summary>
            Local (session id) Mutex lock is based on the Job guid.  In order to run multiple copies
            they need to be run on seperate machines
            </summary>
        </member>
        <member name="T:Dhgms.TplHelper.Model.Provider.Job.Email`1">
            <summary>
            Provider for emailing out the error report
            </summary>
            <typeparam name="TJobResultClass">
            </typeparam>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.Email`1.OnJobFailure(System.Guid,System.String,System.Exception)">
            <summary>
            Handles sending of error information to different mediums
            </summary>
            <param name="programGuid">
            Unique GUID used to identify program
            </param>
            <param name="programName">
            Friendly name of program
            </param>
            <param name="e">
            Exception message
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.Email`1.OnJobStart(System.Guid)">
            <summary>
            Notify the provider of a job start
            </summary>
            <param name="jobGuid">
            Unique ID of the job
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.Email`1.OnJobSucess(System.Guid,System.String,`0)">
            <summary>
            Handles sending out the result information
            </summary>
            <param name="jobGuid">
            Unique GUID used to identify program
            </param>
            <param name="jobName">
            Friendly name of program
            </param>
            <param name="taskResult">
            Run results of task
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.Email`1.OnTaskFailure(System.Guid,System.Exception)">
            <summary>
            Handles the sending of a task failure notification, if required
            </summary>
            <param name="taskGuid">
            The GUID relating to the task
            </param>
            <param name="e">
            Exception message
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.Email`1.OnTaskStart(System.Guid)">
            <summary>
            Handles the sending of a task start notification, if required
            </summary>
            <param name="taskGuid">
            The GUID relating to the task
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.Email`1.OnTaskSucess(System.Guid)">
            <summary>
            Handles the sending of a task completion notification, if required
            </summary>
            <param name="taskGuid">
            The GUID relating to the task
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.Email`1.OnGetBody(`0)">
            <summary>
            Gets the body of the email
            </summary>
            <param name="taskResult">
            The task Result.
            </param>
            <returns>
            body of the email
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.Email`1.DoBasicFailureInformation(System.Guid,System.String)">
            <summary>
            Sends basic failure information to those who don't need to know the
            gorey details
            </summary>
            <param name="programGuid">
            The program Guid.
            </param>
            <param name="jobName">
            The job Name.
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.Email`1.DoDetailedFailureInformation(System.Guid,System.String,System.Exception)">
            <summary>
            Sends the exception information to those who need to know
            and possibly fix it
            </summary>
            <param name="programGuid">
            The program Guid.
            </param>
            <param name="programName">
            The program Name.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Provider.Job.Email`1.SendEmail(System.Net.Mail.MailAddressCollection,System.String,System.String,System.Boolean)">
            <summary>
            Wrapper to send the email
            </summary>
            <param name="bcc">
            </param>
            <param name="subject">
            </param>
            <param name="body">
            </param>
            <param name="isHtml">
            </param>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Provider.Job.Email`1.ErrorRecipient">
            <summary>
            Primary Receiver Of Error Emails
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Provider.Job.Email`1.HostName">
            <summary>
            Hostname used to send the email
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Provider.Job.Email`1.Recipients">
            <summary>
            Recipients who will receive the email
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Provider.Job.Email`1.Sender">
            <summary>
            Sender of the email
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Provider.Job.Email`1.SuccessEmailIsHtml">
            <summary>
            Whether the sucess emails are html
            </summary>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Task.Sql.EmbeddedStonglyTypedCollection`3">
            <summary>
            Task for pulling an Embedded SQL query into a stongly typed collection
            </summary>
            <typeparam name="TDatabaseHelperClass">
            The type for the database helper
            </typeparam>
            <typeparam name="TInformationClass">
            The type for the information class
            </typeparam>
            <typeparam name="TParameterClass">
            The type for the SQL Parameters
            </typeparam>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.EmbeddedStonglyTypedCollection`3.#ctor(System.String,System.String,System.Reflection.Assembly,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Task.Sql.EmbeddedStonglyTypedCollection`3"/> class. 
            </summary>
            <param name="taskName">
            Name of the task
            </param>
            <param name="connectionString">
            Database connection string
            </param>
            <param name="assembly">
            The assembly containing the resource
            </param>
            <param name="resourceNamespace">
            Namespace where the resource file resides. Usually the application name
            </param>
            <param name="resourceFileName">
            The filename of the embedded resource
            </param>
            <param name="assumeSqlSafe">
            Whether to skip the SQL injection safety check.  Use only if you know the code you are passing in is safe and contains a quoted string that is preventing it passing the saftey check
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.EmbeddedStonglyTypedCollection`3.OnProcess(Dhgms.TplHelper.Model.Info.TaskResult.StronglyTypedCollection{`1})">
            <summary>
            The OnProcess event for doing the donkey work
            </summary>
            <param name="result">
            object that contains result information
            </param>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Task.SendFile.Ftp">
            <summary>
            Task for transferring a file to an FTP server
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SendFile.Ftp.#ctor(Dhgms.DataManager.Model.ConfigurationElement.InternetServer,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Task.SendFile.Ftp"/> class. 
            </summary>
            <param name="ftpSettings">
            The FTP Settings
            </param>
            <param name="sourceFullFileName">
            File we're tranferring
            </param>
            <param name="targetFileName">
            Name the file will be stored as (will overwrite if it already exists)
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SendFile.Ftp.OnProcess(Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor)">
            <summary>
            The OnProcess event for doing the donkey work
            </summary>
            <param name="result">
            object that contains result information
            </param>
        </member>
        <member name="P:Dhgms.TplHelper.Controller.Task.SendFile.Ftp.FtpSettings">
            <summary>
            Gets or sets the FTP Settings
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Controller.Task.SendFile.Ftp.SourceFullFileName">
            <summary>
            Gets or sets the file we're tranferring
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Controller.Task.SendFile.Ftp.TargetFileName">
            <summary>
            Gets or sets the name the file will be stored as (will overwrite if it already exists)
            </summary>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Task.CompressFile.Zip">
            <summary>
            Task for compressing a file into a zip file
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.CompressFile.Zip.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Task.CompressFile.Zip"/> class. 
            </summary>
            <param name="sourceFullFileName">
            File we're tranferring
            </param>
            <param name="targetFileName">
            Name the file will be stored as (will overwrite if it already exists)
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.CompressFile.Zip.OnProcess(Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor)">
            <summary>
            The OnProcess event for doing the donkey work
            </summary>
            <param name="result">
            object that contains result information
            </param>
        </member>
        <member name="P:Dhgms.TplHelper.Controller.Task.CompressFile.Zip.SourceFullFileName">
            <summary>
            Gets or sets the name of the file we're tranferring
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Controller.Task.CompressFile.Zip.TargetFileName">
            <summary>
            Gets or sets the name of the file will be stored as (will overwrite if it already exists)
            </summary>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Task.Sql.NonQuery`2">
            <summary>
            Base class for handling an SQL task
            </summary>
            <typeparam name="TDatabaseHelperClass">
            The DB Helper Class used for commands
            </typeparam>
            <typeparam name="TParameterClass">
            The .NET DB Parameter Type
            </typeparam>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.NonQuery`2.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Task.Sql.NonQuery`2"/> class. 
            </summary>
            <param name="taskName">
            The name of the task
            </param>
            <param name="connectionString">
            Database Connection String
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.NonQuery`2.OnProcess(Dhgms.TplHelper.Model.Info.TaskResult.SingleResultInteger32)">
            <summary>
            The OnProcess event for doing the donkey work
            </summary>
            <param name="result">
            The result.
            </param>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Task.Sql.EmbeddedDate`2">
            <summary>
            Base class for an SQL task that processes a date from an embedded script
            </summary>
            <typeparam name="TDatabaseHelperClass">
            The type for the database helper
            </typeparam>
            <typeparam name="TParameterClass">
            The type for the SQL Parameters
            </typeparam>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.EmbeddedDate`2.#ctor(System.String,System.String,System.Reflection.Assembly,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Task.Sql.EmbeddedDate`2"/> class. 
            </summary>
            <param name="taskName">
            </param>
            <param name="connectionString">
            </param>
            <param name="assembly">
            </param>
            <param name="resourceNamespace">
            </param>
            <param name="resourceFileName">
            </param>
            <param name="assumeSqlSafe">
            Whether to skip the SQL injection safety check.  Use only if you know the code you are passing in is safe and contains a quoted string that is preventing it passing the saftey check
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.EmbeddedDate`2.OnProcess(Dhgms.TplHelper.Model.Info.TaskResult.SingleResultDateTime)">
            <summary>
            The OnProcess event for doing the donkey work
            </summary>
            <param name="result">
            The result.
            </param>
        </member>
        <member name="T:Dhgms.TplHelper.Model.Info.TaskResult.StronglyTypedCollection`1">
            <summary>
            Represents a task that returns a strongly typed collection
            </summary>
            <typeparam name="TInformationClass">
            </typeparam>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.StronglyTypedCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Info.TaskResult.StronglyTypedCollection`1"/> class. 
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.StronglyTypedCollection`1.#ctor(System.String,System.DateTime,System.DateTime,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Info.TaskResult.StronglyTypedCollection`1"/> class. 
            Constructor
            </summary>
            <param name="name">
            Name of the task
            </param>
            <param name="started">
            Timestamp of when the task started
            </param>
            <param name="finished">
            Timestamp of when the task finished
            </param>
            <param name="result">
            The result for the task
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.StronglyTypedCollection`1.CompareTo(Dhgms.TplHelper.Model.Info.TaskResult.StronglyTypedCollection{`0})">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="other">
            The other.
            </param>
            <return>
            0 if equal, otherwise non zero
            </return>
            <returns>
            The compare to.
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.StronglyTypedCollection`1.DoTableValidation">
            <summary>
            Checks a table to ensure it meets the required schema
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.StronglyTypedCollection`1.Equals(Dhgms.TplHelper.Model.Info.TaskResult.StronglyTypedCollection{`0})">
            <summary>
            Checks if the current instance matches another of the same type
            </summary>
            <param name="other">
            object to compare
            </param>
            <returns>
            true if equal, otherwise false
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.StronglyTypedCollection`1.GetDataColumns">
            <summary>
            Gets a collection of data columns representing the type
            </summary>
            <returns>
            a collection of strings representing the data record
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.StronglyTypedCollection`1.GetDifferences(Dhgms.TplHelper.Model.Info.TaskResult.StronglyTypedCollection{`0})">
            <summary>
            Checks this instance against another to see where there are differences
            </summary>
            <param name="other">
            other instance to compare
            </param>
            <returns>
            summary of where there are differences
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.StronglyTypedCollection`1.GetHashCode">
            <summary>
            Gets the hash code for the object
            </summary>
            <returns>
            hash code
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.StronglyTypedCollection`1.GetStronglyTypedObjectFromDataReaderRow(System.Data.Common.DbDataReader)">
            <summary>
            Get Strongly Typed Object from a data reader
            </summary>
            <param name="dataReader">
            The data Reader.
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.StronglyTypedCollection`1.ToStringArray">
            <summary>
            Gets a collection of string data for use for something like a CSV file
            </summary>
            <returns>
            a collection of strings representing the data record
            </returns>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Info.TaskResult.StronglyTypedCollection`1.HeaderRecord">
            <summary>
            Gets a header record for use for something like a CSV file
            </summary>
            <returns>a collection of strings representing the header record</returns>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Info.TaskResult.StronglyTypedCollection`1.Result">
            <summary>
            The result for the task
            </summary>
        </member>
        <member name="T:Dhgms.TplHelper.Model.Difference.TaskResult.StronglyTypedCollection">
            <summary>
            Represents a task that returns a strongly typed collection
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.StronglyTypedCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Difference.TaskResult.StronglyTypedCollection"/> class. 
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.StronglyTypedCollection.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Difference.TaskResult.StronglyTypedCollection"/> class. 
            Constructor
            </summary>
            <param name="name">
            Name of the task
            </param>
            <param name="started">
            Timestamp of when the task started
            </param>
            <param name="finished">
            Timestamp of when the task finished
            </param>
            <param name="result">
            The result for the task
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.StronglyTypedCollection.CompareTo(Dhgms.TplHelper.Model.Difference.TaskResult.StronglyTypedCollection)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="other">
            The other.
            </param>
            <return>
            0 if equal, otherwise non zero
            </return>
            <returns>
            The compare to.
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.StronglyTypedCollection.DoTableValidation">
            <summary>
            Checks a table to ensure it meets the required schema
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.StronglyTypedCollection.Equals(Dhgms.TplHelper.Model.Difference.TaskResult.StronglyTypedCollection)">
            <summary>
            Checks if the current instance matches another of the same type
            </summary>
            <param name="other">
            object to compare
            </param>
            <returns>
            true if equal, otherwise false
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.StronglyTypedCollection.GetColumnNames">
            <summary>
            Gets the names of the columns that are different
            </summary>
            <return>
            list of names of the columns that are different
            </return>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.StronglyTypedCollection.GetDataColumns">
            <summary>
            Gets a collection of data columns representing the type
            </summary>
            <returns>
            a collection of strings representing the data record
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.StronglyTypedCollection.GetHashCode">
            <summary>
            Gets the hash code for the object
            </summary>
            <returns>
            hash code
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.StronglyTypedCollection.GetStronglyTypedObjectFromDataReaderRow(System.Data.Common.DbDataReader)">
            <summary>
            Get Strongly Typed Object from a data reader
            </summary>
            <param name="dataReader">
            The data Reader.
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.StronglyTypedCollection.ToStringArray">
            <summary>
            Gets a collection of string data for use for something like a CSV file
            </summary>
            <returns>
            a collection of strings representing the data record
            </returns>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Difference.TaskResult.StronglyTypedCollection.Count">
            <summary>
            Gets the number of properties that are different
            </summary>
            <return>
            the number of properties that are different
            </return>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Difference.TaskResult.StronglyTypedCollection.HeaderRecord">
            <summary>
            Gets a header record for use for something like a CSV file
            </summary>
            <returns>a collection of strings representing the header record</returns>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Difference.TaskResult.StronglyTypedCollection.Result">
            <summary>
            The result for the task
            </summary>
        </member>
        <member name="T:Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor">
            <summary>
            Represents the result of a task the processes a batch of records
            </summary>
        </member>
        <member name="F:Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor.recordsProcessed">
            <summary>
            Number of records processed
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor"/> class.
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor.#ctor(Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor"/> class.
            </summary>
            <param name="other">
            Object to copy
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor.#ctor(System.String,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor"/> class.
            </summary>
            <param name="name">Name of the task</param>
            <param name="started">Timestamp of when the task started</param>
            <param name="finished">Timestamp of when the task finished</param>
            <param name="recordsProcessed">Number of records processed</param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor.OnDisposing">
            <summary>
            The on disposing event
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor.CompareTo(Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="other">
            The instance to compare to
            </param>
            <returns>
            0 if equal, otherwise non zero
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor.Equals(Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor)">
            <summary>
            Checks if the current instance matches another of the same type
            </summary>
            <param name="other">object to compare</param>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor.GetHashCode">
            <summary>
            Gets the hash code for the object
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor.GetStronglyTypedObjectFromDataReaderRow(System.Data.Common.DbDataReader)">
            <summary>
            Get Strongly Typed Object from a data reader
            </summary>
            <param name="dataReader">
            The data Reader.
            </param>
            <returns>
            strongly typed object.
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor.DoTableValidation">
            <summary>
            Checks a table to ensure it meets the required schema
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor.ToStringArray">
            <summary>
            Gets a collection of string data for use for something like a CSV file
            </summary>
            <returns>a collection of strings representing the data record</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor.DoXmlElement(System.Xml.XmlWriter,System.String)">
            <summary>
            Adds an XML Element to an XML Writer
            </summary>
            <param name="writer">
            The XML writer to add the element to.
            </param>
            <param name="parentElementName">
            The name for the parenet element being produced.
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor.GetDataColumns">
            <summary>
            Gets a collection of data columns representing the type
            </summary>
            <returns>a collection of strings representing the data record</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor.GetDifferences(Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor)">
            <summary>
            Checks this instance against another to see where there are differences
            </summary>
            <param name="other">other instance to compare</param>
            <returns>summary of where there are differences</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor.DoEntityFrameworkModel(System.Data.Entity.DbModelBuilder,System.String)">
            <summary>
            Maps the information class to the entity framework model
            </summary>
            <param name="modelBuilder">
            model builder object
            </param>
            <param name="tableName">
            The table Name in the database
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor.GetOdataVocabularies">
            <summary>
            Gets the CDSL that defines the OData Vocabularies for this class
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor.RecordsProcessed">
            <summary>
            Gets or sets Number of records processed
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor.HeaderRecord">
            <summary>
            Gets a header record for use for something like a CSV file
            </summary>
            <returns>a collection of strings representing the header record</returns>
        </member>
        <member name="T:Dhgms.TplHelper.Model.Difference.TaskResult.RecordProcessorDifference">
            <summary>
            Represents the result of a task the processes a batch of records
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.RecordProcessorDifference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Difference.TaskResult.RecordProcessorDifference"/> class.
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.RecordProcessorDifference.#ctor(Dhgms.TplHelper.Model.Difference.TaskResult.RecordProcessorDifference)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Difference.TaskResult.RecordProcessorDifference"/> class.
            </summary>
            <param name="other">
            Object to copy
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.RecordProcessorDifference.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Difference.TaskResult.RecordProcessorDifference"/> class.
            </summary>
            <param name="name">Name of the task</param>
            <param name="started">Timestamp of when the task started</param>
            <param name="finished">Timestamp of when the task finished</param>
            <param name="recordsProcessed">Number of records processed</param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.RecordProcessorDifference.OnDisposing">
            <summary>
            The on disposing event
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.RecordProcessorDifference.CompareTo(Dhgms.TplHelper.Model.Difference.TaskResult.RecordProcessorDifference)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="other">
            The instance to compare to
            </param>
            <returns>
            0 if equal, otherwise non zero
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.RecordProcessorDifference.Equals(Dhgms.TplHelper.Model.Difference.TaskResult.RecordProcessorDifference)">
            <summary>
            Checks if the current instance matches another of the same type
            </summary>
            <param name="other">object to compare</param>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.RecordProcessorDifference.GetHashCode">
            <summary>
            Gets the hash code for the object
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.RecordProcessorDifference.GetStronglyTypedObjectFromDataReaderRow(System.Data.Common.DbDataReader)">
            <summary>
            Get Strongly Typed Object from a data reader
            </summary>
            <param name="dataReader">
            The data Reader.
            </param>
            <returns>
            strongly typed object.
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.RecordProcessorDifference.DoTableValidation">
            <summary>
            Checks a table to ensure it meets the required schema
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.RecordProcessorDifference.ToStringArray">
            <summary>
            Gets a collection of string data for use for something like a CSV file
            </summary>
            <returns>a collection of strings representing the data record</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.RecordProcessorDifference.DoXmlElement(System.Xml.XmlWriter,System.String)">
            <summary>
            Adds an XML Element to an XML Writer
            </summary>
            <param name="writer">
            The XML writer to add the element to.
            </param>
            <param name="parentElementName">
            The name for the parenet element being produced.
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.RecordProcessorDifference.GetDataColumns">
            <summary>
            Gets a collection of data columns representing the type
            </summary>
            <returns>a collection of strings representing the data record</returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.RecordProcessorDifference.GetColumnNames">
            <summary>
            Gets the names of the columns that are different
            </summary>
            <returns>
            list of names of the columns that are different
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Difference.TaskResult.RecordProcessorDifference.GetOdataVocabularies">
            <summary>
            Gets the CDSL that defines the OData Vocabularies for this class
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Difference.TaskResult.RecordProcessorDifference.RecordsProcessed">
            <summary>
            Number of records processed
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Difference.TaskResult.RecordProcessorDifference.HeaderRecord">
            <summary>
            Gets a header record for use for something like a CSV file
            </summary>
            <returns>a collection of strings representing the header record</returns>
        </member>
        <member name="P:Dhgms.TplHelper.Model.Difference.TaskResult.RecordProcessorDifference.Count">
            <summary>
            Gets the number of properties that are different
            </summary>
            <return>
            the number of properties that are different
            </return>
        </member>
        <member name="T:Dhgms.TplHelper.Model.Info.JobResult.RecordProcessor">
            <summary>
            Job Result for Record Processing
            </summary>
        </member>
        <member name="F:Dhgms.TplHelper.Model.Info.JobResult.RecordProcessor.Finished">
            <summary>
            Timestamp for when the job finished
            </summary>
        </member>
        <member name="F:Dhgms.TplHelper.Model.Info.JobResult.RecordProcessor.Started">
            <summary>
            Timestamp for when the job started
            </summary>
        </member>
        <member name="F:Dhgms.TplHelper.Model.Info.JobResult.RecordProcessor.TaskResults">
            <summary>
            List of task results for the job
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.JobResult.RecordProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Info.JobResult.RecordProcessor"/> class. 
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Info.JobResult.RecordProcessor.#ctor(System.Net.Mail.MailAddressCollection,System.DateTime,System.DateTime,System.Collections.Generic.List{Dhgms.TplHelper.Model.Info.TaskResult.RecordProcessor})">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Model.Info.JobResult.RecordProcessor"/> class. 
            </summary>
            <param name="emailRecipients">
            Email Recipients for the report
            </param>
            <param name="started">
            When the job started
            </param>
            <param name="finished">
            When the job finished
            </param>
            <param name="taskResults">
            Results of Tasks
            </param>
        </member>
        <member name="T:Dhgms.TplHelper.Model.Helper.Ftp">
            <summary>
            Helper methods for the Ftp library
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Helper.Ftp.GetDirectoryExists(AlexPilotti.FTPS.Client.FTPSClient,System.String,System.String)">
            <summary>
            Checks if a subdirectory exists
            </summary>
            <param name="ftpsClient">
            The FTP Client Class
            </param>
            <param name="currentDir">
            The current directory to search
            </param>
            <param name="wantedSubDirectory">
            The subdirectory we want to make sure exists
            </param>
            <returns>
            true if exists, otherwise false
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Model.Helper.Ftp.SetCurrentDirectory(AlexPilotti.FTPS.Client.FTPSClient,System.String,System.Boolean)">
            <summary>
            Sets the current directory on the FTP Session
            </summary>
            <param name="ftpsClient">
            The FTP Client Class
            </param>
            <param name="remoteDirName">
            The directory to change to
            </param>
            <param name="ensureExists">
            Whether to make sure the directory exists
            </param>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.MsSql">
            <summary>
            Task for bulk importing from a remote MSSQL Server
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.MsSql.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,Dhgms.TplHelper.Model.Info.DestinationTableDeleteAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.MsSql"/> class. 
            </summary>
            <param name="taskName">
            Name of the data being bulk imported
            </param>
            <param name="sourceConnectionString">
            Connection String for the source database
            </param>
            <param name="sourceSql">
            SQL to get the source data
            </param>
            <param name="destinationConnectionString">
            Connection String for the target database
            </param>
            <param name="destinationDatabase">
            Name of the database the table sits in
            </param>
            <param name="destinationSchema">
            the schema the destination table sits in
            </param>
            <param name="destinationTable">
            the table the data is going to end up in
            </param>
            <param name="targetTableDeleteAction">
            the delete action to be taken on the target table
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.MsSql.GetSourceDbCommand(System.Data.Common.DbConnection,System.String)">
            <summary>
            Gets the db command for the source database
            </summary>
            <param name="sourceConnection">
            The source Connection.
            </param>
            <param name="sourceSql">
            The source Sql.
            </param>
            <returns>
            db command for the source database
            </returns>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.MsSql.GetSourceDbConnection(System.String)">
            <summary>
            gets the db connection for the source db
            </summary>
            <param name="sourceConnectionString">
            The source Connection String.
            </param>
            <returns>
            db connection for the source db
            </returns>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Job.Base`2">
            <summary>
            Base class for the job handler
            </summary>
            <typeparam name="TJobResultClass">
            The Job Result Type
            </typeparam>
            <typeparam name="TJobSettings">
            The Job Settings Type
            </typeparam>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Job.Base`2.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Job.Base`2"/> class. 
            </summary>
            <param name="guid">
            Unique ID for the Job
            </param>
            <param name="friendlyName">
            Friendly Name for the Job
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Job.Base`2.Execute(Quartz.IJobExecutionContext)">
            <summary>
            Entry point for Job Execution
            </summary>
            <param name="context">
            Execution context for the job
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Job.Base`2.OnExecute(`1)">
            <summary>
            The on execute event, where the donkey work should be done
            </summary>
            <param name="applicationSettings">The application settings</param>
            <returns>Job Result Data</returns>
        </member>
        <member name="P:Dhgms.TplHelper.Controller.Job.Base`2.FriendlyName">
            <summary>
            Gets the friendly Name for the Job
            </summary>
        </member>
        <member name="P:Dhgms.TplHelper.Controller.Job.Base`2.Guid">
            <summary>
            Gets the Unique ID for the Job
            </summary>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Task.Sql.Date`2">
            <summary>
            Base class for an SQL Task that deals with a date
            </summary>
            <typeparam name="TDatabaseHelperClass">
            The DB Helper Class used for commands
            </typeparam>
            <typeparam name="TParameterClass">
            The .NET DB Parameter Type
            </typeparam>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.Date`2.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Task.Sql.Date`2"/> class.
            </summary>
            <param name="taskName">
            The task name.
            </param>
            <param name="connectionString">
            The connection string.
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.Sql.Date`2.OnProcess(Dhgms.TplHelper.Model.Info.TaskResult.SingleResultDateTime)">
            <summary>
            The OnProcess event for doing the donkey work
            </summary>
            <param name="result">
            The result.
            </param>
        </member>
        <member name="T:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.DataTable">
            <summary>
            Base class for an SQL Bulk Import Task that uses a Data Table as its source
            </summary>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.DataTable.#ctor(System.String,System.String,System.String,System.String,System.String,Dhgms.TplHelper.Model.Info.DestinationTableDeleteAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.DataTable"/> class. 
            </summary>
            <param name="taskName">
            Name of the data being bulk imported
            </param>
            <param name="destinationConnectionString">
            Connection String for the target database
            </param>
            <param name="destinationDatabase">
            Name of the database the table sits in
            </param>
            <param name="destinationSchema">
            the schema the destination table sits in
            </param>
            <param name="destinationTable">
            the table the data is going to end up in
            </param>
            <param name="targetTableDeleteAction">
            the delete action to be taken on the target table
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.DataTable.ActOnData(System.Data.DataTable)">
            <summary>
            Carries out the bulk copy from the data table
            </summary>
            <param name="table">
            Data Table to copy data from
            </param>
        </member>
        <member name="M:Dhgms.TplHelper.Controller.Task.SqlBulkCopy.DataTable.OnFetchAndProcessSourceData">
            <summary>
            Fetches the data and passes it on to be bulk inserted
            </summary>
        </member>
    </members>
</doc>
