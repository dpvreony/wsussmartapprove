<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Json</name>
    </assembly>
    <members>
        <member name="M:System.Json.SR.CannotCastJsonValue(System.Object,System.Object)">
            <summary>Gets localized string like: Unable to cast object of type '{0}' to type '{1}'.</summary>
            <param name="param0">Parameter 0 for string: Unable to cast object of type '{0}' to type '{1}'.</param>
            <param name="param1">Parameter 1 for string: Unable to cast object of type '{0}' to type '{1}'.</param>
        </member>
        <member name="M:System.Json.SR.CannotReadAsType(System.Object,System.Object)">
            <summary>Gets localized string like: CannotReadAsType=Cannot read '{0}' as '{1}' type.</summary>
            <param name="param0">Parameter 0 for string: CannotReadAsType=Cannot read '{0}' as '{1}' type.</param>
            <param name="param1">Parameter 1 for string: CannotReadAsType=Cannot read '{0}' as '{1}' type.</param>
        </member>
        <member name="M:System.Json.SR.CannotReadPrimitiveAsType(System.Object,System.Object)">
            <summary>Gets localized string like: Cannot read JsonPrimitive value '{0}' as '{1}'.</summary>
            <param name="param0">Parameter 0 for string: Cannot read JsonPrimitive value '{0}' as '{1}'.</param>
            <param name="param1">Parameter 1 for string: Cannot read JsonPrimitive value '{0}' as '{1}'.</param>
        </member>
        <member name="M:System.Json.SR.DynamicPropertyNotDefined(System.Object,System.Object)">
            <summary>Gets localized string like: '{0}' does not contain a definition for property '{1}'.</summary>
            <param name="param0">Parameter 0 for string: '{0}' does not contain a definition for property '{1}'.</param>
            <param name="param1">Parameter 1 for string: '{0}' does not contain a definition for property '{1}'.</param>
        </member>
        <member name="M:System.Json.SR.FormUrlEncodedMismatchingTypes(System.Object)">
            <summary>Gets localized string like: Mismatched types at node '{0}'.</summary>
            <param name="param0">Parameter 0 for string: Mismatched types at node '{0}'.</param>
        </member>
        <member name="M:System.Json.SR.IndexerNotSupportedOnJsonType(System.Object,System.Object)">
            <summary>Gets localized string like: '{0}' type indexer is not supported on JsonValue of 'JsonType.{1}' type.</summary>
            <param name="param0">Parameter 0 for string: '{0}' type indexer is not supported on JsonValue of 'JsonType.{1}' type.</param>
            <param name="param1">Parameter 1 for string: '{0}' type indexer is not supported on JsonValue of 'JsonType.{1}' type.</param>
        </member>
        <member name="M:System.Json.SR.InvalidArrayInsert(System.Object)">
            <summary>Gets localized string like: Invalid array at node '{0}'.</summary>
            <param name="param0">Parameter 0 for string: Invalid array at node '{0}'.</param>
        </member>
        <member name="M:System.Json.SR.InvalidCastNonNullable(System.Object)">
            <summary>Gets localized string like: Cannot convert null to '{0}' because it is a non-nullable value type.</summary>
            <param name="param0">Parameter 0 for string: Cannot convert null to '{0}' because it is a non-nullable value type.</param>
        </member>
        <member name="M:System.Json.SR.InvalidDateFormat(System.Object,System.Object)">
            <summary>Gets localized string like: Cannot cast JsonPrimitive value '{0}' as '{1}'. It is not in a valid date format.</summary>
            <param name="param0">Parameter 0 for string: Cannot cast JsonPrimitive value '{0}' as '{1}'. It is not in a valid date format.</param>
            <param name="param1">Parameter 1 for string: Cannot cast JsonPrimitive value '{0}' as '{1}'. It is not in a valid date format.</param>
        </member>
        <member name="M:System.Json.SR.InvalidIndexType(System.Object)">
            <summary>Gets localized string like: Invalid '{0}' index type; only 'System.String' and non-negative 'System.Int32' types are supported.</summary>
            <param name="param0">Parameter 0 for string: Invalid '{0}' index type; only 'System.String' and non-negative 'System.Int32' types are supported.</param>
        </member>
        <member name="M:System.Json.SR.InvalidJsonPrimitive(System.Object)">
            <summary>Gets localized string like: Invalid JSON primitive: {0}.</summary>
            <param name="param0">Parameter 0 for string: Invalid JSON primitive: {0}.</param>
        </member>
        <member name="M:System.Json.SR.InvalidUriFormat(System.Object,System.Object,System.Object,System.Object)">
            <summary>Gets localized string like: Cannot cast '{0}' value '{1}.{2}' as a type of '{3}'. The provided string is not a valid relative or absolute '{3}'.</summary>
            <param name="param0">Parameter 0 for string: Cannot cast '{0}' value '{1}.{2}' as a type of '{3}'. The provided string is not a valid relative or absolute '{3}'.</param>
            <param name="param1">Parameter 1 for string: Cannot cast '{0}' value '{1}.{2}' as a type of '{3}'. The provided string is not a valid relative or absolute '{3}'.</param>
            <param name="param2">Parameter 2 for string: Cannot cast '{0}' value '{1}.{2}' as a type of '{3}'. The provided string is not a valid relative or absolute '{3}'.</param>
            <param name="param3">Parameter 3 for string: Cannot cast '{0}' value '{1}.{2}' as a type of '{3}'. The provided string is not a valid relative or absolute '{3}'.</param>
        </member>
        <member name="M:System.Json.SR.JQuery13CompatModeNotSupportNestedJson(System.Object)">
            <summary>Gets localized string like: Traditional style array without '[]' is not supported with nested object at location {0}.</summary>
            <param name="param0">Parameter 0 for string: Traditional style array without '[]' is not supported with nested object at location {0}.</param>
        </member>
        <member name="M:System.Json.SR.MaxDepthExceeded(System.Object)">
            <summary>Gets localized string like: The maximum read depth ({0}) has been exceeded because the form url-encoded data being read has more levels of nesting than is allowed.</summary>
            <param name="param0">Parameter 0 for string: The maximum read depth ({0}) has been exceeded because the form url-encoded data being read has more levels of nesting than is allowed.</param>
        </member>
        <member name="M:System.Json.SR.MinParameterSize(System.Object)">
            <summary>Gets localized string like: The parameter must be greater than {0}.</summary>
            <param name="param0">Parameter 0 for string: The parameter must be greater than {0}.</param>
        </member>
        <member name="M:System.Json.SR.NestedBracketNotValid(System.Object,System.Object)">
            <summary>Gets localized string like: Nested bracket is not valid for '{0}' data at position {1}.</summary>
            <param name="param0">Parameter 0 for string: Nested bracket is not valid for '{0}' data at position {1}.</param>
            <param name="param1">Parameter 1 for string: Nested bracket is not valid for '{0}' data at position {1}.</param>
        </member>
        <member name="M:System.Json.SR.OperationNotSupportedOnJsonType(System.Object)">
            <summary>Gets localized string like: Operation not supported on JsonValue instance of 'JsonType.{0}' type.</summary>
            <param name="param0">Parameter 0 for string: Operation not supported on JsonValue instance of 'JsonType.{0}' type.</param>
        </member>
        <member name="M:System.Json.SR.OperatorNotAllowedOnOperands(System.Object,System.Object,System.Object)">
            <summary>Gets localized string like: Operation '{0}' cannot be applied on operands of type '{1}' and '{2}'.</summary>
            <param name="param0">Parameter 0 for string: Operation '{0}' cannot be applied on operands of type '{1}' and '{2}'.</param>
            <param name="param1">Parameter 1 for string: Operation '{0}' cannot be applied on operands of type '{1}' and '{2}'.</param>
            <param name="param2">Parameter 2 for string: Operation '{0}' cannot be applied on operands of type '{1}' and '{2}'.</param>
        </member>
        <member name="M:System.Json.SR.OperatorNotDefinedForJsonType(System.Object,System.Object)">
            <summary>Gets localized string like: Operation '{0}' is not defined for JsonValue instances of JsonType '{1}'.</summary>
            <param name="param0">Parameter 0 for string: Operation '{0}' is not defined for JsonValue instances of JsonType '{1}'.</param>
            <param name="param1">Parameter 1 for string: Operation '{0}' is not defined for JsonValue instances of JsonType '{1}'.</param>
        </member>
        <member name="M:System.Json.SR.OverflowReadAs(System.Object,System.Object)">
            <summary>Gets localized string like: Cannot cast JsonPrimitive value '{0}' as '{1}'. The value is either too large or too small for the specified CLR type.</summary>
            <param name="param0">Parameter 0 for string: Cannot cast JsonPrimitive value '{0}' as '{1}'. The value is either too large or too small for the specified CLR type.</param>
            <param name="param1">Parameter 1 for string: Cannot cast JsonPrimitive value '{0}' as '{1}'. The value is either too large or too small for the specified CLR type.</param>
        </member>
        <member name="M:System.Json.SR.UnMatchedBracketNotValid(System.Object,System.Object)">
            <summary>Gets localized string like: There is an unmatched opened bracket for the '{0}' at position {1}.</summary>
            <param name="param0">Parameter 0 for string: There is an unmatched opened bracket for the '{0}' at position {1}.</param>
            <param name="param1">Parameter 1 for string: There is an unmatched opened bracket for the '{0}' at position {1}.</param>
        </member>
        <member name="P:System.Json.SR.IncorrectJsonFormat">
            <summary>Gets localized string like: The input source is not correctly formatted.</summary>
        </member>
        <member name="P:System.Json.SR.JsonStringCannotBeEmpty">
            <summary>Gets localized string like: An empty string cannot be parsed as JSON.</summary>
        </member>
        <member name="P:System.Json.SR.JsonWebToken_AlgorithmHeaderIsRequired">
            <summary>Gets localized string like: The algorithm header (alg) is required. If the JSON web token is not signed, the algorithm header should be set to "none".</summary>
        </member>
        <member name="P:System.Json.SR.JsonWebToken_InvalidAlgorithm">
            <summary>Gets localized string like: The cryptographic algorithm is not defined or is invalid. Use the value "none" to leave the JSON web token unsigned.</summary>
        </member>
        <member name="P:System.Json.SR.JsonWebToken_InvalidKeyOrCertificateForAuthentication">
            <summary>Gets localized string like: The provided key or certificate cannot be used to verify the signature of the JSON web token.</summary>
        </member>
        <member name="P:System.Json.SR.JsonWebToken_InvalidKeyOrCertificateForSigning">
            <summary>Gets localized string like: The provided key or certificate cannot be used to sign the JSON web token.</summary>
        </member>
        <member name="P:System.Json.SR.JsonWebToken_InvalidSignature">
            <summary>Gets localized string like: The JSON Web Token failed authentication. The signature in the token has a different value than the signature computed with the authenticating key.</summary>
        </member>
        <member name="P:System.Json.SR.JsonWebToken_InvalidTokenFormat">
            <summary>Gets localized string like: Cannot parse the JSON Web Token. The format is invalid.</summary>
        </member>
        <member name="P:System.Json.SR.JsonWebToken_SignatureRequired">
            <summary>Gets localized string like: The JSON web token needs to be signed. To leave the token unsigned, set the Algorithm property to "none". Otherwise, call the Sign method to sign the token.</summary>
        </member>
        <member name="P:System.Json.SR.NonSingleNonNullIndexNotSupported">
            <summary>Gets localized string like: Null index or multidimensional indexing is not supported by this indexer; use 'System.Int32' or 'System.String' for array and object indexing respectively.</summary>
        </member>
        <member name="P:System.Json.SR.QueryStringNameShouldNotNull">
            <summary>Gets localized string like: Query string name cannot be null.</summary>
        </member>
        <member name="P:System.Json.SR.TypeNotSupported">
            <summary>Gets localized string like: Object type not supported.</summary>
        </member>
        <member name="P:System.Json.SR.UseOfDefaultNotAllowed">
            <summary>Gets localized string like: Operation not supported on JsonValue instances of 'JsonType.Default' type.</summary>
        </member>
        <member name="T:System.Json.FormUrlEncodedJson">
            <summary>
            This class provides a low-level API for parsing HTML form URL-encoded data, also known as <c>application/x-www-form-urlencoded</c> 
            data. The output of the parser is a <see cref="T:System.Json.JsonObject"/> instance. 
            <remarks>This is a low-level API intended for use by other APIs. It has been optimized for performance and 
            is not intended to be called directly from user code.</remarks>
            </summary>
        </member>
        <member name="M:System.Json.FormUrlEncodedJson.Parse(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})">
            <summary>
            Parses a collection of query string values as a <see cref="T:System.Json.JsonObject"/>.
            </summary>
            <remarks>This is a low-level API intended for use by other APIs. It has been optimized for performance and 
            is not intended to be called directly from user code.</remarks>
            <param name="nameValuePairs">The collection of query string name-value pairs parsed in lexical order. Both names
            and values must be un-escaped so that they don't contain any <see cref="T:System.Uri"/> encoding.</param>
            <returns>The <see cref="T:System.Json.JsonObject"/> corresponding to the given query string values.</returns>
        </member>
        <member name="M:System.Json.FormUrlEncodedJson.Parse(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},System.Int32)">
            <summary>
            Parses a collection of query string values as a <see cref="T:System.Json.JsonObject"/>.
            </summary>
            <remarks>This is a low-level API intended for use by other APIs. It has been optimized for performance and 
            is not intended to be called directly from user code.</remarks>
            <param name="nameValuePairs">The collection of query string name-value pairs parsed in lexical order. Both names
            and values must be un-escaped so that they don't contain any <see cref="T:System.Uri"/> encoding.</param>
            <param name="maxDepth">The maximum depth of object graph encoded as <c>x-www-form-urlencoded</c>.</param>
            <returns>The <see cref="T:System.Json.JsonObject"/> corresponding to the given query string values.</returns>
        </member>
        <member name="M:System.Json.FormUrlEncodedJson.TryParse(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},System.Json.JsonObject@)">
            <summary>
            Parses a collection of query string values as a <see cref="T:System.Json.JsonObject"/>.
            </summary>
            <remarks>This is a low-level API intended for use by other APIs. It has been optimized for performance and 
            is not intended to be called directly from user code.</remarks>
            <param name="nameValuePairs">The collection of query string name-value pairs parsed in lexical order. Both names
            and values must be un-escaped so that they don't contain any <see cref="T:System.Uri"/> encoding.</param>
            <param name="value">The parsed result or null if parsing failed.</param>
            <returns><c>true</c> if <paramref name="nameValuePairs"/> was parsed successfully; otherwise false.</returns>
        </member>
        <member name="M:System.Json.FormUrlEncodedJson.TryParse(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},System.Int32,System.Json.JsonObject@)">
            <summary>
            Parses a collection of query string values as a <see cref="T:System.Json.JsonObject"/>.
            </summary>
            <remarks>This is a low-level API intended for use by other APIs. It has been optimized for performance and 
            is not intended to be called directly from user code.</remarks>
            <param name="nameValuePairs">The collection of query string name-value pairs parsed in lexical order. Both names
            and values must be un-escaped so that they don't contain any <see cref="T:System.Uri"/> encoding.</param>
            <param name="maxDepth">The maximum depth of object graph encoded as <c>x-www-form-urlencoded</c>.</param>
            <param name="value">The parsed result or null if parsing failed.</param>
            <returns><c>true</c> if <paramref name="nameValuePairs"/> was parsed successfully; otherwise false.</returns>
        </member>
        <member name="M:System.Json.FormUrlEncodedJson.ParseInternal(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},System.Int32,System.Boolean)">
            <summary>
            Parses a collection of query string values as a <see cref="T:System.Json.JsonObject"/>.
            </summary>
            <remarks>This is a low-level API intended for use by other APIs. It has been optimized for performance and 
            is not intended to be called directly from user code.</remarks>
            <param name="nameValuePairs">The collection of query string name-value pairs parsed in lexical order. Both names
            and values must be un-escaped so that they don't contain any <see cref="T:System.Uri"/> encoding.</param>
            <param name="maxDepth">The maximum depth of object graph encoded as <c>x-www-form-urlencoded</c>.</param>
            <param name="throwOnError">Indicates whether to throw an exception on error or return false</param>
            <returns>The <see cref="T:System.Json.JsonObject"/> corresponding to the given query string values.</returns>
        </member>
        <member name="T:System.Json.FormUrlEncodedJson.ArrayCandidate">
            <summary>
            Class that wraps key-value pairs.
            </summary>
            <remarks>
            This use of this class avoids a FxCop warning CA908 which happens if using various generic types.
            </remarks>
        </member>
        <member name="M:System.Json.FormUrlEncodedJson.ArrayCandidate.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Json.FormUrlEncodedJson.ArrayCandidate"/> class.
            </summary>
            <param name="key">The key of this <see cref="T:System.Json.FormUrlEncodedJson.ArrayCandidate"/> instance.</param>
            <param name="value">The value of this <see cref="T:System.Json.FormUrlEncodedJson.ArrayCandidate"/> instance.</param>
        </member>
        <member name="P:System.Json.FormUrlEncodedJson.ArrayCandidate.Key">
            <summary>
            Gets or sets the key of this <see cref="T:System.Json.FormUrlEncodedJson.ArrayCandidate"/> instance.
            </summary>
            <value>
            The key of this <see cref="T:System.Json.FormUrlEncodedJson.ArrayCandidate"/> instance.
            </value>
        </member>
        <member name="P:System.Json.FormUrlEncodedJson.ArrayCandidate.Value">
            <summary>
            Gets or sets the value of this <see cref="T:System.Json.FormUrlEncodedJson.ArrayCandidate"/> instance.
            </summary>
            <value>
            The value of this <see cref="T:System.Json.FormUrlEncodedJson.ArrayCandidate"/> instance.
            </value>
        </member>
        <member name="T:System.Json.JsonArray">
            <summary>
            A JsonArray is an ordered sequence of zero or more <see cref="T:System.Json.JsonValue"/> objects.
            </summary>
        </member>
        <member name="T:System.Json.JsonValue">
            <summary>
            This is the base class for JavaScript Object Notation (JSON) common language runtime (CLR) types. 
            </summary>
        </member>
        <member name="M:System.Json.JsonValue.Parse(System.String)">
            <summary>
            Deserializes text-based JSON into a JSON CLR type.
            </summary>
            <param name="json">The text-based JSON to be parsed into a JSON CLR type.</param>
            <returns>The <see cref="T:System.Json.JsonValue"/> object that represents the parsed
            text-based JSON as a CLR type.</returns>
            <exception cref="T:System.ArgumentException">The length of jsonString is zero.</exception>
            <exception cref="T:System.ArgumentNullException">jsonString is null.</exception>
            <remarks>The result will be an instance of either <see cref="T:System.Json.JsonArray"/>,
            <see cref="T:System.Json.JsonObject"/> or <see cref="T:System.Json.JsonPrimitive"/>,
            depending on the text-based JSON supplied to the method.</remarks>
        </member>
        <member name="M:System.Json.JsonValue.Load(System.IO.TextReader)">
            <summary>
            Deserializes text-based JSON from a text reader into a JSON CLR type.
            </summary>
            <param name="textReader">A <see cref="T:System.IO.TextReader"/> over text-based JSON content.</param>
            <returns>The <see cref="T:System.Json.JsonValue"/> object that represents the parsed
            text-based JSON as a CLR type.</returns>
            <exception cref="T:System.ArgumentNullException">textReader is null.</exception>
            <remarks>The result will be an instance of either <see cref="T:System.Json.JsonArray"/>,
            <see cref="T:System.Json.JsonObject"/> or <see cref="T:System.Json.JsonPrimitive"/>,
            depending on the text-based JSON supplied to the method.</remarks>
        </member>
        <member name="M:System.Json.JsonValue.Load(System.IO.Stream)">
            <summary>
            Deserializes text-based JSON from a stream into a JSON CLR type.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> that contains text-based JSON content.</param>
            <returns>The <see cref="T:System.Json.JsonValue"/> object that represents the parsed
            text-based JSON as a CLR type.</returns>
            <exception cref="T:System.ArgumentNullException">stream is null.</exception>
            <remarks>The result will be an instance of either <see cref="T:System.Json.JsonArray"/>,
            <see cref="T:System.Json.JsonObject"/> or <see cref="T:System.Json.JsonPrimitive"/>,
            depending on the text-based JSON supplied to the method.</remarks>
        </member>
        <member name="M:System.Json.JsonValue.op_Explicit(System.Json.JsonValue)~System.String">
            <summary>
            Enables explicit casts from an instance of type <see cref="T:System.Json.JsonValue"/> to a <see cref="T:System.String"/> object.
            </summary>
            <param name="value">The instance of <see cref="T:System.Json.JsonValue"/> used to initialize the <see cref="T:System.String"/> object.</param>
            <returns>The <see cref="T:System.String"/> initialized with the <see cref="T:System.Json.JsonValue"/> value specified or null if value is null.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Explicit(System.Json.JsonValue)~System.Double">
            <summary>
            Enables explicit casts from an instance of type <see cref="T:System.Json.JsonValue"/> to a <see cref="T:System.Double"/> object.
            </summary>
            <param name="value">The instance of <see cref="T:System.Json.JsonValue"/> used to initialize the <see cref="T:System.Double"/> object.</param>
            <returns>The <see cref="T:System.Double"/> initialized with the <see cref="T:System.Json.JsonValue"/> value specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Explicit(System.Json.JsonValue)~System.Single">
            <summary>
            Enables explicit casts from an instance of type <see cref="T:System.Json.JsonValue"/> to a <see cref="T:System.Single"/> object.
            </summary>
            <param name="value">The instance of <see cref="T:System.Json.JsonValue"/> used to initialize the <see cref="T:System.Single"/> object.</param>
            <returns>The <see cref="T:System.Single"/> initialized with the <see cref="T:System.Json.JsonValue"/> value specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Explicit(System.Json.JsonValue)~System.Decimal">
            <summary>
            Enables explicit casts from an instance of type <see cref="T:System.Json.JsonValue"/> to a <see cref="T:System.Decimal"/> object.
            </summary>
            <param name="value">The instance of <see cref="T:System.Json.JsonValue"/> used to initialize the <see cref="T:System.Decimal"/> object.</param>
            <returns>The <see cref="T:System.Decimal"/> initialized with the <see cref="T:System.Json.JsonValue"/> value specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Explicit(System.Json.JsonValue)~System.Int64">
            <summary>
            Enables explicit casts from an instance of type <see cref="T:System.Json.JsonValue"/> to a <see cref="T:System.Int64"/> object.
            </summary>
            <param name="value">The instance of <see cref="T:System.Json.JsonValue"/> used to initialize the <see cref="T:System.Int64"/> object.</param>
            <returns>The <see cref="T:System.Int64"/> initialized with the <see cref="T:System.Json.JsonValue"/> value specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Explicit(System.Json.JsonValue)~System.UInt64">
            <summary>
            Enables explicit casts from an instance of type <see cref="T:System.Json.JsonValue"/> to a <see cref="T:System.UInt64"/> object.
            </summary>
            <param name="value">The instance of <see cref="T:System.Json.JsonValue"/> used to initialize the <see cref="T:System.UInt64"/> object.</param>
            <returns>The <see cref="T:System.UInt64"/> initialized with the <see cref="T:System.Json.JsonValue"/> value specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Explicit(System.Json.JsonValue)~System.Int32">
            <summary>
            Enables explicit casts from an instance of type <see cref="T:System.Json.JsonValue"/> to a <see cref="T:System.Int32"/> object.
            </summary>
            <param name="value">The instance of <see cref="T:System.Json.JsonValue"/> used to initialize the <see cref="T:System.Int32"/> object.</param>
            <returns>The <see cref="T:System.Int32"/> initialized with the <see cref="T:System.Json.JsonValue"/> value specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Explicit(System.Json.JsonValue)~System.UInt32">
            <summary>
            Enables explicit casts from an instance of type <see cref="T:System.Json.JsonValue"/> to a <see cref="T:System.UInt32"/> object.
            </summary>
            <param name="value">The instance of <see cref="T:System.Json.JsonValue"/> used to initialize the <see cref="T:System.UInt32"/> object.</param>
            <returns>The <see cref="T:System.UInt32"/> initialized with the <see cref="T:System.Json.JsonValue"/> value specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Explicit(System.Json.JsonValue)~System.Int16">
            <summary>
            Enables explicit casts from an instance of type <see cref="T:System.Json.JsonValue"/> to a <see cref="T:System.Int16"/> object.
            </summary>
            <param name="value">The instance of <see cref="T:System.Json.JsonValue"/> used to initialize the <see cref="T:System.Int16"/> object.</param>
            <returns>The <see cref="T:System.Int16"/> initialized with the <see cref="T:System.Json.JsonValue"/> value specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Explicit(System.Json.JsonValue)~System.UInt16">
            <summary>
            Enables explicit casts from an instance of type <see cref="T:System.Json.JsonValue"/> to a <see cref="T:System.UInt16"/> object.
            </summary>
            <param name="value">The instance of <see cref="T:System.Json.JsonValue"/> used to initialize the <see cref="T:System.UInt16"/> object.</param>
            <returns>The <see cref="T:System.UInt16"/> initialized with the <see cref="T:System.Json.JsonValue"/> value specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Explicit(System.Json.JsonValue)~System.SByte">
            <summary>
            Enables explicit casts from an instance of type <see cref="T:System.Json.JsonValue"/> to a <see cref="T:System.SByte"/> object.
            </summary>
            <param name="value">The instance of <see cref="T:System.Json.JsonValue"/> used to initialize the <see cref="T:System.SByte"/> object.</param>
            <returns>The <see cref="T:System.SByte"/> initialized with the <see cref="T:System.Json.JsonValue"/> value specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Explicit(System.Json.JsonValue)~System.Byte">
            <summary>
            Enables explicit casts from an instance of type <see cref="T:System.Json.JsonValue"/> to a <see cref="T:System.Byte"/> object.
            </summary>
            <param name="value">The instance of <see cref="T:System.Json.JsonValue"/> used to initialize the <see cref="T:System.Byte"/> object.</param>
            <returns>The <see cref="T:System.Byte"/> initialized with the <see cref="T:System.Json.JsonValue"/> value specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Explicit(System.Json.JsonValue)~System.Uri">
            <summary>
            Enables explicit casts from an instance of type <see cref="T:System.Json.JsonValue"/> to a <see cref="T:System.Uri"/> object.
            </summary>
            <param name="value">The instance of <see cref="T:System.Json.JsonValue"/> used to initialize the <see cref="T:System.Uri"/> object.</param>
            <returns>The <see cref="T:System.Uri"/> initialized with the <see cref="T:System.Json.JsonValue"/> value specified or null if value is null.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Explicit(System.Json.JsonValue)~System.Guid">
            <summary>
            Enables explicit casts from an instance of type <see cref="T:System.Json.JsonValue"/> to a <see cref="T:System.Guid"/> object.
            </summary>
            <param name="value">The instance of <see cref="T:System.Json.JsonValue"/> used to initialize the <see cref="T:System.Guid"/> object.</param>
            <returns>The <see cref="T:System.Guid"/> initialized with the <see cref="T:System.Json.JsonValue"/> value specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Explicit(System.Json.JsonValue)~System.DateTime">
            <summary>
            Enables explicit casts from an instance of type <see cref="T:System.Json.JsonValue"/> to a <see cref="T:System.DateTime"/> object.
            </summary>
            <param name="value">The instance of <see cref="T:System.Json.JsonValue"/> used to initialize the <see cref="T:System.DateTime"/> object.</param>
            <returns>The <see cref="T:System.DateTime"/> initialized with the <see cref="T:System.Json.JsonValue"/> value specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Explicit(System.Json.JsonValue)~System.Char">
            <summary>
            Enables explicit casts from an instance of type <see cref="T:System.Json.JsonValue"/> to a <see cref="T:System.Char"/> object.
            </summary>
            <param name="value">The instance of <see cref="T:System.Json.JsonValue"/> used to initialize the <see cref="T:System.Char"/> object.</param>
            <returns>The <see cref="T:System.Char"/> initialized with the <see cref="T:System.Json.JsonValue"/> value specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Explicit(System.Json.JsonValue)~System.Boolean">
            <summary>
            Enables explicit casts from an instance of type <see cref="T:System.Json.JsonValue"/> to a <see cref="T:System.Boolean"/> object.
            </summary>
            <param name="value">The instance of <see cref="T:System.Json.JsonValue"/> used to initialize the <see cref="T:System.Boolean"/> object.</param>
            <returns>The <see cref="T:System.Boolean"/> initialized with the <see cref="T:System.Json.JsonValue"/> value specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Explicit(System.Json.JsonValue)~System.DateTimeOffset">
            <summary>
            Enables explicit casts from an instance of type <see cref="T:System.Json.JsonValue"/> to a <see cref="T:System.DateTimeOffset"/> object.
            </summary>
            <param name="value">The instance of <see cref="T:System.Json.JsonValue"/> used to initialize the <see cref="T:System.DateTimeOffset"/> object.</param>
            <returns>The <see cref="T:System.DateTimeOffset"/> initialized with the <see cref="T:System.Json.JsonValue"/> value specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Implicit(System.Boolean)~System.Json.JsonValue">
            <summary>
            Enables implicit casts from type <see cref="T:System.Boolean"/> to a <see cref="T:System.Json.JsonPrimitive"/>.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> instance used to initialize the <see cref="T:System.Json.JsonPrimitive"/>.</param>
            <returns>The <see cref="T:System.Json.JsonValue"/> initialized with the <see cref="T:System.Boolean"/> specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Implicit(System.Byte)~System.Json.JsonValue">
            <summary>
            Enables implicit casts from type <see cref="T:System.Byte"/> to a <see cref="T:System.Json.JsonPrimitive"/>.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> instance used to initialize the <see cref="T:System.Json.JsonPrimitive"/>.</param>
            <returns>The <see cref="T:System.Json.JsonValue"/> initialized with the <see cref="T:System.Byte"/> specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Implicit(System.Decimal)~System.Json.JsonValue">
            <summary>
            Enables implicit casts from type <see cref="T:System.Decimal"/> to a <see cref="T:System.Json.JsonPrimitive"/>.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> instance used to initialize the <see cref="T:System.Json.JsonPrimitive"/>.</param>
            <returns>The <see cref="T:System.Json.JsonValue"/> initialized with the <see cref="T:System.Decimal"/> specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Implicit(System.Double)~System.Json.JsonValue">
            <summary>
            Enables implicit casts from type <see cref="T:System.Double"/> to a <see cref="T:System.Json.JsonPrimitive"/>.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> instance used to initialize the <see cref="T:System.Json.JsonPrimitive"/>.</param>
            <returns>The <see cref="T:System.Json.JsonValue"/> initialized with the <see cref="T:System.Double"/> specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Implicit(System.Int16)~System.Json.JsonValue">
            <summary>
            Enables implicit casts from type <see cref="T:System.Int16"/> to a <see cref="T:System.Json.JsonPrimitive"/>.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> instance used to initialize the <see cref="T:System.Json.JsonPrimitive"/>.</param>
            <returns>The <see cref="T:System.Json.JsonValue"/> initialized with the <see cref="T:System.Int16"/> specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Implicit(System.Int32)~System.Json.JsonValue">
            <summary>
            Enables implicit casts from type <see cref="T:System.Int32"/> to a <see cref="T:System.Json.JsonPrimitive"/>.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> instance used to initialize the <see cref="T:System.Json.JsonPrimitive"/>.</param>
            <returns>The <see cref="T:System.Json.JsonValue"/> initialized with the <see cref="T:System.Int32"/> specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Implicit(System.Int64)~System.Json.JsonValue">
            <summary>
            Enables implicit casts from type <see cref="T:System.Int64"/> to a <see cref="T:System.Json.JsonPrimitive"/>.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> instance used to initialize the <see cref="T:System.Json.JsonPrimitive"/>.</param>
            <returns>The <see cref="T:System.Json.JsonValue"/> initialized with the <see cref="T:System.Int64"/> specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Implicit(System.Single)~System.Json.JsonValue">
            <summary>
            Enables implicit casts from type <see cref="T:System.Single"/> to a <see cref="T:System.Json.JsonPrimitive"/>.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> instance used to initialize the <see cref="T:System.Json.JsonPrimitive"/>.</param>
            <returns>The <see cref="T:System.Json.JsonValue"/> initialized with the <see cref="T:System.Single"/> specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Implicit(System.String)~System.Json.JsonValue">
            <summary>
            Enables implicit casts from type <see cref="T:System.String"/> to a <see cref="T:System.Json.JsonPrimitive"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> instance used to initialize the <see cref="T:System.Json.JsonPrimitive"/>.</param>
            <returns>The <see cref="T:System.Json.JsonValue"/> initialized with the <see cref="T:System.String"/> specified, or null if the value is null.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Implicit(System.Char)~System.Json.JsonValue">
            <summary>
            Enables implicit casts from type <see cref="T:System.Char"/> to a <see cref="T:System.Json.JsonPrimitive"/>.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> instance used to initialize the <see cref="T:System.Json.JsonPrimitive"/>.</param>
            <returns>The <see cref="T:System.Json.JsonValue"/> initialized with the <see cref="T:System.Char"/> specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Implicit(System.DateTime)~System.Json.JsonValue">
            <summary>
            Enables implicit casts from type <see cref="T:System.DateTime"/> to a <see cref="T:System.Json.JsonPrimitive"/>.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> instance used to initialize the <see cref="T:System.Json.JsonPrimitive"/>.</param>
            <returns>The <see cref="T:System.Json.JsonValue"/> initialized with the <see cref="T:System.DateTime"/> specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Implicit(System.Guid)~System.Json.JsonValue">
            <summary>
            Enables implicit casts from type <see cref="T:System.Guid"/> to a <see cref="T:System.Json.JsonPrimitive"/>.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> instance used to initialize the <see cref="T:System.Json.JsonPrimitive"/>.</param>
            <returns>The <see cref="T:System.Json.JsonValue"/> initialized with the <see cref="T:System.Guid"/> specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Implicit(System.Uri)~System.Json.JsonValue">
            <summary>
            Enables implicit casts from type <see cref="T:System.Uri"/> to a <see cref="T:System.Json.JsonPrimitive"/>.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> instance used to initialize the <see cref="T:System.Json.JsonPrimitive"/>.</param>
            <returns>The <see cref="T:System.Json.JsonValue"/> initialized with the <see cref="T:System.Uri"/> specified, or null if the value is null.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Implicit(System.SByte)~System.Json.JsonValue">
            <summary>
            Enables implicit casts from type <see cref="T:System.SByte"/> to a <see cref="T:System.Json.JsonPrimitive"/>.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> instance used to initialize the <see cref="T:System.Json.JsonPrimitive"/>.</param>
            <returns>The <see cref="T:System.Json.JsonValue"/> initialized with the <see cref="T:System.SByte"/> specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Implicit(System.UInt16)~System.Json.JsonValue">
            <summary>
            Enables implicit casts from type <see cref="T:System.UInt16"/> to a <see cref="T:System.Json.JsonPrimitive"/>.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> instance used to initialize the <see cref="T:System.Json.JsonPrimitive"/>.</param>
            <returns>The <see cref="T:System.Json.JsonValue"/> initialized with the <see cref="T:System.UInt16"/> specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Implicit(System.UInt32)~System.Json.JsonValue">
            <summary>
            Enables implicit casts from type <see cref="T:System.UInt32"/> to a <see cref="T:System.Json.JsonPrimitive"/>.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> instance used to initialize the <see cref="T:System.Json.JsonPrimitive"/>.</param>
            <returns>The <see cref="T:System.Json.JsonValue"/> initialized with the <see cref="T:System.UInt32"/> specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Implicit(System.UInt64)~System.Json.JsonValue">
            <summary>
            Enables implicit casts from type <see cref="T:System.UInt64"/> to a <see cref="T:System.Json.JsonPrimitive"/>.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> instance used to initialize the <see cref="T:System.Json.JsonPrimitive"/>.</param>
            <returns>The <see cref="T:System.Json.JsonValue"/> initialized with the <see cref="T:System.UInt64"/> specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.op_Implicit(System.DateTimeOffset)~System.Json.JsonValue">
            <summary>
            Enables implicit casts from type <see cref="T:System.DateTimeOffset"/> to a <see cref="T:System.Json.JsonPrimitive"/>.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> instance used to initialize the <see cref="T:System.Json.JsonPrimitive"/>.</param>
            <returns>The <see cref="T:System.Json.JsonValue"/> initialized with the <see cref="T:System.DateTimeOffset"/> specified.</returns>
        </member>
        <member name="M:System.Json.JsonValue.CastValue``1(System.Json.JsonValue)">
            <summary>
            Performs a cast operation from a <see cref="T:System.Json.JsonValue"/> instance into the specified type parameter./&gt;
            </summary>
            <typeparam name="T">The type to cast the instance to.</typeparam>
            <param name="value">The <see cref="T:System.Json.JsonValue"/> instance.</param>
            <returns>An object of type T initialized with the <see cref="T:System.Json.JsonValue"/> value specified.</returns>
            <remarks>This method is to support the framework and is not intended to be used externally, use explicit type cast instead.</remarks>
        </member>
        <member name="M:System.Json.JsonValue.GetEnumerator">
            <summary>
            Returns an enumerator which iterates through the values in this object.
            </summary>
            <returns>An enumerator which which iterates through the values in this object.</returns>
            <remarks>The enumerator returned by this class is empty; subclasses will override this method to return appropriate enumerators for themselves.</remarks>
        </member>
        <member name="M:System.Json.JsonValue.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator which iterates through the values in this object.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> which iterates through the values in this object.</returns>
            <remarks>The enumerator returned by this class is empty; subclasses will override this method to return appropriate enumerators for themselves.</remarks>
        </member>
        <member name="M:System.Json.JsonValue.AsDynamic">
            <summary>
            Gets this instance as a <code>dynamic</code> object.
            </summary>
            <returns>This instance as <code>dynamic</code>.</returns>
        </member>
        <member name="M:System.Json.JsonValue.TryReadAs``1(``0@)">
            <summary>
            Attempts to convert this <see cref="T:System.Json.JsonValue"/> instance into the type T.
            </summary>
            <typeparam name="T">The type to which the conversion is being performed.</typeparam>
            <param name="valueOfT">An instance of T initialized with this instance, or the default value of T if the conversion cannot be performed.</param>
            <returns>true if this <see cref="T:System.Json.JsonValue"/> instance can be read as type T; otherwise, false.</returns>
        </member>
        <member name="M:System.Json.JsonValue.ReadAs``1">
            <summary>
            Attempts to convert this <see cref="T:System.Json.JsonValue"/> instance into the type T.
            </summary>
            <typeparam name="T">The type to which the conversion is being performed.</typeparam>
            <returns>An instance of T initialized with the value from the conversion of this instance.</returns>
            <exception cref="T:System.NotSupportedException">If this <see cref="T:System.Json.JsonValue"/> value cannot be converted into the type T.</exception>
        </member>
        <member name="M:System.Json.JsonValue.ReadAs``1(``0)">
            <summary>
            Attempts to convert this <see cref="T:System.Json.JsonValue"/> instance into the type T.
            </summary>
            <typeparam name="T">The type to which the conversion is being performed.</typeparam>
            <param name="fallback">The fallback value to be returned if the conversion cannot be made.</param>
            <returns>An instance of T initialized with the value from the conversion of this instance, or the specified fallback value if the conversion cannot be made.</returns>
        </member>
        <member name="M:System.Json.JsonValue.ReadAs(System.Type,System.Object)">
            <summary>
            Attempts to convert this <see cref="T:System.Json.JsonValue"/> instance to an instance of the specified type.
            </summary>
            <param name="type">The type to which the conversion is being performed.</param>
            <param name="fallback">The fallback value to be returned if the conversion cannot be made.</param>
            <returns>An instance of the specified type initialized with the value from the conversion of this instance, or the specified fallback value if the conversion cannot be made.</returns>
        </member>
        <member name="M:System.Json.JsonValue.ReadAs(System.Type)">
            <summary>
            Attempts to convert this <see cref="T:System.Json.JsonValue"/> instance into an instance of the specified type.
            </summary>
            <param name="type">The type to which the conversion is being performed.</param>
            <returns>An instance of the specified type initialized with the value from the conversion of this instance.</returns>
            <exception cref="T:System.NotSupportedException">If this <see cref="T:System.Json.JsonValue"/> value cannot be converted into the type T.</exception>
        </member>
        <member name="M:System.Json.JsonValue.TryReadAs(System.Type,System.Object@)">
            <summary>
            Attempts to convert this <see cref="T:System.Json.JsonValue"/> instance into an instance of the specified type.
            </summary>
            <param name="type">The type to which the conversion is being performed.</param>
            <param name="value">An object to be initialized with this instance or null if the conversion cannot be performed.</param>
            <returns>true if this <see cref="T:System.Json.JsonValue"/> instance can be read as the specified type; otherwise, false.</returns>
        </member>
        <member name="M:System.Json.JsonValue.Save(System.IO.Stream)">
            <summary>
            Writes this <see cref="T:System.Json.JsonValue"/> instance to a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream to which to write text-based JSON.</param>
        </member>
        <member name="M:System.Json.JsonValue.Save(System.IO.Stream,System.Json.JsonSaveOptions)">
            <summary>
            Writes this <see cref="T:System.Json.JsonValue"/> instance to a <see cref="T:System.IO.Stream"/> using the provided <see cref="T:System.Json.JsonSaveOptions"/>.
            </summary>
            <param name="stream">Stream to which to write text-based JSON.</param>
            <param name="options">The <see cref="T:System.Json.JsonSaveOptions"/> serialization options.</param>
        </member>
        <member name="M:System.Json.JsonValue.Save(System.IO.TextWriter)">
            <summary>
            Writes <see cref="T:System.Json.JsonValue"/> instance to a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write text-based JSON.</param>
        </member>
        <member name="M:System.Json.JsonValue.Save(System.IO.TextWriter,System.Json.JsonSaveOptions)">
            <summary>
            Writes this <see cref="T:System.Json.JsonValue"/> instance to a <see cref="T:System.IO.TextWriter"/> using the provided <see cref="T:System.Json.JsonSaveOptions"/>.
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write text-based JSON.</param>
            <param name="options">The <see cref="T:System.Json.JsonSaveOptions"/> serialization options.</param>
        </member>
        <member name="M:System.Json.JsonValue.ToString">
            <summary>
            Provides a textual representation of this <see cref="T:System.Json.JsonValue"/> instance.
            </summary>
            <returns>A <see cref="T:System.String"/> containing text-based JSON.</returns>
        </member>
        <member name="M:System.Json.JsonValue.ToString(System.Json.JsonSaveOptions)">
            <summary>
            Provides a textual representation of this <see cref="T:System.Json.JsonValue"/> instance using the provided <see cref="T:System.Json.JsonSaveOptions"/>.
            </summary>
            <param name="options">A combination of <see cref="T:System.Json.JsonSaveOptions"/> values that specifies the formatting behavior.</param>
            <returns>A <see cref="T:System.String"/> containing text-based JSON formatted according to the <paramref name="options"/>.</returns>
        </member>
        <member name="M:System.Json.JsonValue.ContainsKey(System.String)">
            <summary>
            Checks whether a key/value pair with a specified key exists in the JSON CLR object type.
            </summary>
            <param name="key">The key to check for.</param>
            <returns>false in this class; subclasses may override this method to return other values.</returns>
            <remarks>This method is overloaded in the implementation of the <see cref="T:System.Json.JsonObject"/>
            class, which inherits from this class.</remarks>
        </member>
        <member name="M:System.Json.JsonValue.GetValue(System.String)">
            <summary>
            Returns the value returned by the safe string indexer for this instance.
            </summary>
            <param name="key">The key of the element to get.</param>
            <returns>If this is an instance of <see cref="T:System.Json.JsonObject"/>, it contains
            the given key and the value corresponding to the key is not null, then it will return that value.
            Otherwise it will return a <see cref="T:System.Json.JsonValue"/> instance with <see cref="P:System.Json.JsonValue.JsonType"/>
            equals to <see cref="F:System.Json.JsonType.Default"/>.</returns>
        </member>
        <member name="M:System.Json.JsonValue.GetValue(System.Int32)">
            <summary>
            Returns the value returned by the safe int indexer for this instance.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>If this is an instance of <see cref="T:System.Json.JsonArray"/>, the index is within the array
            bounds, and the value corresponding to the index is not null, then it will return that value.
            Otherwise it will return a <see cref="T:System.Json.JsonValue"/> instance with <see cref="P:System.Json.JsonValue.JsonType"/>
            equals to <see cref="F:System.Json.JsonType.Default"/>.</returns>
        </member>
        <member name="M:System.Json.JsonValue.SetValue(System.String,System.Object)">
            <summary>
            Sets the value and returns it.
            </summary>
            <param name="key">The key of the element to set.</param>
            <param name="value">The value to be set.</param>
            <returns>The value, converted into a JsonValue, set in this collection.</returns>
            <exception cref="T:System.ArgumentException">If the value cannot be converted into a JsonValue.</exception>
        </member>
        <member name="M:System.Json.JsonValue.SetValue(System.Int32,System.Object)">
            <summary>
            Sets the value and returns it.
            </summary>
            <param name="index">The zero-based index of the element to set.</param>
            <param name="value">The value to be set.</param>
            <returns>The value, converted into a JsonValue, set in this collection.</returns>
            <exception cref="T:System.ArgumentException">If the value cannot be converted into a JsonValue.</exception>
        </member>
        <member name="M:System.Json.JsonValue.ValueOrDefault(System.String)">
            <summary>
            Safe string indexer for the <see cref="T:System.Json.JsonValue"/> type. 
            </summary>
            <param name="key">The key of the element to get.</param>
            <returns>If this is an instance of <see cref="T:System.Json.JsonObject"/>, it contains
            the given key and the value corresponding to the key is not null, then it will return that value.
            Otherwise it will return a <see cref="T:System.Json.JsonValue"/> instance with <see cref="P:System.Json.JsonValue.JsonType"/>
            equals to <see cref="F:System.Json.JsonType.Default"/>.</returns>
        </member>
        <member name="M:System.Json.JsonValue.ValueOrDefault(System.Int32)">
            <summary>
            Safe indexer for the <see cref="T:System.Json.JsonValue"/> type. 
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>If this is an instance of <see cref="T:System.Json.JsonArray"/>, the index is within the array
            bounds, and the value corresponding to the index is not null, then it will return that value.
            Otherwise it will return a <see cref="T:System.Json.JsonValue"/> instance with <see cref="P:System.Json.JsonValue.JsonType"/>
            equals to <see cref="F:System.Json.JsonType.Default"/>.</returns>
        </member>
        <member name="M:System.Json.JsonValue.ValueOrDefault(System.Object[])">
            <summary>
            Safe deep indexer for the <see cref="T:System.Json.JsonValue"/> type.
            </summary>
            <param name="indexes">The indices to index this type. The indices can be
            of type <see cref="T:System.Int32"/> or <see cref="T:System.String"/>.</param>
            <returns>A <see cref="T:System.Json.JsonValue"/> which is equivalent to calling<see cref="M:System.Json.JsonValue.ValueOrDefault(System.Int32)"/> or
            <see cref="M:System.Json.JsonValue.ValueOrDefault(System.String)"/> on the first index, then calling it again on the result
            for the second index and so on.</returns>
            <exception cref="T:System.ArgumentException">If any of the indices is not of type
            <see cref="T:System.Int32"/> or <see cref="T:System.String"/>.</exception>
        </member>
        <member name="M:System.Json.JsonValue.ResolveObject(System.Object)">
            <summary>
            Resolves the specified object to an appropriate JsonValue instance.
            </summary>
            <param name="value">The object to resolve.</param>
            <returns>A <see cref="T:System.Json.JsonValue"/> instance resolved from the specified object.</returns>
        </member>
        <member name="M:System.Json.JsonValue.IsSupportedExplicitCastType(System.Type)">
            <summary>
            Determines whether an explicit cast to JsonValue is provided from the specified type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>true if an explicit cast exists for the specified type, false otherwise.</returns>
        </member>
        <member name="M:System.Json.JsonValue.Read">
            <summary>
            Returns the value this object wraps (if any).
            </summary>
            <returns>The value wrapped by this instance or null if none.</returns>
        </member>
        <member name="M:System.Json.JsonValue.Save(System.Xml.XmlDictionaryWriter)">
            <summary>
            Serializes this object into the specified <see cref="T:System.Xml.XmlDictionaryWriter"/> instance.
            </summary>
            <param name="jsonWriter">An <see cref="T:System.Xml.XmlDictionaryWriter"/> instance to serialize this instance into.</param>
        </member>
        <member name="M:System.Json.JsonValue.GetKeyValuePairEnumerator">
            <summary>
            Returns an enumerator which iterates through the values in this object.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> which iterates through the values in this object.</returns>
            <remarks>This method is the virtual version of the IEnumerator.GetEnumerator method and is provided to allow derived classes to implement the 
            appropriate version of the generic interface (enumerator of values or key/value pairs).</remarks>
        </member>
        <member name="M:System.Json.JsonValue.WriteStartElementAndGetNext(System.Xml.XmlDictionaryWriter,System.Int32)">
            <summary>
            Callback method called during Save operations to let the instance write the start element
            and return the next element in the collection.
            </summary>
            <param name="jsonWriter">The JXML writer used to write JSON.</param>
            <param name="index">The index within this collection.</param>
            <returns>The next item in the collection, or null of there are no more items.</returns>
        </member>
        <member name="M:System.Json.JsonValue.WriteAttributeString(System.Xml.XmlDictionaryWriter)">
            <summary>
            Callback method called to let an instance write the proper JXML attribute when saving this
            instance.
            </summary>
            <param name="jsonWriter">The JXML writer used to write JSON.</param>
        </member>
        <member name="M:System.Json.JsonValue.OnSaveStarted">
            <summary>
            Callback method called when a Save operation is starting for this instance.
            </summary>
        </member>
        <member name="M:System.Json.JsonValue.OnSaveEnded">
            <summary>
            Callback method called when a Save operation is finished for this instance.
            </summary>
        </member>
        <member name="M:System.Json.JsonValue.RaiseChangingEvent(System.Object,System.Json.JsonValueChangeEventArgs)">
            <summary>
            Called internally to raise the <see cref="E:System.Json.JsonValue.Changing"/> event.
            </summary>
            <param name="sender">The object which caused the event to be raised.</param>
            <param name="eventArgs">The arguments to the event.</param>
        </member>
        <member name="M:System.Json.JsonValue.RaiseChangedEvent(System.Object,System.Json.JsonValueChangeEventArgs)">
            <summary>
            Called internally to raise the <see cref="E:System.Json.JsonValue.Changed"/> event.
            </summary>
            <param name="sender">The object which caused the event to be raised.</param>
            <param name="eventArgs">The arguments to the event.</param>
        </member>
        <member name="E:System.Json.JsonValue.Changing">
            <summary>
            Raised when this <see cref="T:System.Json.JsonValue"/> or any of its members are about to be changed.
            </summary>
            <remarks><p>Events are raised when elements are added or removed to <see cref="T:System.Json.JsonValue"/>
            instances. It applies to both complex descendants of <see cref="T:System.Json.JsonValue"/>: <see cref="T:System.Json.JsonArray"/>
            and <see cref="T:System.Json.JsonObject"/>.</p>
            <p>You should be careful when modifying a <see cref="T:System.Json.JsonValue"/> tree within one of these events,
            because doing this might lead to unexpected results. For example, if you receive a Changing event, and while
            the event is being processed you remove the node from the tree, you might not receive the Changed event. When
            an event is being processed, it is valid to modify a tree other than the one that contains the node that is
            receiving the event; it is even valid to modify the same tree provided the modifications do not affect the
            specific nodes on which the event was raised. However, if you modify the area of the tree that contains the
            node receiving the event, the events that you receive and the impact to the tree are undefined.</p></remarks>
        </member>
        <member name="E:System.Json.JsonValue.Changed">
            <summary>
            Raised when this <see cref="T:System.Json.JsonValue"/> or any of its members have changed.
            </summary>
            <remarks><p>Events are raised when elements are added or removed to <see cref="T:System.Json.JsonValue"/>
            instances. It applies to both complex descendants of <see cref="T:System.Json.JsonValue"/>: <see cref="T:System.Json.JsonArray"/>
            and <see cref="T:System.Json.JsonObject"/>.</p>
            <p>You should be careful when modifying a <see cref="T:System.Json.JsonValue"/> tree within one of these events,
            because doing this might lead to unexpected results. For example, if you receive a Changing event, and while
            the event is being processed you remove the node from the tree, you might not receive the Changed event. When
            an event is being processed, it is valid to modify a tree other than the one that contains the node that is
            receiving the event; it is even valid to modify the same tree provided the modifications do not affect the
            specific nodes on which the event was raised. However, if you modify the area of the tree that contains the
            node receiving the event, the events that you receive and the impact to the tree are undefined.</p></remarks>
        </member>
        <member name="P:System.Json.JsonValue.JsonType">
            <summary>
            Gets the JSON CLR type represented by this instance.
            </summary>
        </member>
        <member name="P:System.Json.JsonValue.Count">
            <summary>
            Gets the number of items in this object.
            </summary>
        </member>
        <member name="P:System.Json.JsonValue.ChangingListenersCount">
            <summary>
            Gets the number of listeners to the <see cref="E:System.Json.JsonValue.Changing"/> event for this instance.
            </summary>
        </member>
        <member name="P:System.Json.JsonValue.ChangedListenersCount">
            <summary>
            Gets the number of listeners to the <see cref="E:System.Json.JsonValue.Changed"/> event for this instance.
            </summary>
        </member>
        <member name="P:System.Json.JsonValue.DefaultInstance">
            <summary>
            Gets the default JsonValue instance.  
            This instance enables safe-chaining of JsonValue operations and resolves to 'null'
            when this instance is used as dynamic, mapping to the JavaScript 'null' value.
            </summary>
        </member>
        <member name="P:System.Json.JsonValue.Item(System.String)">
            <summary>
            This indexer is not supported for this base class and throws an exception.
            </summary>
            <param name="key">The key of the element to get or set.</param>
            <returns><see cref="T:System.Json.JsonValue"/>.</returns>
            <remarks>The exception thrown is the <see cref="T:System.InvalidOperationException"/>.
            This method is overloaded in the implementation of the <see cref="T:System.Json.JsonObject"/>
            class, which inherits from this class.</remarks>
        </member>
        <member name="P:System.Json.JsonValue.Item(System.Int32)">
            <summary>
            This indexer is not supported for this base class and throws an exception.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns><see cref="T:System.Json.JsonValue"/>.</returns>
            <remarks>The exception thrown is the <see cref="T:System.InvalidOperationException"/>.
            This method is overloaded in the implementation of the <see cref="T:System.Json.JsonArray"/>
            class, which inherits from this class.</remarks>
        </member>
        <member name="M:System.Json.JsonArray.#ctor(System.Collections.Generic.IEnumerable{System.Json.JsonValue})">
            <summary>
            Creates an instance of the <see cref="T:System.Json.JsonArray"/> class initialized by
            an <see cref="T:System.Collections.Generic.IEnumerable`1"/> enumeration of
            objects of type <see cref="T:System.Json.JsonValue"/>.
            </summary>
            <param name="items">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> enumeration
            of objects of type <see cref="T:System.Json.JsonValue"/> used to initialize the JavaScript Object Notation (JSON)
            array.</param>
            <exception cref="T:System.ArgumentNullException">If items is null.</exception>
            <exception cref="T:System.ArgumentException">If any of the items in the collection
            is a <see cref="T:System.Json.JsonValue"/> with <see cref="P:System.Json.JsonValue.JsonType"/> property of
            value <see cref="F:System.Json.JsonType.Default"/>.</exception>
        </member>
        <member name="M:System.Json.JsonArray.#ctor(System.Json.JsonValue[])">
            <summary>
            Creates an instance of the <see cref="T:System.Json.JsonArray"/> class, initialized by an array of type <see cref="T:System.Json.JsonValue"/>.
            </summary>
            <param name="items">The array of type <see cref="T:System.Json.JsonValue"/> used to initialize the
            JavaScript Object Notation (JSON) array.</param>
            <exception cref="T:System.ArgumentException">If any of the items in the collection
            is a <see cref="T:System.Json.JsonValue"/> with <see cref="P:System.Json.JsonValue.JsonType"/> property of
            value <see cref="F:System.Json.JsonType.Default"/>.</exception>
        </member>
        <member name="M:System.Json.JsonArray.AddRange(System.Collections.Generic.IEnumerable{System.Json.JsonValue})">
            <summary>
            Adds the elements from a collection of type <see cref="T:System.Json.JsonValue"/> to this instance.
            </summary>
            <param name="items">Collection of items to add.</param>
            <exception cref="T:System.ArgumentNullException">If items is null.</exception>
            <exception cref="T:System.ArgumentException">If any of the items in the collection
            is a <see cref="T:System.Json.JsonValue"/> with <see cref="P:System.Json.JsonValue.JsonType"/> property of
            value <see cref="F:System.Json.JsonType.Default"/>.</exception>
        </member>
        <member name="M:System.Json.JsonArray.AddRange(System.Json.JsonValue[])">
            <summary>
            Adds the elements from an array of type <see cref="T:System.Json.JsonValue"/> to this instance.
            </summary>
            <param name="items">The array of type JsonValue to be added to this instance.</param>
            <exception cref="T:System.ArgumentNullException">If items is null.</exception>
            <exception cref="T:System.ArgumentException">If any of the items in the array
            is a <see cref="T:System.Json.JsonValue"/> with <see cref="P:System.Json.JsonValue.JsonType"/> property of
            value <see cref="F:System.Json.JsonType.Default"/>.</exception>
        </member>
        <member name="M:System.Json.JsonArray.IndexOf(System.Json.JsonValue)">
            <summary>
            Searches for a specified object and returns the zero-based index of its first
            occurrence within this <see cref="T:System.Json.JsonArray"/>.
            </summary>
            <param name="item">The <see cref="T:System.Json.JsonValue"/> object to look up.</param>
            <returns>The zero-based index of the first occurrence of item within the
            <see cref="T:System.Json.JsonArray"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:System.Json.JsonArray.Insert(System.Int32,System.Json.JsonValue)">
            <summary>
            Insert a JSON CLR type into the array at a specified index.
            </summary>
            <param name="index">The zero-based index at which the item should be inserted.</param>
            <param name="item">The <see cref="T:System.Json.JsonValue"/> object to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is less than zero or larger than
            the size of the array.</exception>
            <exception cref="T:System.ArgumentException">If the object to insert has a
            <see cref="P:System.Json.JsonValue.JsonType"/> property of value
            <see cref="F:System.Json.JsonType.Default"/>.</exception>
        </member>
        <member name="M:System.Json.JsonArray.RemoveAt(System.Int32)">
            <summary>
            Remove the JSON value at a specified index of <see cref="T:System.Json.JsonArray"/>.
            </summary>
            <param name="index">The zero-based index at which to remove the <see cref="T:System.Json.JsonValue"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is less than zero or index
            is equal or larger than the size of the array.</exception>
        </member>
        <member name="M:System.Json.JsonArray.Add(System.Json.JsonValue)">
            <summary>
            Adds a <see cref="T:System.Json.JsonValue"/> object to the end of the array.
            </summary>
            <param name="item">The <see cref="T:System.Json.JsonValue"/> object to add.</param>
            <exception cref="T:System.ArgumentException">If the object to add has a
            <see cref="P:System.Json.JsonValue.JsonType"/> property of value
            <see cref="F:System.Json.JsonType.Default"/>.</exception>
        </member>
        <member name="M:System.Json.JsonArray.Clear">
            <summary>
            Removes all JSON CLR types from the <see cref="T:System.Json.JsonArray"/>.
            </summary>
        </member>
        <member name="M:System.Json.JsonArray.Contains(System.Json.JsonValue)">
            <summary>
            Checks whether a specified JSON CLR type is in the <see cref="T:System.Json.JsonArray"/>.
            </summary>
            <param name="item">The <see cref="T:System.Json.JsonValue"/> to check for in the array.</param>
            <returns>true if item is found in the <see cref="T:System.Json.JsonArray"/>; otherwise, false.</returns>
        </member>
        <member name="M:System.Json.JsonArray.CopyTo(System.Json.JsonValue[],System.Int32)">
            <summary>
            Copies the contents of the current JSON CLR array instance into a specified
            destination array beginning at the specified index.
            </summary>
            <param name="array">The destination array to which the elements of the current
            <see cref="T:System.Json.JsonArray"/> object are copied.</param>
            <param name="arrayIndex">The zero-based index in the destination array at which the
            copying of the elements of the JSON CLR array begins.</param>
        </member>
        <member name="M:System.Json.JsonArray.Remove(System.Json.JsonValue)">
            <summary>
            Removes the first occurrence of the specified JSON value from the array.
            </summary>
            <param name="item">The <see cref="T:System.Json.JsonValue"/> to remove from the <see cref="T:System.Json.JsonArray"/>.</param>
            <returns>true if item is successfully removed; otherwise, false. This method
            also returns false if item was not found in the <see cref="T:System.Json.JsonArray"/>.</returns>
        </member>
        <member name="M:System.Json.JsonArray.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:System.Json.JsonValue"/> objects in the array.
            </summary>
            <returns>Returns an <see cref="T:System.Collections.IEnumerator"/> object that
            iterates through the <see cref="T:System.Json.JsonValue"/> elements in this <see cref="T:System.Json.JsonArray"/>.</returns>
        </member>
        <member name="M:System.Json.JsonArray.ValueOrDefault(System.Int32)">
            <summary>
            Safe indexer for the <see cref="T:System.Json.JsonValue"/> type. 
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>If the index is within the array bounds and the value corresponding to the
            index is not null, then it will return that value. Otherwise it will return a
            <see cref="T:System.Json.JsonValue"/> instance with <see cref="P:System.Json.JsonValue.JsonType"/>
            equals to <see cref="F:System.Json.JsonType.Default"/>.</returns>
        </member>
        <member name="M:System.Json.JsonArray.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:System.Json.JsonValue"/> objects in the array.
            </summary>
            <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that
            iterates through the <see cref="T:System.Json.JsonValue"/> elements in this <see cref="T:System.Json.JsonArray"/>.</returns>
        </member>
        <member name="M:System.Json.JsonArray.GetKeyValuePairEnumerator">
            <summary>
            Returns an enumerator which iterates through the values in this object.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> which iterates through the values in this object.</returns>
            <remarks>The enumerator returned by this class contains one pair for each element
            in this array, whose key is the element index (as a string), and the value is the
            element itself.</remarks>
        </member>
        <member name="M:System.Json.JsonArray.WriteAttributeString(System.Xml.XmlDictionaryWriter)">
            <summary>
            Callback method called to let an instance write the proper JXML attribute when saving this
            instance.
            </summary>
            <param name="jsonWriter">The JXML writer used to write JSON.</param>
        </member>
        <member name="M:System.Json.JsonArray.WriteStartElementAndGetNext(System.Xml.XmlDictionaryWriter,System.Int32)">
            <summary>
            Callback method called during Save operations to let the instance write the start element
            and return the next element in the collection.
            </summary>
            <param name="jsonWriter">The JXML writer used to write JSON.</param>
            <param name="currentIndex">The index within this collection.</param>
            <returns>The next item in the collection, or null of there are no more items.</returns>
        </member>
        <member name="P:System.Json.JsonArray.JsonType">
            <summary>
            Gets the JSON type of this <see cref="T:System.Json.JsonArray"/>. The return value
            is always <see cref="F:System.Json.JsonType.Array"/>.
            </summary>
        </member>
        <member name="P:System.Json.JsonArray.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Json.JsonArray"/> is read-only.
            </summary>
        </member>
        <member name="P:System.Json.JsonArray.Count">
            <summary>
            Returns the number of <see cref="T:System.Json.JsonValue"/> elements in the array.
            </summary>
        </member>
        <member name="P:System.Json.JsonArray.Item(System.Int32)">
            <summary>
            Gets or sets the JSON value at a specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The <see cref="T:System.Json.JsonValue"/> element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is not a valid index for this array.</exception>
            <exception cref="T:System.ArgumentException">The property is set and the value is a
            <see cref="T:System.Json.JsonValue"/> with <see cref="P:System.Json.JsonValue.JsonType"/>
            property of value <see cref="F:System.Json.JsonType.Default"/>.</exception>
        </member>
        <member name="T:System.Json.JsonObject">
            <summary>
            A JsonObject is an unordered collection of zero or more key/value pairs.
            </summary>
            <remarks>A JsonObject is an unordered collection of zero or more key/value pairs,
            where each key is a String and each value is a <see cref="T:System.Json.JsonValue"/>, which can be a
            <see cref="T:System.Json.JsonPrimitive"/>, a <see cref="T:System.Json.JsonArray"/>, or a JsonObject.</remarks>
        </member>
        <member name="M:System.Json.JsonObject.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue}})">
            <summary>
            Creates an instance of the <see cref="T:System.Json.JsonObject"/> class initialized with an
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of key/value pairs.
            </summary>
            <param name="items">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of
            <see cref="T:System.Collections.Generic.KeyValuePair`2"/> used to initialize the
            key/value pairs</param>
            <exception cref="T:System.ArgumentNullException">If items is null.</exception>
            <exception cref="T:System.ArgumentException">If any of the values in the collection
            is a <see cref="T:System.Json.JsonValue"/> with <see cref="P:System.Json.JsonValue.JsonType"/> property of
            value <see cref="F:System.Json.JsonType.Default"/>.</exception>
        </member>
        <member name="M:System.Json.JsonObject.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue}[])">
            <summary>
            Creates an instance of the <see cref="T:System.Json.JsonObject"/> class initialized with a collection of key/value pairs.
            </summary>
            <param name="items">The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> objects used to initialize the key/value pairs.</param>
            <exception cref="T:System.ArgumentException">If any of the values in the collection
            is a <see cref="T:System.Json.JsonValue"/> with <see cref="P:System.Json.JsonValue.JsonType"/> property of
            value <see cref="F:System.Json.JsonType.Default"/>.</exception>
        </member>
        <member name="M:System.Json.JsonObject.ValueOrDefault(System.String)">
            <summary>
            Safe string indexer for the <see cref="T:System.Json.JsonValue"/> type. 
            </summary>
            <param name="key">The key of the element to get.</param>
            <returns>If this instance contains the given key and the value corresponding to
            the key is not null, then it will return that value. Otherwise it will return a
            <see cref="T:System.Json.JsonValue"/> instance with <see cref="P:System.Json.JsonValue.JsonType"/>
            equals to <see cref="F:System.Json.JsonType.Default"/>.</returns>
        </member>
        <member name="M:System.Json.JsonObject.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue}})">
            <summary>
            Adds a specified collection of key/value pairs to this instance.
            </summary>
            <param name="items">The collection of key/value pairs to add.</param>
            <exception cref="T:System.ArgumentNullException">If items is null.</exception>
            <exception cref="T:System.ArgumentException">If the value of any of the items in the collection
            is a <see cref="T:System.Json.JsonValue"/> with <see cref="P:System.Json.JsonValue.JsonType"/> property of
            value <see cref="F:System.Json.JsonType.Default"/>.</exception>
        </member>
        <member name="M:System.Json.JsonObject.AddRange(System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue}[])">
            <summary>
            Adds the elements from an array of type <see cref="T:System.Json.JsonValue"/> to this instance.
            </summary>
            <param name="items">The array of key/value paris to be added to this instance.</param>
            <exception cref="T:System.ArgumentException">If the value of any of the items in the array
            is a <see cref="T:System.Json.JsonValue"/> with <see cref="P:System.Json.JsonValue.JsonType"/> property of
            value <see cref="F:System.Json.JsonType.Default"/>.</exception>
        </member>
        <member name="M:System.Json.JsonObject.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Json.JsonObject.Add(System.String,System.Json.JsonValue)">
            <summary>
            Adds a key/value pair to this <see cref="T:System.Json.JsonObject"/> instance.
            </summary>
            <param name="key">The key for the element added.</param>
            <param name="value">The <see cref="T:System.Json.JsonValue"/> for the element added.</param>
            <exception cref="T:System.ArgumentException">If the value is a <see cref="T:System.Json.JsonValue"/>
            with <see cref="P:System.Json.JsonValue.JsonType"/> property of
            value <see cref="F:System.Json.JsonType.Default"/>.</exception>
        </member>
        <member name="M:System.Json.JsonObject.Add(System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue})">
            <summary>
            Adds a key/value pair to this <see cref="T:System.Json.JsonObject"/> instance.
            </summary>
            <param name="item">The key/value pair to be added.</param>
            <exception cref="T:System.ArgumentException">If the value of the pair is a
            <see cref="T:System.Json.JsonValue"/> with <see cref="P:System.Json.JsonValue.JsonType"/>
            property of value <see cref="F:System.Json.JsonType.Default"/>.</exception>
        </member>
        <member name="M:System.Json.JsonObject.ContainsKey(System.String)">
            <summary>
            Checks whether a key/value pair with a specified key exists in this <see cref="T:System.Json.JsonObject"/> instance.
            </summary>
            <param name="key">The key to check for.</param>
            <returns>true if this instance contains the key; otherwise, false.</returns>
        </member>
        <member name="M:System.Json.JsonObject.Remove(System.String)">
            <summary>
            Removes the key/value pair with a specified key from this <see cref="T:System.Json.JsonObject"/> instance.
            </summary>
            <param name="key">The key of the item to remove.</param>
            <returns>true if the element is successfully found and removed; otherwise, false.
            This method returns false if key is not found in this <see cref="T:System.Json.JsonObject"/> instance.</returns>
        </member>
        <member name="M:System.Json.JsonObject.TryGetValue(System.String,System.Json.JsonValue@)">
            <summary>
            Attempts to get the value that corresponds to the specified key.
            </summary>
            <param name="key">The key of the value to retrieve.</param>
            <param name="value">The primitive or structured <see cref="T:System.Json.JsonValue"/> object that has the key
            specified. If this object does not contain a key/value pair with the given key,
            this parameter is set to null.</param>
            <returns>true if the instance of the <see cref="T:System.Json.JsonObject"/> contains an element with the
            specified key; otherwise, false.</returns>
        </member>
        <member name="M:System.Json.JsonObject.Clear">
            <summary>
            Removes all key/value pairs from this <see cref="T:System.Json.JsonObject"/> instance.
            </summary>
        </member>
        <member name="M:System.Json.JsonObject.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue}[],System.Int32)">
            <summary>
            Copies the contents of this <see cref="T:System.Json.JsonObject"/> instance into a specified
            key/value destination array beginning at a specified index.
            </summary>
            <param name="array">The destination array of type <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            to which the elements of this <see cref="T:System.Json.JsonObject"/> are copied.</param>
            <param name="arrayIndex">The zero-based index at which to begin the insertion of the
            contents from this <see cref="T:System.Json.JsonObject"/> instance.</param>
        </member>
        <member name="M:System.Json.JsonObject.GetKeyValuePairEnumerator">
            <summary>
            Returns an enumerator over the key/value pairs contained in this <see cref="T:System.Json.JsonObject"/> instance.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> which iterates
            through the members of this instance.</returns>
        </member>
        <member name="M:System.Json.JsonObject.OnSaveStarted">
            <summary>
            Callback method called when a Save operation is starting for this instance.
            </summary>
        </member>
        <member name="M:System.Json.JsonObject.OnSaveEnded">
            <summary>
            Callback method called when a Save operation is finished for this instance.
            </summary>
        </member>
        <member name="M:System.Json.JsonObject.WriteAttributeString(System.Xml.XmlDictionaryWriter)">
            <summary>
            Callback method called to let an instance write the proper JXML attribute when saving this
            instance.
            </summary>
            <param name="jsonWriter">The JXML writer used to write JSON.</param>
        </member>
        <member name="M:System.Json.JsonObject.WriteStartElementAndGetNext(System.Xml.XmlDictionaryWriter,System.Int32)">
            <summary>
            Callback method called during Save operations to let the instance write the start element
            and return the next element in the collection.
            </summary>
            <param name="jsonWriter">The JXML writer used to write JSON.</param>
            <param name="currentIndex">The index within this collection.</param>
            <returns>The next item in the collection, or null of there are no more items.</returns>
        </member>
        <member name="P:System.Json.JsonObject.JsonType">
            <summary>
            Gets the JSON type of this <see cref="T:System.Json.JsonObject"/>. The return value
            is always <see cref="F:System.Json.JsonType.Object"/>.
            </summary>
        </member>
        <member name="P:System.Json.JsonObject.Keys">
            <summary>
            Gets a collection that contains the keys in this <see cref="T:System.Json.JsonObject"/>.
            </summary>
        </member>
        <member name="P:System.Json.JsonObject.Values">
            <summary>
            Gets a collection that contains the values in this <see cref="T:System.Json.JsonObject"/>.
            </summary>
        </member>
        <member name="P:System.Json.JsonObject.Count">
            <summary>
            Returns the number of key/value pairs in this <see cref="T:System.Json.JsonObject"/>.
            </summary>
        </member>
        <member name="P:System.Json.JsonObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Json#JsonValue}}#IsReadOnly">
            <summary>
            Gets a value indicating whether this JSON CLR object is read-only.
            </summary>
        </member>
        <member name="P:System.Json.JsonObject.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>The <see cref="T:System.Json.JsonValue"/> associated to the specified key.</returns>
            <exception cref="T:System.ArgumentNullException">If key is null.</exception>
            <exception cref="T:System.ArgumentException">The property is set and the value is a
            <see cref="T:System.Json.JsonValue"/> with <see cref="P:System.Json.JsonValue.JsonType"/>
            property of value <see cref="F:System.Json.JsonType.Default"/>.</exception>
        </member>
        <member name="T:System.Json.JsonPrimitive">
            <summary>
            Represents a JavaScript Object Notation (JSON) primitive type in the common language runtime (CLR).
            </summary>
        </member>
        <member name="M:System.Json.JsonPrimitive.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive"/> type with a <see cref="T:System.Boolean"/> type.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> object that initializes the new instance.</param>
            <remarks>A <see cref="T:System.Json.JsonPrimitive"/> object stores a <see cref="T:System.Json.JsonType"/> and the value used to initialize it.
            When initialized with a <see cref="T:System.Boolean"/> object, the <see cref="T:System.Json.JsonType"/> is a <see cref="F:System.Json.JsonType.Boolean"/>, which can be
            recovered using the <see cref="P:System.Json.JsonPrimitive.JsonType"/> property. The value used to initialize the <see cref="T:System.Json.JsonPrimitive"/>
            object can be recovered by casting the <see cref="T:System.Json.JsonPrimitive"/> to <see cref="T:System.Boolean"/>.</remarks>
        </member>
        <member name="M:System.Json.JsonPrimitive.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive"/> type with a <see cref="T:System.Byte"/> type.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> object that initializes the new instance.</param>
            <remarks>A <see cref="T:System.Json.JsonPrimitive"/> object stores a <see cref="T:System.Json.JsonType"/> and the value used to initialize it.
            When initialized with a <see cref="T:System.Byte"/> object, the <see cref="T:System.Json.JsonType"/> is a <see cref="F:System.Json.JsonType.Number"/>, which can be
            recovered using the <see cref="P:System.Json.JsonPrimitive.JsonType"/> property. The value used to initialize the <see cref="T:System.Json.JsonPrimitive"/>
            object can be recovered by casting the <see cref="T:System.Json.JsonPrimitive"/> to <see cref="T:System.Byte"/>.</remarks>
        </member>
        <member name="M:System.Json.JsonPrimitive.#ctor(System.SByte)">
            <summary>
            Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive"/> type with a <see cref="T:System.SByte"/> type.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> object that initializes the new instance.</param>
            <remarks>A <see cref="T:System.Json.JsonPrimitive"/> object stores a <see cref="T:System.Json.JsonType"/> and the value used to initialize it.
            When initialized with a <see cref="T:System.SByte"/> object, the <see cref="T:System.Json.JsonType"/> is a <see cref="F:System.Json.JsonType.Number"/>, which can be
            recovered using the <see cref="P:System.Json.JsonPrimitive.JsonType"/> property. The value used to initialize the <see cref="T:System.Json.JsonPrimitive"/>
            object can be recovered by casting the <see cref="T:System.Json.JsonPrimitive"/> to <see cref="T:System.SByte"/>.</remarks>
        </member>
        <member name="M:System.Json.JsonPrimitive.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive"/> type with a <see cref="T:System.Decimal"/> type.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> object that initializes the new instance.</param>
            <remarks>A <see cref="T:System.Json.JsonPrimitive"/> object stores a <see cref="T:System.Json.JsonType"/> and the value used to initialize it.
            When initialized with a <see cref="T:System.Decimal"/> object, the <see cref="T:System.Json.JsonType"/> is a <see cref="F:System.Json.JsonType.Number"/>, which can be
            recovered using the <see cref="P:System.Json.JsonPrimitive.JsonType"/> property. The value used to initialize the <see cref="T:System.Json.JsonPrimitive"/>
            object can be recovered by casting the <see cref="T:System.Json.JsonPrimitive"/> to <see cref="T:System.Decimal"/>.</remarks>
        </member>
        <member name="M:System.Json.JsonPrimitive.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive"/> type with a <see cref="T:System.Int16"/> type.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> object that initializes the new instance.</param>
            <remarks>A <see cref="T:System.Json.JsonPrimitive"/> object stores a <see cref="T:System.Json.JsonType"/> and the value used to initialize it.
            When initialized with a <see cref="T:System.Int16"/> object, the <see cref="T:System.Json.JsonType"/> is a <see cref="F:System.Json.JsonType.Number"/>, which can be
            recovered using the <see cref="P:System.Json.JsonPrimitive.JsonType"/> property. The value used to initialize the <see cref="T:System.Json.JsonPrimitive"/>
            object can be recovered by casting the <see cref="T:System.Json.JsonPrimitive"/> to <see cref="T:System.Int16"/>.</remarks>
        </member>
        <member name="M:System.Json.JsonPrimitive.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive"/> type with a <see cref="T:System.UInt16"/> type.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> object that initializes the new instance.</param>
            <remarks>A <see cref="T:System.Json.JsonPrimitive"/> object stores a <see cref="T:System.Json.JsonType"/> and the value used to initialize it.
            When initialized with a <see cref="T:System.UInt16"/> object, the <see cref="T:System.Json.JsonType"/> is a <see cref="F:System.Json.JsonType.Number"/>, which can be
            recovered using the <see cref="P:System.Json.JsonPrimitive.JsonType"/> property. The value used to initialize the <see cref="T:System.Json.JsonPrimitive"/>
            object can be recovered by casting the <see cref="T:System.Json.JsonPrimitive"/> to <see cref="T:System.UInt16"/>.</remarks>
        </member>
        <member name="M:System.Json.JsonPrimitive.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive"/> type with a <see cref="T:System.Int32"/> type.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> object that initializes the new instance.</param>
            <remarks>A <see cref="T:System.Json.JsonPrimitive"/> object stores a <see cref="T:System.Json.JsonType"/> and the value used to initialize it.
            When initialized with a <see cref="T:System.Int32"/> object, the <see cref="T:System.Json.JsonType"/> is a <see cref="F:System.Json.JsonType.Number"/>, which can be
            recovered using the <see cref="P:System.Json.JsonPrimitive.JsonType"/> property. The value used to initialize the <see cref="T:System.Json.JsonPrimitive"/>
            object can be recovered by casting the <see cref="T:System.Json.JsonPrimitive"/> to <see cref="T:System.Int32"/>.</remarks>
        </member>
        <member name="M:System.Json.JsonPrimitive.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive"/> type with a <see cref="T:System.UInt32"/> type.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> object that initializes the new instance.</param>
            <remarks>A <see cref="T:System.Json.JsonPrimitive"/> object stores a <see cref="T:System.Json.JsonType"/> and the value used to initialize it.
            When initialized with a <see cref="T:System.UInt32"/> object, the <see cref="T:System.Json.JsonType"/> is a <see cref="F:System.Json.JsonType.Number"/>, which can be
            recovered using the <see cref="P:System.Json.JsonPrimitive.JsonType"/> property. The value used to initialize the <see cref="T:System.Json.JsonPrimitive"/>
            object can be recovered by casting the <see cref="T:System.Json.JsonPrimitive"/> to <see cref="T:System.UInt32"/>.</remarks>
        </member>
        <member name="M:System.Json.JsonPrimitive.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive"/> type with a <see cref="T:System.Int64"/> type.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> object that initializes the new instance.</param>
            <remarks>A <see cref="T:System.Json.JsonPrimitive"/> object stores a <see cref="T:System.Json.JsonType"/> and the value used to initialize it.
            When initialized with a <see cref="T:System.Int64"/> object, the <see cref="T:System.Json.JsonType"/> is a <see cref="F:System.Json.JsonType.Number"/>, which can be
            recovered using the <see cref="P:System.Json.JsonPrimitive.JsonType"/> property. The value used to initialize the <see cref="T:System.Json.JsonPrimitive"/>
            object can be recovered by casting the <see cref="T:System.Json.JsonPrimitive"/> to <see cref="T:System.Int64"/>.</remarks>
        </member>
        <member name="M:System.Json.JsonPrimitive.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive"/> type with a <see cref="T:System.UInt64"/> type.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> object that initializes the new instance.</param>
            <remarks>A <see cref="T:System.Json.JsonPrimitive"/> object stores a <see cref="T:System.Json.JsonType"/> and the value used to initialize it.
            When initialized with a <see cref="T:System.UInt64"/> object, the <see cref="T:System.Json.JsonType"/> is a <see cref="F:System.Json.JsonType.Number"/>, which can be
            recovered using the <see cref="P:System.Json.JsonPrimitive.JsonType"/> property. The value used to initialize the <see cref="T:System.Json.JsonPrimitive"/>
            object can be recovered by casting the <see cref="T:System.Json.JsonPrimitive"/> to <see cref="T:System.UInt64"/>.</remarks>
        </member>
        <member name="M:System.Json.JsonPrimitive.#ctor(System.Single)">
            <summary>
            Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive"/> type with a <see cref="T:System.Single"/> type.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> object that initializes the new instance.</param>
            <remarks>A <see cref="T:System.Json.JsonPrimitive"/> object stores a <see cref="T:System.Json.JsonType"/> and the value used to initialize it.
            When initialized with a <see cref="T:System.Single"/> object, the <see cref="T:System.Json.JsonType"/> is a <see cref="F:System.Json.JsonType.Number"/>, which can be
            recovered using the <see cref="P:System.Json.JsonPrimitive.JsonType"/> property. The value used to initialize the <see cref="T:System.Json.JsonPrimitive"/>
            object can be recovered by casting the <see cref="T:System.Json.JsonPrimitive"/> to <see cref="T:System.Single"/>.</remarks>
        </member>
        <member name="M:System.Json.JsonPrimitive.#ctor(System.Double)">
            <summary>
            Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive"/> type with a <see cref="T:System.Double"/> type.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> object that initializes the new instance.</param>
            <remarks>A <see cref="T:System.Json.JsonPrimitive"/> object stores a <see cref="T:System.Json.JsonType"/> and the value used to initialize it.
            When initialized with a <see cref="T:System.Double"/> object, the <see cref="T:System.Json.JsonType"/> is a <see cref="F:System.Json.JsonType.Number"/>, which can be
            recovered using the <see cref="P:System.Json.JsonPrimitive.JsonType"/> property. The value used to initialize the <see cref="T:System.Json.JsonPrimitive"/>
            object can be recovered by casting the <see cref="T:System.Json.JsonPrimitive"/> to <see cref="T:System.Double"/>.</remarks>
        </member>
        <member name="M:System.Json.JsonPrimitive.#ctor(System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive"/> type with a <see cref="T:System.String"/> type.
            </summary>
            <param name="value">The <see cref="T:System.String"/> object that initializes the new instance.</param>
            <remarks>A <see cref="T:System.Json.JsonPrimitive"/> object stores a <see cref="T:System.Json.JsonType"/> and the value used to initialize it.
            When initialized with a <see cref="T:System.String"/> object, the <see cref="T:System.Json.JsonType"/> is a <see cref="F:System.Json.JsonType.String"/>, which can be
            recovered using the <see cref="P:System.Json.JsonPrimitive.JsonType"/> property. The value used to initialize the <see cref="T:System.Json.JsonPrimitive"/>
            object can be recovered by casting the <see cref="T:System.Json.JsonPrimitive"/> to <see cref="T:System.String"/>.</remarks>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
        </member>
        <member name="M:System.Json.JsonPrimitive.#ctor(System.Char)">
            <summary>
            Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive"/> type with a <see cref="T:System.Char"/> type.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> object that initializes the new instance.</param>
            <remarks>A <see cref="T:System.Json.JsonPrimitive"/> object stores a <see cref="T:System.Json.JsonType"/> and the value used to initialize it.
            When initialized with a <see cref="T:System.Char"/> object, the <see cref="T:System.Json.JsonType"/> is a <see cref="F:System.Json.JsonType.String"/>, which can be
            recovered using the <see cref="P:System.Json.JsonPrimitive.JsonType"/> property. The value used to initialize the <see cref="T:System.Json.JsonPrimitive"/>
            object can be recovered by casting the <see cref="T:System.Json.JsonPrimitive"/> to <see cref="T:System.Char"/>.</remarks>
        </member>
        <member name="M:System.Json.JsonPrimitive.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive"/> type with a <see cref="T:System.DateTime"/> type.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> object that initializes the new instance.</param>
            <remarks>A <see cref="T:System.Json.JsonPrimitive"/> object stores a <see cref="T:System.Json.JsonType"/> and the value used to initialize it.
            When initialized with a <see cref="T:System.DateTime"/> object, the <see cref="T:System.Json.JsonType"/> is a <see cref="F:System.Json.JsonType.String"/>, which can be
            recovered using the <see cref="P:System.Json.JsonPrimitive.JsonType"/> property. The value used to initialize the <see cref="T:System.Json.JsonPrimitive"/>
            object can be recovered by casting the <see cref="T:System.Json.JsonPrimitive"/> to <see cref="T:System.DateTime"/>.</remarks>
        </member>
        <member name="M:System.Json.JsonPrimitive.#ctor(System.DateTimeOffset)">
            <summary>
            Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive"/> type with a <see cref="T:System.DateTimeOffset"/> type.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> object that initializes the new instance.</param>
            <remarks>A <see cref="T:System.Json.JsonPrimitive"/> object stores a <see cref="T:System.Json.JsonType"/> and the value used to initialize it.
            When initialized with a <see cref="T:System.DateTimeOffset"/> object, the <see cref="T:System.Json.JsonType"/> is a <see cref="F:System.Json.JsonType.String"/>, which can be
            recovered using the <see cref="P:System.Json.JsonPrimitive.JsonType"/> property. The value used to initialize the <see cref="T:System.Json.JsonPrimitive"/>
            object can be recovered by casting the <see cref="T:System.Json.JsonPrimitive"/> to <see cref="T:System.DateTimeOffset"/>.</remarks>
        </member>
        <member name="M:System.Json.JsonPrimitive.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive"/> type with a <see cref="T:System.Uri"/> type.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> object that initializes the new instance.</param>
            <remarks>A <see cref="T:System.Json.JsonPrimitive"/> object stores a <see cref="T:System.Json.JsonType"/> and the value used to initialize it.
            When initialized with a <see cref="T:System.Uri"/> object, the <see cref="T:System.Json.JsonType"/> is a <see cref="F:System.Json.JsonType.String"/>, which can be
            recovered using the <see cref="P:System.Json.JsonPrimitive.JsonType"/> property. The value used to initialize the <see cref="T:System.Json.JsonPrimitive"/>
            object can be recovered by casting the <see cref="T:System.Json.JsonPrimitive"/> to <see cref="T:System.Uri"/>.</remarks>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
        </member>
        <member name="M:System.Json.JsonPrimitive.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive"/> type with a <see cref="T:System.Guid"/> type.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> object that initializes the new instance.</param>
            <remarks>A <see cref="T:System.Json.JsonPrimitive"/> object stores a <see cref="T:System.Json.JsonType"/> and the value used to initialize it.
            When initialized with a <see cref="T:System.Guid"/> object, the <see cref="T:System.Json.JsonType"/> is a <see cref="F:System.Json.JsonType.String"/>, which can be
            recovered using the <see cref="P:System.Json.JsonPrimitive.JsonType"/> property. The value used to initialize the <see cref="T:System.Json.JsonPrimitive"/>
            object can be recovered by casting the <see cref="T:System.Json.JsonPrimitive"/> to <see cref="T:System.Guid"/>.</remarks>
        </member>
        <member name="M:System.Json.JsonPrimitive.TryCreate(System.Object,System.Json.JsonPrimitive@)">
            <summary>
            Attemps to create a <see cref="T:System.Json.JsonPrimitive"/> instance from the specified <see cref="T:System.Object"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to create the <see cref="T:System.Json.JsonPrimitive"/> instance.</param>
            <param name="result">The resulting <see cref="T:System.Json.JsonPrimitive"/> instance on success, null otherwise.</param>
            <returns>true if the operation is successful, false otherwise.</returns>
        </member>
        <member name="M:System.Json.JsonPrimitive.ReadAs(System.Type)">
            <summary>
            Attempts to convert this <see cref="T:System.Json.JsonPrimitive"/> instance into an instance of the specified type.
            </summary>
            <param name="type">The type to which the conversion is being performed.</param>
            <returns>An object instance initialized with the <see cref="T:System.Json.JsonValue"/> value
            specified if the conversion.</returns>
            <exception cref="T:System.UriFormatException">If T is <see cref="T:System.Uri"/> and this value does
            not represent a valid Uri.</exception>
            <exception cref="T:System.OverflowException">If T is a numeric type, and a narrowing conversion would result
            in a loss of data. For example, if this instance holds an <see cref="T:System.Int32"/> value of 10000,
            and T is <see cref="T:System.Byte"/>, this operation would throw an <see cref="T:System.OverflowException"/>
            because 10000 is outside the range of the <see cref="T:System.Byte"/> data type.</exception>
            <exception cref="T:System.FormatException">If the conversion from the string representation of this
            value into another fails because the string is not in the proper format.</exception>
            <exception cref="T:System.InvalidCastException">If this instance cannot be read as type T.</exception>
        </member>
        <member name="M:System.Json.JsonPrimitive.TryReadAs(System.Type,System.Object@)">
            <summary>
            Attempts to convert this <see cref="T:System.Json.JsonPrimitive"/> instance into an instance of the specified type.
            </summary>
            <param name="type">The type to which the conversion is being performed.</param>
            <param name="value">An object instance to be initialized with this instance or null if the conversion cannot be performed.</param>
            <returns>true if this <see cref="T:System.Json.JsonPrimitive"/> instance can be read as the specified type; otherwise, false.</returns>
        </member>
        <member name="M:System.Json.JsonPrimitive.Read">
            <summary>
            Returns the value this object wraps (if any).
            </summary>
            <returns>The value wrapped by this instance or null if none.</returns>
        </member>
        <member name="P:System.Json.JsonPrimitive.JsonType">
            <summary>
            Gets the JsonType that is associated with this <see cref="T:System.Json.JsonPrimitive"/> object.
            </summary>
        </member>
        <member name="P:System.Json.JsonPrimitive.Value">
            <summary>
            Gets the value represented by this instance.
            </summary>
        </member>
        <member name="T:System.Json.JsonSaveOptions">
            <summary>
            Specifies serialization options.
            <remarks>This enumeration has a <see cref="T:System.FlagsAttribute"/> attribute that allows a bitwise combination of its member values.</remarks>
            </summary>
        </member>
        <member name="F:System.Json.JsonSaveOptions.None">
            <summary>
            No options specified.
            </summary>
        </member>
        <member name="F:System.Json.JsonSaveOptions.EnableIndent">
            <summary>
            Includes indentation when formatting the JSON while serializing.
            </summary>
        </member>
        <member name="T:System.Json.JsonSaveOptionsHelper">
            <summary>
            Helper class for validating <see cref="T:System.Json.JsonSaveOptions"/> values.
            </summary>
        </member>
        <member name="M:System.Json.JsonSaveOptionsHelper.IsDefined(System.Json.JsonSaveOptions)">
            <summary>
            Determines whether the specified <paramref name="value"/> is defined by the <see cref="T:System.Json.JsonSaveOptions"/>
            enumeration.
            </summary>
            <param name="value">The value to verify.</param>
            <returns>
            <c>true</c> if the specified options is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Json.JsonSaveOptionsHelper.Validate(System.Json.JsonSaveOptions,System.String)">
            <summary>
            Validates the specified <paramref name="value"/> and throws an <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/>
            exception if not valid.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="parameterName">Name of the parameter to use if throwing exception.</param>
        </member>
        <member name="T:System.Json.JsonType">
            <summary>
            An enumeration that specifies primitive and structured JavaScript Object 
            Notation (JSON) common language runtime (CLR) types.
            </summary>
        </member>
        <member name="F:System.Json.JsonType.String">
            <summary>
            Specifies the JSON string CLR type.
            </summary>
        </member>
        <member name="F:System.Json.JsonType.Number">
            <summary>
            Specifies the JSON number CLR type.
            </summary>
        </member>
        <member name="F:System.Json.JsonType.Object">
            <summary>
            Specifies the JSON object CLR type that consists of an unordered collection
            of key/value pairs, where the key is of type String and the value is of
            type <see cref="T:System.Json.JsonValue"/>, which can, in turn, be either a
            primitive or a structured JSON type.
            </summary>
        </member>
        <member name="F:System.Json.JsonType.Array">
            <summary>
            Specifies the JSON array CLR type that consists of an ordered collection of
            <see cref="T:System.Json.JsonValue"/>types, which can, in turn, be either
            primitive or structured JSON types.
            </summary>
        </member>
        <member name="F:System.Json.JsonType.Boolean">
            <summary>
            Specifies the JSON Boolean CLR type.
            </summary>
        </member>
        <member name="F:System.Json.JsonType.Default">
            <summary>
            Specifies the type returned by calls to <see cref="M:System.Json.JsonValue.ValueOrDefault(System.String)"/>
            or <see cref="M:System.Json.JsonValue.ValueOrDefault(System.Int32)"/>
            when the element searches doesn't exist in the JSON collection. This is a special
            value which does not represent any JSON element, and cannot be added to any
            JSON collections.
            </summary>
        </member>
        <member name="T:System.Json.JsonValueChange">
            <summary>
            Specifies the event type when an event is raised for a <see cref="T:System.Json.JsonValue"/>.
            </summary>
        </member>
        <member name="F:System.Json.JsonValueChange.Add">
            <summary>
            An element has been or will be added to the collection.
            </summary>
        </member>
        <member name="F:System.Json.JsonValueChange.Remove">
            <summary>
            An element has been or will be removed from the collection.
            </summary>
        </member>
        <member name="F:System.Json.JsonValueChange.Replace">
            <summary>
            An element has been or will be replaced in the collection. Used on indexers.
            </summary>
        </member>
        <member name="F:System.Json.JsonValueChange.Clear">
            <summary>
            All elements of the collection have been or will be removed.
            </summary>
        </member>
        <member name="T:System.Json.JsonValueChangeEventArgs">
            <summary>
            Provide data for the <see cref="E:System.Json.JsonValue.Changing"/> and <see cref="E:System.Json.JsonValue.Changed"/> events.
            </summary>
        </member>
        <member name="M:System.Json.JsonValueChangeEventArgs.#ctor(System.Json.JsonValue,System.Json.JsonValueChange,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Json.JsonValueChangeEventArgs"/> class for
            changes in a <see cref="T:System.Json.JsonArray"/>.
            </summary>
            <param name="child">The <see cref="T:System.Json.JsonValue"/> instance which will be or has been modified.</param>
            <param name="change">The type of change of the <see cref="T:System.Json.JsonValue"/> event.</param>
            <param name="index">The index of the element being changed in a <see cref="T:System.Json.JsonArray"/>.</param>
        </member>
        <member name="M:System.Json.JsonValueChangeEventArgs.#ctor(System.Json.JsonValue,System.Json.JsonValueChange,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Json.JsonValueChangeEventArgs"/> class for
            changes in a <see cref="T:System.Json.JsonObject"/>.
            </summary>
            <param name="child">The <see cref="T:System.Json.JsonValue"/> instance which will be or has been modified.</param>
            <param name="change">The type of change of the <see cref="T:System.Json.JsonValue"/> event.</param>
            <param name="key">The key of the element being changed in a <see cref="T:System.Json.JsonObject"/>.</param>
        </member>
        <member name="P:System.Json.JsonValueChangeEventArgs.Child">
            <summary>
            Gets the child which will be or has been modified.
            </summary>
            <remarks><p>This property is <code>null</code> for <see cref="F:System.Json.JsonValueChange.Clear"/> event types
            raised by <see cref="T:System.Json.JsonValue"/> instances.</p>
            <p>For <see cref="T:System.Json.JsonValueChange">Replace</see> events, this property contains the new value in
            the <see cref="E:System.Json.JsonValue.Changing"/> event, and the old value (the one being replaced) in the
            <see cref="E:System.Json.JsonValue.Changed"/> event.</p></remarks>
        </member>
        <member name="P:System.Json.JsonValueChangeEventArgs.Change">
            <summary>
            Gets the type of change.
            </summary>
        </member>
        <member name="P:System.Json.JsonValueChangeEventArgs.Index">
            <summary>
            Gets the index in the <see cref="T:System.Json.JsonArray"/> where the change happened, or
            <code>-1</code> if the change happened in a <see cref="T:System.Json.JsonValue"/> of a different type.
            </summary>
        </member>
        <member name="P:System.Json.JsonValueChangeEventArgs.Key">
            <summary>
            Gets the key in the <see cref="T:System.Json.JsonObject"/> where the change happened, or
            <code>null</code> if the change happened in a <see cref="T:System.Json.JsonValue"/> of a different type.
            </summary>
            <remarks>This property can also be <code>null</code> if the event type is
            <see cref="T:System.Json.JsonValueChange">Clear</see>.</remarks>
        </member>
        <member name="T:System.Json.JsonValueDynamicMetaObject">
            <summary>
            This class provides dynamic behavior support for the JsonValue types.
            </summary>
        </member>
        <member name="M:System.Json.JsonValueDynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Json.JsonValue)">
            <summary>
            Class constructor.
            </summary>
            <param name="parameter">The expression representing this <see cref="T:System.Dynamic.DynamicMetaObject"/> during the dynamic binding process.</param>
            <param name="value">The runtime value represented by the <see cref="T:System.Dynamic.DynamicMetaObject"/>.</param>
        </member>
        <member name="M:System.Json.JsonValueDynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)">
            <summary>
            Performs the binding of the dynamic unary operation.
            </summary>
            <param name="binder">An instance of the <see cref="T:System.Dynamic.UnaryOperationBinder"/> that represents the details of the dynamic operation.</param>
            <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject"/> representing the result of the binding.</returns>
        </member>
        <member name="M:System.Json.JsonValueDynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)">
            <summary>
            Performs the binding of the dynamic binary operation.
            </summary>
            <param name="binder">An instance of the <see cref="T:System.Dynamic.BinaryOperationBinder"/> that represents the details of the dynamic operation.</param>
            <param name="arg">An instance of the <see cref="T:System.Dynamic.DynamicMetaObject"/> representing the right hand side of the binary operation.</param>
            <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject"/> representing the result of the binding.</returns>
        </member>
        <member name="M:System.Json.JsonValueDynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)">
            <summary>
            Implements dynamic cast for JsonValue types.
            </summary>
            <param name="binder">An instance of the <see cref="T:System.Dynamic.ConvertBinder"/> that represents the details of the dynamic operation.</param>
            <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject"/> representing the result of the binding.</returns>
        </member>
        <member name="M:System.Json.JsonValueDynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])">
            <summary>
            Implements setter for dynamic indexer by index (JsonArray)
            </summary>
            <param name="binder">An instance of the <see cref="T:System.Dynamic.GetIndexBinder"/> that represents the details of the dynamic operation.</param>
            <param name="indexes">An array of <see cref="T:System.Dynamic.DynamicMetaObject"/> instances - indexes for the get index operation.</param>
            <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject"/> representing the result of the binding.</returns>
        </member>
        <member name="M:System.Json.JsonValueDynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
            <summary>
            Implements getter for dynamic indexer by index (JsonArray).
            </summary>
            <param name="binder">An instance of the <see cref="T:System.Dynamic.SetIndexBinder"/> that represents the details of the dynamic operation.</param>
            <param name="indexes">An array of <see cref="T:System.Dynamic.DynamicMetaObject"/> instances - indexes for the set index operation.</param>
            <param name="value">The <see cref="T:System.Dynamic.DynamicMetaObject"/> representing the value for the set index operation.</param>
            <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject"/> representing the result of the binding.</returns>
        </member>
        <member name="M:System.Json.JsonValueDynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
            <summary>
            Implements getter for dynamic indexer by key (JsonObject).
            </summary>
            <param name="binder">An instance of the <see cref="T:System.Dynamic.GetMemberBinder"/> that represents the details of the dynamic operation.</param>
            <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject"/> representing the result of the binding.</returns>
        </member>
        <member name="M:System.Json.JsonValueDynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
            <summary>
            Implements setter for dynamic indexer by key (JsonObject).
            </summary>
            <param name="binder">An instance of the <see cref="T:System.Dynamic.SetMemberBinder"/> that represents the details of the dynamic operation.</param>
            <param name="value">The <see cref="T:System.Dynamic.DynamicMetaObject"/> representing the value for the set member operation.</param>
            <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject"/> representing the result of the binding.</returns>
        </member>
        <member name="M:System.Json.JsonValueDynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
            <summary>
            Performs the binding of the dynamic invoke member operation.
            Implemented to support extension methods defined in <see cref="T:System.Runtime.Serialization.Json.JsonValueExtensions"/> type.
            </summary>
            <param name="binder">An instance of the InvokeMemberBinder that represents the details of the dynamic operation.</param>
            <param name="args">An array of DynamicMetaObject instances - arguments to the invoke member operation.</param>
            <returns>The new DynamicMetaObject representing the result of the binding.</returns>
        </member>
        <member name="M:System.Json.JsonValueDynamicMetaObject.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of string reprenseting the dynamic member names.</returns>
        </member>
        <member name="M:System.Json.JsonValueDynamicMetaObject.GetUnaryOperationSupport(System.Linq.Expressions.ExpressionType,System.Json.JsonValue)">
            <summary>
            Gets the operation support value for the specified operation on the specified operand.
            </summary>
            <param name="operation">The operation type.</param>
            <param name="thisValue">The JsonValue instance to check operation for.</param>
            <returns>An <see cref="T:System.Json.JsonValueDynamicMetaObject.OperationSupport"/> value.</returns>
        </member>
        <member name="M:System.Json.JsonValueDynamicMetaObject.GetBinaryOperationSupport(System.Linq.Expressions.ExpressionType,System.Json.JsonValue,System.Object)">
            <summary>
            Gets the operation support value for the specified operation and operands.
            </summary>
            <param name="operation">The operation type.</param>
            <param name="thisValue">The JsonValue instance to check operation for.</param>
            <param name="operand">The second operand instance.</param>
            <returns>An <see cref="T:System.Json.JsonValueDynamicMetaObject.OperationSupport"/> value.</returns>
        </member>
        <member name="M:System.Json.JsonValueDynamicMetaObject.GetUnaryOperationExpression(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression)">
            <summary>
            Returns an expression representing a unary operation based on the specified operation type.
            </summary>
            <param name="operation">The operation type.</param>
            <param name="thisExpression">The operand.</param>
            <returns>The expression representing the unary operation.</returns>
        </member>
        <member name="M:System.Json.JsonValueDynamicMetaObject.GetBinaryOperandExpressions(System.Linq.Expressions.ExpressionType,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Linq.Expressions.Expression@,System.Linq.Expressions.Expression@)">
            <summary>
            Updates the <see cref="T:System.Linq.Expressions.Expression"/> tree for the operands of the specified operation.
            </summary>
            <param name="operation">The operation to evalutes.</param>
            <param name="thisOperand">The first operand.</param>
            <param name="otherOperand">The second operand.</param>
            <param name="thisExpression">The <see cref="T:System.Linq.Expressions.Expression"/> for the first operand.</param>
            <param name="otherExpression">The <see cref="T:System.Linq.Expressions.Expression"/> for the second operand.</param>
        </member>
        <member name="M:System.Json.JsonValueDynamicMetaObject.GetBinaryOperationExpression(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Returns an Expression representing a binary operation based on the specified operation type.
            </summary>
            <param name="operation">The operation type.</param>
            <param name="thisExpression">An expression representing the left operand.</param>
            <param name="otherExpression">An expression representing the right operand.</param>
            <returns>The expression representing the binary operation.</returns>
        </member>
        <member name="M:System.Json.JsonValueDynamicMetaObject.GetOperationErrorExpression(System.Json.JsonValueDynamicMetaObject.OperationSupport,System.Linq.Expressions.ExpressionType,System.Json.JsonValue,System.Object)">
            <summary>
            Returns an expression representing a 'throw' instruction based on the specified <see cref="T:System.Json.JsonValueDynamicMetaObject.OperationSupport"/> value.
            </summary>
            <param name="supportValue">The <see cref="T:System.Json.JsonValueDynamicMetaObject.OperationSupport"/> value.</param>
            <param name="operation">The operation type.</param>
            <param name="thisValue">The operation left operand.</param>
            <param name="operand">The operation right operand.</param>
            <returns>A <see cref="T:System.Linq.Expressions.Expression"/> representing a 'throw' instruction.</returns>
        </member>
        <member name="M:System.Json.JsonValueDynamicMetaObject.GetExtensionMethod(System.Type,System.String,System.Type[])">
            <summary>
            Gets a <see cref="T:System.Reflection.MethodInfo"/> instance for the specified method name in the specified type.
            </summary>
            <param name="extensionProviderType">The extension provider type.</param>
            <param name="methodName">The name of the method to get the info for.</param>
            <param name="argTypes">The types of the method arguments.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/>instance or null if the method cannot be resolved.</returns>
        </member>
        <member name="M:System.Json.JsonValueDynamicMetaObject.TryGetIndexExpression(System.Dynamic.DynamicMetaObject[],System.Linq.Expressions.Expression@)">
            <summary>
            Attempts to get an expression for an index parameter.
            </summary>
            <param name="indexes">The operation indexes parameter.</param>
            <param name="expression">A <see cref="T:System.Linq.Expressions.Expression"/> to be initialized to the index expression if the operation is successful, otherwise an error expression.</param>
            <returns>true the operation is successful, false otherwise.</returns>
        </member>
        <member name="M:System.Json.JsonValueDynamicMetaObject.TryCoerceSpecialTypes(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Type@)">
            <summary>
            Attempts to coerce the operand types on a binary operation for some special type and value cases as treated by JsonValue:
            "true" and "false" can be converted to boolean.
            Guid, DateTime and other types can be converted to string.
            </summary>
            <param name="thisOperand">The first operand.</param>
            <param name="otherOperand">The second operand</param>
            <param name="coercedType">On success, this parameter contains the coerced type.</param>
            <returns>true if the coercion is performed, false otherwise.</returns>
        </member>
        <member name="M:System.Json.JsonValueDynamicMetaObject.TryCoerceType(System.Linq.Expressions.ExpressionType,System.Type,System.Type,System.Type@)">
            <summary>
            Attempts to coerce one of the specified types to the other if needed and if possible.
            </summary>
            <param name="operation">The operation for the type coercion.</param>
            <param name="thisType">The type of the first operand.</param>
            <param name="otherType">The type of the second operand.</param>
            <param name="coercedType">The coerced type.</param>
            <returns>true if the type is coerced, false otherwise.</returns>
        </member>
        <member name="M:System.Json.JsonValueDynamicMetaObject.GetUnaryOperationReturnType(System.Dynamic.UnaryOperationBinder)">
            <summary>
            Gets the return type for unary operations.
            </summary>
            <param name="binder">The unary operation binder.</param>
            <returns>The type representing the operation return type.</returns>
        </member>
        <member name="M:System.Json.JsonValueDynamicMetaObject.GetMethodMetaObject(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
            <summary>
            Gets a <see cref="T:System.Dynamic.DynamicMetaObject"/> for a method call.
            </summary>
            <param name="methodInfo">Info for the method to be performed.</param>
            <param name="args">expression array representing the method arguments</param>
            <returns>A meta object for the method call.</returns>
        </member>
        <member name="P:System.Json.JsonValueDynamicMetaObject.DefaultRestrictions">
            <summary>
            Gets the default binding restrictions for this type.
            </summary>
        </member>
        <member name="T:System.Json.JsonValueDynamicMetaObject.OperationSupport">
            <summary>
            Represents the level of support for operations.
            </summary>
        </member>
        <member name="F:System.Json.JsonValueDynamicMetaObject.OperationSupport.Supported">
            <summary>
            Operation fully supported on operands.
            </summary>
        </member>
        <member name="F:System.Json.JsonValueDynamicMetaObject.OperationSupport.NotSupported">
            <summary>
            Operation not supported on operand.
            </summary>
        </member>
        <member name="F:System.Json.JsonValueDynamicMetaObject.OperationSupport.NotSupportedOnJsonType">
            <summary>
            Operation not supported on a <see cref="T:System.Json.JsonValue"/> instance of certain <see cref="T:System.Json.JsonType"/> type.
            </summary>
        </member>
        <member name="F:System.Json.JsonValueDynamicMetaObject.OperationSupport.NotSupportedOnOperand">
            <summary>
            Operation not supported on second operand type.
            </summary>
        </member>
        <member name="F:System.Json.JsonValueDynamicMetaObject.OperationSupport.NotSupportedOnValueType">
            <summary>
             Operation not supported on second operand's value type.
            </summary>
        </member>
        <member name="T:System.Json.JsonValueDynamicMetaObject.ImplicitNumericTypeConverter">
            <summary>
            Helper class for numeric type coercion support.
            </summary>
        </member>
        <member name="F:System.Json.JsonValueDynamicMetaObject.ImplicitNumericTypeConverter.partialConversionTable">
            <summary>
            Table of implicit conversion types, the 'values' in the dictionary represent the type values the 'key' type
            can be converted to.
            </summary>
            <remarks>
            Observe that this table is not the full conversion table, for storage optimization some types have been factored
            out into a list; the algorithm that uses this table knows about this optimization.
            For reference see Implicit Conversion table in the MSDN http://msdn.microsoft.com/en-us/library/y5b434w4.aspx
                sbyte   -> short, int, long, float, double, or decimal
                byte    -> short, ushort, int, uint, long, ulong, float, double, or decimal
                short   -> int, long, float, double, or decimal
                ushort  -> int, uint, long, ulong, float, double, or decimal
                int     -> long, float, double, or decimal
                uint    -> long, ulong, float, double, or decimal
                long    -> float, double, or decimal
                char    -> ushort, int, uint, long, ulong, float, double, or decimal
                float   -> double
                ulong   -> float, double, or decimal
            </remarks>
        </member>
        <member name="F:System.Json.JsonValueDynamicMetaObject.ImplicitNumericTypeConverter.universalCoercionTypes">
            <summary>
            List of types most other types can be coerced to.
            </summary>
        </member>
        <member name="M:System.Json.JsonValueDynamicMetaObject.ImplicitNumericTypeConverter.TryGetCoercionType(System.Type,System.Type,System.Type@)">
            <summary>
            Attempts to coerce one type to another.
            </summary>
            <param name="thisType">The first type to be evaluated.</param>
            <param name="otherType">The second type to be evaluated.</param>
            <param name="coercedType">The coerced resulting type to be used.</param>
            <returns>true if the coercion exists, false otherwise.</returns>
        </member>
        <member name="T:System.Json.JsonValueLinqExtensions">
            <summary>
            This class extends the funcionality of the <see cref="T:System.Json.JsonValue"/> type for better Linq support . 
            </summary>
        </member>
        <member name="M:System.Json.JsonValueLinqExtensions.ToJsonArray(System.Collections.Generic.IEnumerable{System.Json.JsonValue})">
            <summary>
            Extension method for creating a <see cref="T:System.Json.JsonValue"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of <see cref="T:System.Json.JsonValue"/> types.
            </summary>
            <param name="items">The enumerable instance.</param>
            <returns>A <see cref="T:System.Json.JsonArray"/> created from the specified items.</returns>
        </member>
        <member name="M:System.Json.JsonValueLinqExtensions.ToJsonObject(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue}})">
            <summary>
            Extension method for creating a <see cref="T:System.Json.JsonValue"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> of <see cref="T:System.String"/> and <see cref="T:System.Json.JsonValue"/> types.
            </summary>
            <param name="items">The enumerable instance.</param>
            <returns>A <see cref="T:System.Json.JsonValue"/> created from the specified items.</returns>
        </member>
        <member name="T:System.Json.JsonWebToken">
            <summary>
            Represents a JSON Web Token (JWT) as defined by the spec http://self-issued.info/docs/draft-jones-json-web-token.html.
            </summary>
        </member>
        <member name="M:System.Json.JsonWebToken.#ctor">
            <summary>
            Creates a JSON Web Token (JWT) without any headers, claims or signature.
            </summary>
        </member>
        <member name="M:System.Json.JsonWebToken.Parse(System.String)">
            <summary>
            Creates a JsonWebToken from the specified string representation. No signature verification is performed.
            </summary>
            <param name="rawToken">The JSON Web Token</param>
            <returns>The <see cref="T:System.Json.JsonWebToken"/>.</returns>
        </member>
        <member name="M:System.Json.JsonWebToken.TryParse(System.String,System.Json.JsonWebToken@)">
            <summary>
            Try to parse a JsonWebToken from the specified string representation. No signature verification is performed. 
            </summary>
            <param name="rawToken">The raw token string to be parsed</param>
            <param name="token">The JSON Web Token object parsed from the input</param>
            <returns>Boolean result to indicate whether the parsing has succeeded.</returns>
        </member>
        <member name="M:System.Json.JsonWebToken.ParseAndAuthenticate(System.String,System.String)">
            <summary>
            Creates a JsonWebToken from the specified string representation and validates the signature.
            </summary>
            <param name="rawToken">The JSON Web Token</param>
            <param name="key">The base64 encoded key used by the cryptographic algorithm to validate the signature.</param>
            <remarks>The JSON web token is expected to be signed with an HMAC with SHA-256 cryptographic algorithm. An exception is thrown otherwise.</remarks>
            <returns>The validated <see cref="T:System.Json.JsonWebToken"/>.</returns>
        </member>
        <member name="M:System.Json.JsonWebToken.ParseAndAuthenticate(System.String,System.Byte[])">
            <summary>
            Creates a JsonWebToken from the specified string representation and validates the signature.
            </summary>
            <param name="rawToken">The JSON Web Token</param>
            <param name="key">The key used by the cryptographic algorithm to validate the signature.</param>
            <remarks>The JSON web token is expected to be signed with an HMAC with SHA-256 cryptographic algorithm. An exception is thrown otherwise.</remarks>
            <returns>The validated <see cref="T:System.Json.JsonWebToken"/>.</returns>
        </member>
        <member name="M:System.Json.JsonWebToken.ParseAndAuthenticate(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Creates a JsonWebToken from the specified string representation and validates the signature.
            </summary>
            <param name="rawToken">The JSON Web Token</param>
            <param name="certificate">The X.509 certificate used by the cryptographic algorithm to validate the signature.</param>
            <remarks>The JSON web token is expected to be signed with a RSA with SHA-256 cryptographic algorithm. An exception is thrown otherwise.</remarks>
            <returns>The validated <see cref="T:System.Json.JsonWebToken"/>.</returns>
        </member>
        <member name="M:System.Json.JsonWebToken.VerifySignature(System.Byte[])">
            <summary>
            Verify the signature of the JSON web token given a key blob
            </summary>
            <param name="key">The key used by the cryptographic algorithm to validate the signature.</param>
        </member>
        <member name="M:System.Json.JsonWebToken.VerifySignature(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Verify the signature of the JSON web token given a certificate
            </summary>
            <param name="certificate">The X.509 certificate used by the cryptographic algorithm to validate the signature.</param>
        </member>
        <member name="M:System.Json.JsonWebToken.Serialize">
            <summary>
            Provides the string representation of the JSON Web Token.
            </summary>
            <returns>The encoded JSON web token.</returns>
        </member>
        <member name="M:System.Json.JsonWebToken.Sign(System.String)">
            <summary>
            Signs the JSON web token using the specified symmetric key and the HMAC cryptographic algorithm specified by the Algorithm property.
            </summary>
            <param name="key">Base 64 encoded symmetric key value.</param>
            <returns>The encoded JSON web token.</returns>
        </member>
        <member name="M:System.Json.JsonWebToken.Sign(System.Byte[])">
            <summary>
            Signs the JSON web token using the specified symmetric key and the HMAC cryptographic algorithm specified by the Algorithm property.
            </summary>
            <param name="key">The symmetric key value.</param>
            <returns>The encoded JSON web token.</returns>
        </member>
        <member name="M:System.Json.JsonWebToken.Sign(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Signs the JSON web token using the key from the specified certificate and the RSA cryptographic algorithm specified by the Algorithm property.
            </summary>
            <param name="certificate">The X.509 certificate used to sign the token.</param>
            <returns>The encoded JSON web token.</returns>
        </member>
        <member name="M:System.Json.JsonWebToken.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents an un-encoded representation of the JSON web token.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents an un-encoded representation of the JSON web token.
            </returns>
        </member>
        <member name="M:System.Json.JsonWebToken.StringToByteArray(System.String)">
            <summary>
            Converts a string-encoded hex value (e.g. an X.509 Certificate thumbprint) into a byte array.
            </summary>
            <param name="str">The string to be converted to a byte array.</param>
            <returns>Return the byte array corresponding to the input string.</returns>
        </member>
        <member name="M:System.Json.JsonWebToken.EncodeBase64UrlWithNoPadding(System.Byte[])">
            <summary>
            Encodes the specified bytes as a base64url string (as defined in RFC4648), with no padding characters ('=').
            </summary>
            <param name="arg">The bytes to encode as a base64url string with no padding.</param>
            <returns>Returns the encoded base64url string, with no padding.</returns>
        </member>
        <member name="M:System.Json.JsonWebToken.DecodeBase64UrlWithNoPadding(System.String)">
            <summary>
            Decodes the specified base64url string (as defined in RFC4648) that has no padding characters ('=').
            </summary>
            <param name="arg">The base64url string that has no padding.</param>
            <returns>Returns the bytes decoded from the base64url string with no padding.</returns>
        </member>
        <member name="M:System.Json.JsonWebToken.TryParseInternal(System.String,System.Json.JsonWebToken@,System.String@)">
            <summary>
            TryParseInternal parses the rawToken.
            </summary>
            <param name="rawToken">The rawToken to be parsed</param>
            <param name="token">The returned JsonWebToken</param>
            <param name="errorMessage">The error message due to bad argument of the rawToken</param>
            <returns>Boolean result to indicate whether the parsing has succeeded.</returns>
        </member>
        <member name="M:System.Json.JsonWebToken.GetHeaderSegment">
            <summary>
            Returns the JWT Header Segment.
            </summary>
            <remarks>
            A JWT Token Segment containing a base64url encoded JSON object that describes the cryptographic operations applied to the JWT Header Segment and 
            the JWT Claim Segment. The JWT Header Segment is the JWS Header Input for creating a JSON Web Signature for the JWT.
            </remarks>
            <returns>The JWT header segment.</returns>
        </member>
        <member name="M:System.Json.JsonWebToken.GetClaimSegment">
            <summary>
            Returns the JWT Claim Segment.
            </summary>
            <remarks>
            A JWT Token Segment containing a base64url encoded JSON object that encodes the claims contained in the JWT. The JWT Claim Segment is the JWS Payload Input 
            for creating a JSON Web Signature for the JWT. 
            </remarks>
            <returns>The JWT Claims Segment.</returns>
        </member>
        <member name="P:System.Json.JsonWebToken.Headers">
            <summary>
            Gets all the headers within the token, including the Algorithm.
            </summary>
        </member>
        <member name="P:System.Json.JsonWebToken.Claims">
            <summary>
            Gets all the claims within the token, including the ExpirationTime, NotBefore, IssuedAt, Issuer and Audience.
            </summary>
        </member>
        <member name="P:System.Json.JsonWebToken.Algorithm">
            <summary>
            Gets or sets the alg (algorithm) header parameter identifies the cryptographic algorithm used to secure the JWT token.
            </summary>
            <value>
            The algorithm.
            </value>
        </member>
        <member name="P:System.Json.JsonWebToken.ExpirationTime">
            <summary>
            Gets or sets the exp (expiration time) claim identifying the time on or after which the token MUST NOT be accepted for processing.
            The processing of the exp claim requires that the current date/time MUST be before the expiration date/time listed in the exp claim.
            Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew. This claim is OPTIONAL.
            </summary>
            <remarks>The JWT header stores the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the desired date/time.</remarks>
            <value>
            The expiration time.
            </value>
        </member>
        <member name="P:System.Json.JsonWebToken.NotBefore">
            <summary>
            Gets or sets the nbf (not before) claim identifying the time before which the token MUST NOT be accepted for processing.
            The processing of the nbf claim requires that the current date/time MUST be after or equal to the not-before date/time listed in the nbf claim.
            Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew. This claim is OPTIONAL.
            </summary>
            <remarks>The JWT header stores the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the desired date/time.</remarks>
        </member>
        <member name="P:System.Json.JsonWebToken.IssuedAt">
            <summary>
            Gets or sets the iat (issued at) claim identifying the time at which the JWT was issued. This claim can be used to determine the age of the token.
            This claim is OPTIONAL.
            </summary>
            <remarks>The JWT header stores the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the desired date/time.</remarks>
        </member>
        <member name="P:System.Json.JsonWebToken.Issuer">
            <summary>
            Gets or sets the iss (issuer) claim identifying the principal that issued the JWT. The processing of this claim is generally application specific.
            The iss value is case sensitive. This claim is OPTIONAL. 
            </summary>
        </member>
        <member name="P:System.Json.JsonWebToken.Audience">
            <summary>
            Gets or sets the aud (audience) claim identifying the audience that the JWT is intended for. The principal intended to process the JWT MUST be identified 
            by the value of the audience claim. If the principal processing the claim does not identify itself with the identifier in the aud claim value 
            then the JWT MUST be rejected. The interpretation of the contents of the audience value is generally application specific. 
            The value is case sensitive. This claim is OPTIONAL.
            </summary>
        </member>
        <member name="P:System.Json.JsonWebToken.NameIdentifier">
            <summary>
            Gets or sets the name identifier claim.
            </summary>
        </member>
        <member name="P:System.Json.JsonWebToken.Actor">
            <summary>
            Gets or sets the actor claim.
            </summary>
        </member>
        <member name="P:System.Json.JsonWebToken.IdentityProvider">
            <summary>
            Gets or sets the identity provider claim.
            </summary>
        </member>
        <member name="P:System.Json.JsonWebToken.IsSigned">
            <summary>
            Gets a value indicating whether the token is signed or not.
            </summary>
        </member>
        <member name="T:System.Json.JsonWebToken.JsonWebTokenAlgorithms">
            <summary>
            Defines algorithms used to sign the contents of the JSON Web Token (JWT) Header and Claim Segments, to produce the Crypto Segment value.
            </summary>
        </member>
        <member name="F:System.Json.JsonWebToken.JsonWebTokenAlgorithms.None">
            <summary>
            The JSON Web Token (JWT) is not signed.
            </summary>
        </member>
        <member name="F:System.Json.JsonWebToken.JsonWebTokenAlgorithms.HmacSha256">
            <summary>
            HMAC using SHA-256 hash algorithm.
            </summary>
        </member>
        <member name="F:System.Json.JsonWebToken.JsonWebTokenAlgorithms.HmacSha384">
            <summary>
            HMAC using SHA-384 hash algorithm.
            </summary>
        </member>
        <member name="F:System.Json.JsonWebToken.JsonWebTokenAlgorithms.HmacSha512">
            <summary>
            HMAC using SHA-512 hash algorithm.
            </summary>
        </member>
        <member name="F:System.Json.JsonWebToken.JsonWebTokenAlgorithms.RsaSha256">
            <summary>
            RSA using SHA-256 hash algorithm.
            </summary>
        </member>
        <member name="F:System.Json.JsonWebToken.JsonWebTokenAlgorithms.RsaSha384">
            <summary>
            RSA using SHA-384 hash algorithm.
            </summary>
        </member>
        <member name="F:System.Json.JsonWebToken.JsonWebTokenAlgorithms.RsaSha512">
            <summary>
            RSA using SHA-512 hash algorithm.
            </summary>
        </member>
        <member name="F:System.Json.JsonWebToken.JsonWebTokenAlgorithms.EcdsaP256Sha256">
            <summary>
            ECDSA using P-256 curve and SHA-256 hash algorithm.
            </summary>
        </member>
        <member name="F:System.Json.JsonWebToken.JsonWebTokenAlgorithms.EcdsaP384Sha384">
            <summary>
            ECDSA using P-384 curve and SHA-384 hash algorithm.
            </summary>
        </member>
        <member name="F:System.Json.JsonWebToken.JsonWebTokenAlgorithms.EcdsaP512Sha512">
            <summary>
            ECDSA using P-512 curve and SHA-512 hash algorithm.
            </summary>
        </member>
        <member name="T:System.Json.NGenWrapper`1">
            <summary>
            Struct that wraps values which cause JIT compilation at runtime.
            This Struct is added to solve the FxCop warning CA908 in JsonObject.cs.
            </summary>
            <typeparam name="T">Wrapped type.</typeparam>
        </member>
        <member name="F:System.Json.NGenWrapper`1.Value">
            <summary>
            Value of type T which represents the actual data which is currently in hold.
            </summary>
        </member>
        <member name="M:System.Json.NGenWrapper`1.#ctor(`0)">
            <summary>
            Creates an instance of the <see cref="T:System.Json.NGenWrapper`1"/> class
            </summary>
            <param name="value">The wrapped object of T</param>
        </member>
        <member name="M:System.Json.NGenWrapper`1.op_Implicit(System.Json.NGenWrapper{`0})~`0">
            <summary>
            Cast operator from <see cref="T:System.Json.NGenWrapper`1"/> to <typeparamref name="T"/>
            </summary>
            <param name="value">Object in type <see cref="T:System.Json.NGenWrapper`1"/></param>
            <returns>Object in type <typeparamref name="T">The wrapped element type</typeparamref></returns>
            <typeparamref name="T">The wrapped element type</typeparamref>
        </member>
        <member name="M:System.Json.NGenWrapper`1.op_Implicit(`0)~System.Json.NGenWrapper{`0}">
            <summary>
            Cast operator from <typeparamref name="T"/> to <see cref="T:System.Json.NGenWrapper`1"/>
            </summary>
            <param name="value">Object in type <typeparamref name="T"/></param>
            <returns>Object in type <see cref="T:System.Json.NGenWrapper`1"/></returns>
            <typeparamref name="T">The wrapped element type</typeparamref>
        </member>
        <member name="T:System.Runtime.Serialization.Json.JsonValueExtensions">
            <summary>
            This class extends the functionality of the <see cref="T:System.Json.JsonValue"/> type. 
            </summary>
        </member>
        <member name="M:System.Runtime.Serialization.Json.JsonValueExtensions.CreateFrom(System.Object)">
            <summary>
            Creates a <see cref="T:System.Json.JsonValue"/> object based on an arbitrary CLR object.
            </summary>
            <param name="value">The object to be converted to <see cref="T:System.Json.JsonValue"/>.</param>
            <returns>The <see cref="T:System.Json.JsonValue"/> which represents the given object.</returns>
            <remarks>The conversion is done through the <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer"/>;
            the object is first serialized into JSON using the serializer, then parsed into a <see cref="T:System.Json.JsonValue"/>
            object.</remarks>
        </member>
        <member name="M:System.Runtime.Serialization.Json.JsonValueExtensions.Load(System.Xml.XmlDictionaryReader)">
            <summary>
            Deserializes JSON from a XML reader which implements the
            <a href="http://msdn.microsoft.com/en-us/library/bb924435.aspx">mapping between JSON and XML</a>.
            </summary>
            <param name="jsonReader">The <see cref="T:System.Xml.XmlDictionaryReader"/> which
            exposes JSON as XML.</param>
            <returns>The <see cref="T:System.Json.JsonValue"/> that represents the parsed
            JSON/XML as a CLR type.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.Json.JsonValueExtensions.Save(System.Json.JsonValue,System.Xml.XmlDictionaryWriter)">
            <summary>
            Serializes this <see cref="T:System.Json.JsonValue"/> CLR type into a JSON/XML writer using the
            <a href="http://msdn.microsoft.com/en-us/library/bb924435.aspx">mapping between JSON and XML</a>.
            </summary>
            <param name="jsonValue">The <see cref="T:System.Json.JsonValue"/> instance this method extension is to be applied to.</param>
            <param name="jsonWriter">The JSON/XML writer used to serialize this instance.</param>
        </member>
        <member name="M:System.Runtime.Serialization.Json.JsonValueExtensions.TryReadAsType``1(System.Json.JsonValue,``0@)">
            <summary>
            Attempts to convert this <see cref="T:System.Json.JsonValue"/> instance into the type T.
            </summary>
            <typeparam name="T">The type to which the conversion is being performed.</typeparam>
            <param name="jsonValue">The <see cref="T:System.Json.JsonValue"/> instance this method extension is to be applied to.</param>
            <param name="valueOfT">An instance of T initialized with this instance, or the default
            value of T, if the conversion cannot be performed.</param>
            <returns>true if this <see cref="T:System.Json.JsonValue"/> instance can be read as type T; otherwise, false.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.Json.JsonValueExtensions.ReadAsType``1(System.Json.JsonValue)">
            <summary>
            Attempts to convert this <see cref="T:System.Json.JsonValue"/> instance into the type T.
            </summary>
            <typeparam name="T">The type to which the conversion is being performed.</typeparam>
            <param name="jsonValue">The <see cref="T:System.Json.JsonValue"/> instance this method extension is to be applied to.</param>
            <returns>An instance of T initialized with the <see cref="T:System.Json.JsonValue"/> value
            specified if the conversion.</returns>
            <exception cref="T:System.NotSupportedException">If this <see cref="T:System.Json.JsonValue"/> value cannot be
            converted into the type T.</exception>
        </member>
        <member name="M:System.Runtime.Serialization.Json.JsonValueExtensions.ReadAsType``1(System.Json.JsonValue,``0)">
            <summary>
            Attempts to convert this <see cref="T:System.Json.JsonValue"/> instance into the type T, returning a fallback value
            if the conversion fails.
            </summary>
            <typeparam name="T">The type to which the conversion is being performed.</typeparam>
            <param name="jsonValue">The <see cref="T:System.Json.JsonValue"/> instance this method extension is to be applied to.</param>
            <param name="fallback">A fallback value to be retuned in case the conversion cannot be performed.</param>
            <returns>An instance of T initialized with the <see cref="T:System.Json.JsonValue"/> value
            specified if the conversion succeeds or the specified fallback value if it fails.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.Json.JsonValueExtensions.ReadAsType(System.Json.JsonValue,System.Type)">
            <summary>
            Attempts to convert this <see cref="T:System.Json.JsonValue"/> instance into an instance of the specified type.
            </summary>
            <param name="jsonValue">The <see cref="T:System.Json.JsonValue"/> instance this method extension is to be applied to.</param>
            <param name="type">The type to which the conversion is being performed.</param>
            <returns>An object instance initialized with the <see cref="T:System.Json.JsonValue"/> value
            specified if the conversion.</returns>
            <exception cref="T:System.NotSupportedException">If this <see cref="T:System.Json.JsonValue"/> value cannot be
            converted into the type T.</exception>
        </member>
        <member name="M:System.Runtime.Serialization.Json.JsonValueExtensions.TryReadAsType(System.Json.JsonValue,System.Type,System.Object@)">
            <summary>
            Attempts to convert this <see cref="T:System.Json.JsonValue"/> instance into an instance of the specified type.
            </summary>
            <param name="jsonValue">The <see cref="T:System.Json.JsonValue"/> instance this method extension is to be applied to.</param>
            <param name="type">The type to which the conversion is being performed.</param>
            <param name="value">An object to be initialized with this instance or null if the conversion cannot be performed.</param>
            <returns>true if this <see cref="T:System.Json.JsonValue"/> instance can be read as the specified type; otherwise, false.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.Json.JsonValueExtensions.PrettyPrint(System.Json.JsonValue)">
            <summary>
            Formats the <see cref="T:System.Json.JsonValue"/> in order to make it easier to read.
            </summary>
            <param name="jv">The value to format.</param>
            <returns>The re-formatted representation.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.Json.JsonValueExtensions.CanConvertToClrCollection(System.Json.JsonValue,System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Json.JsonValue"/> instance can be converted to the specified collection <see cref="T:System.Type"/>.
            </summary>
            <param name="jsonValue">The instance to be converted.</param>
            <param name="collectionType">The collection type to convert the instance to.</param>
            <returns>true if the instance can be converted, false otherwise</returns>
        </member>
        <member name="P:System.Runtime.Serialization.Json.JsonValueExtensions.CreateFromTypeStackInfo.JsonObject">
            <summary>
            Gets of sets
            </summary>
        </member>
        <member name="P:System.Runtime.Serialization.Json.JsonValueExtensions.CreateFromTypeStackInfo.DynamicObject">
            <summary>
            Gets of sets
            </summary>
        </member>
        <member name="P:System.Runtime.Serialization.Json.JsonValueExtensions.CreateFromTypeStackInfo.Keys">
            <summary>
            Gets of sets
            </summary>
        </member>
    </members>
</doc>
