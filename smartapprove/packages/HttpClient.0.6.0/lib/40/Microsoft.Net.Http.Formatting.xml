<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Net.Http.Formatting</name>
    </assembly>
    <members>
        <member name="M:System.Net.Http.SR.CannotHaveNullInList(System.Object)">
            <summary>Gets localized string like: A null '{0}' is not valid.</summary>
            <param name="param0">Parameter 0 for string: A null '{0}' is not valid.</param>
        </member>
        <member name="M:System.Net.Http.SR.CannotUseMediaRangeForSupportedMediaType(System.Object,System.Object)">
            <summary>Gets localized string like: The '{0}' of '{1}' cannot be used as a supported media type because it is a media range.</summary>
            <param name="param0">Parameter 0 for string: The '{0}' of '{1}' cannot be used as a supported media type because it is a media range.</param>
            <param name="param1">Parameter 1 for string: The '{0}' of '{1}' cannot be used as a supported media type because it is a media range.</param>
        </member>
        <member name="M:System.Net.Http.SR.CannotUseNullValueType(System.Object,System.Object)">
            <summary>Gets localized string like: The '{0}' type cannot accept a null value for the value type '{1}'.</summary>
            <param name="param0">Parameter 0 for string: The '{0}' type cannot accept a null value for the value type '{1}'.</param>
            <param name="param1">Parameter 1 for string: The '{0}' type cannot accept a null value for the value type '{1}'.</param>
        </member>
        <member name="M:System.Net.Http.SR.CannotUseThisParameterType(System.Object,System.Object)">
            <summary>Gets localized string like: The type '{0}' cannot be used as the type parameter for '{1}'.</summary>
            <param name="param0">Parameter 0 for string: The type '{0}' cannot be used as the type parameter for '{1}'.</param>
            <param name="param1">Parameter 1 for string: The type '{0}' cannot be used as the type parameter for '{1}'.</param>
        </member>
        <member name="M:System.Net.Http.SR.ContentDispositionInvalidFileName(System.Object,System.Object)">
            <summary>Gets localized string like: '{0}' did not contain a valid file name property: '{1}'.</summary>
            <param name="param0">Parameter 0 for string: '{0}' did not contain a valid file name property: '{1}'.</param>
            <param name="param1">Parameter 1 for string: '{0}' did not contain a valid file name property: '{1}'.</param>
        </member>
        <member name="M:System.Net.Http.SR.FormUrlEncodedParseError(System.Object)">
            <summary>Gets localized string like: Error parsing HTML form URL-encoded data, byte {0}.</summary>
            <param name="param0">Parameter 0 for string: Error parsing HTML form URL-encoded data, byte {0}.</param>
        </member>
        <member name="M:System.Net.Http.SR.HttpInvalidStatusCode(System.Object,System.Object,System.Object)">
            <summary>Gets localized string like: Invalid HTTP status code: '{0}'. The status code must be between {1} and {2}.</summary>
            <param name="param0">Parameter 0 for string: Invalid HTTP status code: '{0}'. The status code must be between {1} and {2}.</param>
            <param name="param1">Parameter 1 for string: Invalid HTTP status code: '{0}'. The status code must be between {1} and {2}.</param>
            <param name="param2">Parameter 2 for string: Invalid HTTP status code: '{0}'. The status code must be between {1} and {2}.</param>
        </member>
        <member name="M:System.Net.Http.SR.HttpInvalidVersion(System.Object,System.Object)">
            <summary>Gets localized string like: Invalid HTTP version: '{0}'. The version must start with the characters '{1}'.</summary>
            <param name="param0">Parameter 0 for string: Invalid HTTP version: '{0}'. The version must start with the characters '{1}'.</param>
            <param name="param1">Parameter 1 for string: Invalid HTTP version: '{0}'. The version must start with the characters '{1}'.</param>
        </member>
        <member name="M:System.Net.Http.SR.HttpMessageContentAlreadyRead(System.Object,System.Object)">
            <summary>Gets localized string like: The '{0}' of the '{1}' has already been read.</summary>
            <param name="param0">Parameter 0 for string: The '{0}' of the '{1}' has already been read.</param>
            <param name="param1">Parameter 1 for string: The '{0}' of the '{1}' has already been read.</param>
        </member>
        <member name="M:System.Net.Http.SR.HttpMessageContentStreamMustBeSeekable(System.Object,System.Object)">
            <summary>Gets localized string like: The '{0}' must be seekable in order to create an '{1}' instance containing an entity body.  </summary>
            <param name="param0">Parameter 0 for string: The '{0}' must be seekable in order to create an '{1}' instance containing an entity body.  </param>
            <param name="param1">Parameter 1 for string: The '{0}' must be seekable in order to create an '{1}' instance containing an entity body.  </param>
        </member>
        <member name="M:System.Net.Http.SR.HttpMessageInvalidMediaType(System.Object,System.Object)">
            <summary>Gets localized string like: Invalid '{0}' instance provided. It does not have a content type header with a value of '{1}'.</summary>
            <param name="param0">Parameter 0 for string: Invalid '{0}' instance provided. It does not have a content type header with a value of '{1}'.</param>
            <param name="param1">Parameter 1 for string: Invalid '{0}' instance provided. It does not have a content type header with a value of '{1}'.</param>
        </member>
        <member name="M:System.Net.Http.SR.HttpMessageParserError(System.Object,System.Object)">
            <summary>Gets localized string like: Error parsing HTTP message header byte {0} of message {1}.</summary>
            <param name="param0">Parameter 0 for string: Error parsing HTTP message header byte {0} of message {1}.</param>
            <param name="param1">Parameter 1 for string: Error parsing HTTP message header byte {0} of message {1}.</param>
        </member>
        <member name="M:System.Net.Http.SR.HttpMessageParserInvalidHostCount(System.Object,System.Object)">
            <summary>Gets localized string like: An invalid number of '{0}' header fields were present in the HTTP Request. It must contain exactly one '{0}' header field but found {1}.</summary>
            <param name="param0">Parameter 0 for string: An invalid number of '{0}' header fields were present in the HTTP Request. It must contain exactly one '{0}' header field but found {1}.</param>
            <param name="param1">Parameter 1 for string: An invalid number of '{0}' header fields were present in the HTTP Request. It must contain exactly one '{0}' header field but found {1}.</param>
        </member>
        <member name="M:System.Net.Http.SR.HttpMessageParserInvalidUriScheme(System.Object,System.Object)">
            <summary>Gets localized string like: Invalid URI scheme: '{0}'. The URI scheme must be a valid '{1}' scheme.</summary>
            <param name="param0">Parameter 0 for string: Invalid URI scheme: '{0}'. The URI scheme must be a valid '{1}' scheme.</param>
            <param name="param1">Parameter 1 for string: Invalid URI scheme: '{0}'. The URI scheme must be a valid '{1}' scheme.</param>
        </member>
        <member name="M:System.Net.Http.SR.HttpMessageParserMissingContentLength(System.Object)">
            <summary>Gets localized string like: HTTP messages containing an entity body must include a valid '{0}' header field.</summary>
            <param name="param0">Parameter 0 for string: HTTP messages containing an entity body must include a valid '{0}' header field.</param>
        </member>
        <member name="M:System.Net.Http.SR.InvalidMediaRange(System.Object)">
            <summary>Gets localized string like: The value '{0}' is not a valid media range.</summary>
            <param name="param0">Parameter 0 for string: The value '{0}' is not a valid media range.</param>
        </member>
        <member name="M:System.Net.Http.SR.InvalidMediaType(System.Object,System.Object)">
            <summary>Gets localized string like: The media type string '{0}' is not a legal '{1}'.</summary>
            <param name="param0">Parameter 0 for string: The media type string '{0}' is not a legal '{1}'.</param>
            <param name="param1">Parameter 1 for string: The media type string '{0}' is not a legal '{1}'.</param>
        </member>
        <member name="M:System.Net.Http.SR.MediaTypeCanNotBeMediaRange(System.Object)">
            <summary>Gets localized string like: The media range '{0}' cannot be a supported media type.</summary>
            <param name="param0">Parameter 0 for string: The media range '{0}' cannot be a supported media type.</param>
        </member>
        <member name="M:System.Net.Http.SR.MediaTypeFormatterWriteUnsupported(System.Object)">
            <summary>Gets localized string like: The '{0}' media type formatter does not support writing content.</summary>
            <param name="param0">Parameter 0 for string: The '{0}' media type formatter does not support writing content.</param>
        </member>
        <member name="M:System.Net.Http.SR.MediaTypeMustBeSetBeforeWrite(System.Object,System.Object)">
            <summary>Gets localized string like: '{0}' must be set before '{1}' can serialize its content.</summary>
            <param name="param0">Parameter 0 for string: '{0}' must be set before '{1}' can serialize its content.</param>
            <param name="param1">Parameter 1 for string: '{0}' must be set before '{1}' can serialize its content.</param>
        </member>
        <member name="M:System.Net.Http.SR.MinParameterSize(System.Object)">
            <summary>Gets localized string like: The parameter must be greater than {0}.</summary>
            <param name="param0">Parameter 0 for string: The parameter must be greater than {0}.</param>
        </member>
        <member name="M:System.Net.Http.SR.MultipartFormDataStreamProviderNoContentDisposition(System.Object)">
            <summary>Gets localized string like: Did not find required '{0}' header field in MIME multipart body part.</summary>
            <param name="param0">Parameter 0 for string: Did not find required '{0}' header field in MIME multipart body part.</param>
        </member>
        <member name="M:System.Net.Http.SR.NonNullUriRequiredForMediaTypeMapping(System.Object)">
            <summary>Gets localized string like: A non-null request URI must be provided to determine if a '{0}' matches a given request or response message.</summary>
            <param name="param0">Parameter 0 for string: A non-null request URI must be provided to determine if a '{0}' matches a given request or response message.</param>
        </member>
        <member name="M:System.Net.Http.SR.NoReadSerializerAvailable(System.Object,System.Object,System.Object)">
            <summary>Gets localized string like: No '{0}' is available to read an object of type '{1}' with the media type '{2}'.</summary>
            <param name="param0">Parameter 0 for string: No '{0}' is available to read an object of type '{1}' with the media type '{2}'.</param>
            <param name="param1">Parameter 1 for string: No '{0}' is available to read an object of type '{1}' with the media type '{2}'.</param>
            <param name="param2">Parameter 2 for string: No '{0}' is available to read an object of type '{1}' with the media type '{2}'.</param>
        </member>
        <member name="M:System.Net.Http.SR.NoWriteSerializerAvailable(System.Object,System.Object,System.Object)">
            <summary>Gets localized string like: No '{0}' is available to write an object of type '{1}' with the media type '{2}'.</summary>
            <param name="param0">Parameter 0 for string: No '{0}' is available to write an object of type '{1}' with the media type '{2}'.</param>
            <param name="param1">Parameter 1 for string: No '{0}' is available to write an object of type '{1}' with the media type '{2}'.</param>
            <param name="param2">Parameter 2 for string: No '{0}' is available to write an object of type '{1}' with the media type '{2}'.</param>
        </member>
        <member name="M:System.Net.Http.SR.ObjectAndTypeDisagree(System.Object,System.Object)">
            <summary>Gets localized string like: An object of type '{0}' cannot be used with a type parameter of '{1}'.</summary>
            <param name="param0">Parameter 0 for string: An object of type '{0}' cannot be used with a type parameter of '{1}'.</param>
            <param name="param1">Parameter 1 for string: An object of type '{0}' cannot be used with a type parameter of '{1}'.</param>
        </member>
        <member name="M:System.Net.Http.SR.ReadAsMimeMultipartArgumentNoBoundary(System.Object,System.Object,System.Object)">
            <summary>Gets localized string like: Invalid '{0}' instance provided. It does not have a '{1}' content-type header with a '{2}' parameter.</summary>
            <param name="param0">Parameter 0 for string: Invalid '{0}' instance provided. It does not have a '{1}' content-type header with a '{2}' parameter.</param>
            <param name="param1">Parameter 1 for string: Invalid '{0}' instance provided. It does not have a '{1}' content-type header with a '{2}' parameter.</param>
            <param name="param2">Parameter 2 for string: Invalid '{0}' instance provided. It does not have a '{1}' content-type header with a '{2}' parameter.</param>
        </member>
        <member name="M:System.Net.Http.SR.ReadAsMimeMultipartArgumentNoContentType(System.Object,System.Object)">
            <summary>Gets localized string like: Invalid '{0}' instance provided. It does not have a content-type header value. '{0}' instances must have a content-type header starting with '{1}'.</summary>
            <param name="param0">Parameter 0 for string: Invalid '{0}' instance provided. It does not have a content-type header value. '{0}' instances must have a content-type header starting with '{1}'.</param>
            <param name="param1">Parameter 1 for string: Invalid '{0}' instance provided. It does not have a content-type header value. '{0}' instances must have a content-type header starting with '{1}'.</param>
        </member>
        <member name="M:System.Net.Http.SR.ReadAsMimeMultipartArgumentNoMultipart(System.Object,System.Object)">
            <summary>Gets localized string like: Invalid '{0}' instance provided. It does not have a content type header starting with '{1}'.</summary>
            <param name="param0">Parameter 0 for string: Invalid '{0}' instance provided. It does not have a content type header starting with '{1}'.</param>
            <param name="param1">Parameter 1 for string: Invalid '{0}' instance provided. It does not have a content type header starting with '{1}'.</param>
        </member>
        <member name="M:System.Net.Http.SR.ReadAsMimeMultipartHeaderParseError(System.Object,System.Object)">
            <summary>Gets localized string like: Error parsing MIME multipart body part header byte {0} of data segment {1}.</summary>
            <param name="param0">Parameter 0 for string: Error parsing MIME multipart body part header byte {0} of data segment {1}.</param>
            <param name="param1">Parameter 1 for string: Error parsing MIME multipart body part header byte {0} of data segment {1}.</param>
        </member>
        <member name="M:System.Net.Http.SR.ReadAsMimeMultipartParseError(System.Object,System.Object)">
            <summary>Gets localized string like: Error parsing MIME multipart message byte {0} of data segment {1}.</summary>
            <param name="param0">Parameter 0 for string: Error parsing MIME multipart message byte {0} of data segment {1}.</param>
            <param name="param1">Parameter 1 for string: Error parsing MIME multipart message byte {0} of data segment {1}.</param>
        </member>
        <member name="M:System.Net.Http.SR.ReadAsMimeMultipartStreamProviderException(System.Object)">
            <summary>Gets localized string like: The stream provider of type '{0}' threw an exception.</summary>
            <param name="param0">Parameter 0 for string: The stream provider of type '{0}' threw an exception.</param>
        </member>
        <member name="M:System.Net.Http.SR.ReadAsMimeMultipartStreamProviderNull(System.Object,System.Object)">
            <summary>Gets localized string like: The stream provider of type '{0}' returned null. It must return a writable '{1}' instance.</summary>
            <param name="param0">Parameter 0 for string: The stream provider of type '{0}' returned null. It must return a writable '{1}' instance.</param>
            <param name="param1">Parameter 1 for string: The stream provider of type '{0}' returned null. It must return a writable '{1}' instance.</param>
        </member>
        <member name="M:System.Net.Http.SR.ReadAsMimeMultipartStreamProviderReadOnly(System.Object,System.Object)">
            <summary>Gets localized string like: The stream provider of type '{0}' returned a read-only stream. It must return a writable '{1}' instance.</summary>
            <param name="param0">Parameter 0 for string: The stream provider of type '{0}' returned a read-only stream. It must return a writable '{1}' instance.</param>
            <param name="param1">Parameter 1 for string: The stream provider of type '{0}' returned a read-only stream. It must return a writable '{1}' instance.</param>
        </member>
        <member name="M:System.Net.Http.SR.ResponseMustReferenceRequest(System.Object,System.Object,System.Object,System.Object)">
            <summary>Gets localized string like: The '{0}' '{1}' parameter must have a reference to a '{2}' via the '{3}' property.</summary>
            <param name="param0">Parameter 0 for string: The '{0}' '{1}' parameter must have a reference to a '{2}' via the '{3}' property.</param>
            <param name="param1">Parameter 1 for string: The '{0}' '{1}' parameter must have a reference to a '{2}' via the '{3}' property.</param>
            <param name="param2">Parameter 2 for string: The '{0}' '{1}' parameter must have a reference to a '{2}' via the '{3}' property.</param>
            <param name="param3">Parameter 3 for string: The '{0}' '{1}' parameter must have a reference to a '{2}' via the '{3}' property.</param>
        </member>
        <member name="M:System.Net.Http.SR.SerializerCannotSerializeType(System.Object,System.Object)">
            <summary>Gets localized string like: The '{0}' serializer cannot serialize the type '{1}'.</summary>
            <param name="param0">Parameter 0 for string: The '{0}' serializer cannot serialize the type '{1}'.</param>
            <param name="param1">Parameter 1 for string: The '{0}' serializer cannot serialize the type '{1}'.</param>
        </member>
        <member name="M:System.Net.Http.SR.UnsupportedEncoding(System.Object,System.Object,System.Object)">
            <summary>Gets localized string like: The character encoding used by '{0}' for writing data must be either '{1}' or '{2}'.'</summary>
            <param name="param0">Parameter 0 for string: The character encoding used by '{0}' for writing data must be either '{1}' or '{2}'.'</param>
            <param name="param1">Parameter 1 for string: The character encoding used by '{0}' for writing data must be either '{1}' or '{2}'.'</param>
            <param name="param2">Parameter 2 for string: The character encoding used by '{0}' for writing data must be either '{1}' or '{2}'.'</param>
        </member>
        <member name="P:System.Net.Http.SR.ErrorReadingFormUrlEncodedStream">
            <summary>Gets localized string like: Error reading HTML form URL-encoded data stream.</summary>
        </member>
        <member name="P:System.Net.Http.SR.HttpMessageErrorReading">
            <summary>Gets localized string like: Error reading HTTP message.</summary>
        </member>
        <member name="P:System.Net.Http.SR.HttpMessageParserEmptyUri">
            <summary>Gets localized string like: HTTP Request URI cannot be an empty string.</summary>
        </member>
        <member name="P:System.Net.Http.SR.MimeMultipartParserBadBoundary">
            <summary>Gets localized string like: MIME multipart boundary cannot end with an empty space.</summary>
        </member>
        <member name="P:System.Net.Http.SR.MultipartStreamProviderInvalidLocalFileName">
            <summary>Gets localized string like: Could not determine a valid local file name for the multipart body part.</summary>
        </member>
        <member name="P:System.Net.Http.SR.NonZeroParameterSize">
            <summary>Gets localized string like: The parameter must be a non-zero positive integer.</summary>
        </member>
        <member name="P:System.Net.Http.SR.ReadAsMimeMultipartErrorReading">
            <summary>Gets localized string like: Error reading MIME multipart body part.</summary>
        </member>
        <member name="P:System.Net.Http.SR.ReadAsMimeMultipartErrorWriting">
            <summary>Gets localized string like: Error writing MIME multipart body part to output stream.</summary>
        </member>
        <member name="P:System.Net.Http.SR.ReadAsMimeMultipartUnexpectedTermination">
            <summary>Gets localized string like: Unexpected end of MIME multipart stream. MIME multipart message is not complete.</summary>
        </member>
        <member name="P:System.Net.Http.SR.UndefinedMediaType">
            <summary>Gets localized string like: 'undefined'</summary>
        </member>
        <member name="T:System.Net.Http.ContentDispositionHeaderValueExtensionMethods">
            <summary>
            Extension methods for <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue"/>.
            </summary>
        </member>
        <member name="M:System.Net.Http.ContentDispositionHeaderValueExtensionMethods.ExtractLocalFileName(System.Net.Http.Headers.ContentDispositionHeaderValue)">
            <summary>
            Returns a file name suitable for use on the local file system. The file name is extracted from 
            <see cref="P:System.Net.Http.Headers.ContentDispositionHeaderValue.FileNameStar"/> and <see cref="P:System.Net.Http.Headers.ContentDispositionHeaderValue.FileName"/>
            in that order.
            </summary>
            <param name="contentDisposition">The content disposition to extract a local file name from.</param>
            <returns>A file name (without any path components) suitable for use on local file system.</returns>
        </member>
        <member name="T:System.Net.Http.FormattingUtilities">
            <summary>
            Provides various internal utility functions
            </summary>
        </member>
        <member name="F:System.Net.Http.FormattingUtilities.HttpRequestedWithHeader">
            <summary>
            HTTP X-Requested-With header field name
            </summary>
        </member>
        <member name="F:System.Net.Http.FormattingUtilities.HttpRequestedWithHeaderValue">
            <summary>
            HTTP X-Requested-With header field value
            </summary>
        </member>
        <member name="F:System.Net.Http.FormattingUtilities.JsonNullLiteral">
            <summary>
            JSON literal for 'null'
            </summary>
        </member>
        <member name="F:System.Net.Http.FormattingUtilities.HttpHostHeader">
            <summary>
            HTTP Host header field name
            </summary>
        </member>
        <member name="F:System.Net.Http.FormattingUtilities.HttpVersionToken">
            <summary>
            HTTP Version token
            </summary>
        </member>
        <member name="F:System.Net.Http.FormattingUtilities.Utf8EncodingType">
            <summary>
            A <see cref="T:System.Type"/> representing <see cref="T:System.Text.UTF8Encoding"/>.
            </summary>
        </member>
        <member name="F:System.Net.Http.FormattingUtilities.Utf16EncodingType">
            <summary>
            A <see cref="T:System.Type"/> representing <see cref="T:System.Text.UnicodeEncoding"/>.
            </summary>
        </member>
        <member name="F:System.Net.Http.FormattingUtilities.HttpRequestMessageType">
            <summary>
            A <see cref="T:System.Type"/> representing <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
        </member>
        <member name="F:System.Net.Http.FormattingUtilities.HttpResponseMessageType">
            <summary>
            A <see cref="T:System.Type"/> representing <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
        </member>
        <member name="F:System.Net.Http.FormattingUtilities.HttpContentType">
            <summary>
            A <see cref="T:System.Type"/> representing <see cref="T:System.Net.Http.HttpContent"/>.
            </summary>
        </member>
        <member name="F:System.Net.Http.FormattingUtilities.DelegatingEnumerableGenericType">
            <summary>
            A <see cref="T:System.Type"/> representing <see cref="T:System.Net.Http.Formatting.DelegatingEnumerable`1"/>.
            </summary>
        </member>
        <member name="F:System.Net.Http.FormattingUtilities.EnumerableInterfaceGenericType">
            <summary>
            A <see cref="T:System.Type"/> representing <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="F:System.Net.Http.FormattingUtilities.QueryableInterfaceGenericType">
            <summary>
            A <see cref="T:System.Type"/> representing <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
        </member>
        <member name="F:System.Net.Http.FormattingUtilities.JsonValueType">
            <summary>
            A <see cref="T:System.Type"/> representing <see cref="T:System.Json.JsonValue"/>.
            </summary>
        </member>
        <member name="M:System.Net.Http.FormattingUtilities.IsJsonValueType(System.Type)">
            <summary>
            Determines whether <paramref name="type"/> is a <see cref="T:System.Json.JsonValue"/> type.
            </summary>
            <param name="type">The type to test.</param>
            <returns>
              <c>true</c> if <paramref name="type"/> is a <see cref="T:System.Json.JsonValue"/> type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Net.Http.FormattingUtilities.CreateEmptyContentHeaders">
            <summary>
            Creates an empty <see cref="P:System.Net.Http.FormattingUtilities.HttpContentHeaders"/> instance. The only way is to get it from a dummy 
            <see cref="T:System.Net.Http.HttpContent"/> instance.
            </summary>
            <returns>The created instance.</returns>
        </member>
        <member name="M:System.Net.Http.FormattingUtilities.ValidateCollection(System.Collections.ObjectModel.Collection{System.Net.Http.Headers.MediaTypeHeaderValue},System.Net.Http.Headers.MediaTypeHeaderValue[])">
            <summary>
            Ensure the actual collection is identical to the expected one
            </summary>
            <param name="actual">The actual collection of the instance</param>
            <param name="expected">The expected collection of the instance</param>
            <returns>Returns true if they are identical</returns>
        </member>
        <member name="M:System.Net.Http.FormattingUtilities.UnquoteToken(System.String)">
            <summary>
            Remove bounding quotes on a token if present
            </summary>
            <param name="token">Token to unquote.</param>
            <returns>Unquoted token.</returns>
        </member>
        <member name="P:System.Net.Http.FormattingUtilities.HttpContentHeaders">
            <summary>
            Gets the HTTP headers that are associated with <see cref="P:System.Net.Http.FormattingUtilities.HttpContentHeaders"/>.
            </summary>
        </member>
        <member name="T:System.Net.Http.Formatting.DelegatingEnumerable`1">
            <summary>
            Helper class to serialize <see cref="T:System.Collections.Generic.IEnumerable`1"/> types by delegating them through a concrete implementation."/&gt;.
            </summary>
            <typeparam name="T">The interface implementing <see cref="T:System.Collections.Generic.IEnumerable`1"/> to proxy.</typeparam>
        </member>
        <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.#ctor">
            <summary>
            Initialize a DelegatingEnumerable. This constructor is necessary for <see cref="T:System.Runtime.Serialization.DataContractSerializer"/> to work.
            </summary>
        </member>
        <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initialize a DelegatingEnumerable with an <see cref="T:System.Collections.Generic.IEnumerable`1"/>. This is a helper class to proxy <see cref="T:System.Collections.Generic.IEnumerable`1"/> interfaces for <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance to get the enumerator from.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.GetEnumerator">
            <summary>
            Get the enumerator of the associated <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <returns>The enumerator of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> source.</returns>
        </member>
        <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.Add(System.Object)">
            <summary>
            This method is not implemented but is required method for serialization to work. Do not use.
            </summary>
            <param name="item">The item to add. Unused.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator of the associated <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <returns>The enumerator of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> source.</returns>
        </member>
        <member name="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter">
            <summary>
            <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> class for handling HTML form URL-ended data, also known as <c>application/x-www-form-urlencoded</c>. 
            </summary>
        </member>
        <member name="T:System.Net.Http.Formatting.MediaTypeFormatter">
            <summary>
            Base class to handle serializing and deserializing strongly-typed objects using <see cref="T:System.Net.Http.ObjectContent"/>.
            </summary>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> class.
            </summary>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.OnGetResponseHeaders(System.Type,System.String,System.Net.Http.HttpResponseMessage)">
            <summary>
            Called from <see cref="M:System.Net.Http.Formatting.MediaTypeFormatter.GetResponseHeaders(System.Type,System.String,System.Net.Http.HttpResponseMessage)"/> to retrieve the response headers.
            </summary>
            <param name="objectType">The type of the object.  See <see cref="T:System.Net.Http.ObjectContent"/>.</param>
            <param name="mediaType">The media type.</param>
            <param name="responseMessage">The <see cref="T:System.Net.Http.HttpResponseMessage"/>.</param>
            <returns>The collection of response header key value pairs.</returns>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.CanReadType(System.Type)">
            <summary>
            Determines whether this <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> can deserialize
            an object of the specified type.
            </summary>
            <remarks>
            The base class unconditionally returns <c>true</c>.  Derived classes must
            override this to exclude types they cannot deserialize.
            </remarks>
            <param name="type">The type of object that will be deserialized.</param>
            <returns><c>true</c> if this <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> can deserialize an object of that type; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.CanWriteType(System.Type)">
            <summary>
            Determines whether this <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> can serialize
            an object of the specified type.
            </summary>
            <remarks>
            The base class unconditionally returns <c>true</c>.  Derived classes must
            override this to exclude types they cannot serialize.
            </remarks>
            <param name="type">The type of object that will be serialized.</param>
            <returns><c>true</c> if this <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> can serialize an object of that type; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.OnReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.Headers.HttpContentHeaders)">
            <summary>
            Called to read an object from the <paramref name="stream"/> asynchronously.
            Derived classes may override this to do custom deserialization.
            </summary>
            <param name="type">The type of the object to read.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which to read.</param>
            <param name="contentHeaders">The content headers from the respective request or response.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will yield an object instance when it completes.</returns>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.OnWriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.Headers.HttpContentHeaders,System.Net.TransportContext)">
            <summary>
            Called to write an object to the <paramref name="stream"/> asynchronously.
            </summary>
            <param name="type">The type of object to write.</param>
            <param name="value">The object instance to write.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to which to write.</param>
            <param name="contentHeaders">The content headers from the respective request or response.</param>
            <param name="context">The <see cref="T:System.Net.TransportContext"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will write the object to the stream asynchronously.</returns>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.OnReadFromStream(System.Type,System.IO.Stream,System.Net.Http.Headers.HttpContentHeaders)">
            <summary>
            Called to read an object from the <paramref name="stream"/>.
            Derived classes may override this to do custom deserialization.
            </summary>
            <param name="type">The type of the object to read.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which to read.</param>
            <param name="contentHeaders">The content headers from the respective request or response.</param>
            <returns>The object instance read from the <paramref name="stream"/>.</returns>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.OnWriteToStream(System.Type,System.Object,System.IO.Stream,System.Net.Http.Headers.HttpContentHeaders,System.Net.TransportContext)">
            <summary>
            Called to write an object to the <paramref name="stream"/>.
            </summary>
            <param name="type">The type of object to write.</param>
            <param name="value">The object instance to write.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to which to write.</param>
            <param name="contentHeaders">The content headers from the respective request or response.</param>
            <param name="context">The <see cref="T:System.Net.TransportContext"/>.</param>
        </member>
        <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.SupportedMediaTypes">
            <summary>
            Gets the mutable collection of <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> elements supported by
            this <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> instance.
            </summary>
        </member>
        <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.MediaTypeMappings">
            <summary>
            Gets the mutable collection of <see cref="T:System.Net.Http.Formatting.MediaTypeMapping"/> elements used
            by this <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> instance to determine the 
            <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> of requests or responses.
            </summary>
        </member>
        <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.IsModified">
            <summary>
            Gets a value indicating whether this instance is modified from the default settings.
            </summary>
            <value>
            <c>true</c> if this instance is modified; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.Encoding">
            <summary>
            Gets or sets the <see cref="P:System.Net.Http.Formatting.MediaTypeFormatter.Encoding"/> to use when reading and writing data.
            </summary>
            <value>
            The <see cref="P:System.Net.Http.Formatting.MediaTypeFormatter.Encoding"/> to use when reading and writing data.
            </value>
        </member>
        <member name="T:System.Net.Http.Formatting.MediaTypeFormatter.MediaTypeHeaderValueCollection">
            <summary>
            Collection class that validates it contains only <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instances
            that are not null and not media ranges.
            </summary>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.MediaTypeHeaderValueCollection.InsertItem(System.Int32,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Inserts the <paramref name="item"/> into the collection at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. It cannot be <c>null</c>.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.MediaTypeHeaderValueCollection.SetItem(System.Int32,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Replaces the element at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index of the item that should be replaced.</param>
            <param name="item">The new value for the element at the specified index.  It cannot be <c>null</c>.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter"/> class.
            </summary>
        </member>
        <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.CanReadType(System.Type)">
            <summary>
            Determines whether this <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter"/> can read objects
            of the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type of object that will be read.</param>
            <returns><c>true</c> if objects of this <paramref name="type"/> can be read, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.CanWriteType(System.Type)">
            <summary>
            Determines whether this <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter"/> can write objects
            of the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type of object that will be written.</param>
            <returns><c>true</c> if objects of this <paramref name="type"/> can be written, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.OnReadFromStream(System.Type,System.IO.Stream,System.Net.Http.Headers.HttpContentHeaders)">
            <summary>
            Called during deserialization to read an object of the specified <paramref name="type"/>
            from the specified <paramref name="stream"/>.
            </summary>
            <param name="type">The type of object to read.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which to read.</param>
            <param name="contentHeaders">The content headers associated with the request or response.</param>
            <returns>The object instance that has been read.</returns>
        </member>
        <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.OnWriteToStream(System.Type,System.Object,System.IO.Stream,System.Net.Http.Headers.HttpContentHeaders,System.Net.TransportContext)">
            <summary>
            Called during serialization to write an object of the specified <paramref name="type"/>
            to the specified <paramref name="stream"/>.
            </summary>
            <param name="type">The type of object to write.</param>
            <param name="value">The object to write.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to which to write.</param>
            <param name="contentHeaders">The content headers associated with the request or response.</param>
            <param name="context">The <see cref="T:System.Net.TransportContext"/>.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.ReadFormUrlEncoded(System.IO.Stream,System.Int32)">
            <summary>
            Reads all name-value pairs encoded as HTML Form URL encoded data and add them to 
            a collection as UNescaped URI strings.
            </summary>
            <param name="input">Stream to read from.</param>
            <param name="bufferSize">Size of the buffer used to read the contents.</param>
            <returns>Collection of name-value pairs.</returns>
        </member>
        <member name="P:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.DefaultMediaType">
            <summary>
            Gets the default media type for HTML Form URL encoded data, namely <c>application/x-www-form-urlencoded</c>.
            </summary>
            <value>
            Because <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> is mutable, the value
            returned will be a new instance every time.
            </value>
        </member>
        <member name="P:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.ReadBufferSize">
            <summary>
            Gets or sets the size of the buffer when reading the incoming stream.
            </summary>
            <value>
            The size of the read buffer.
            </value>
        </member>
        <member name="P:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.IsModified">
            <summary>
            Gets a value indicating whether this instance is modified from the default settings.
            </summary>
            <value>
            <c>true</c> if this instance is modified; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:System.Net.Http.Formatting.JsonMediaTypeFormatter">
            <summary>
            <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> class to handle Json.
            </summary>
        </member>
        <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter"/> class.
            </summary>
        </member>
        <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.SetSerializer(System.Type,System.Runtime.Serialization.Json.DataContractJsonSerializer)">
            <summary>
            Registers the <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer"/> to use to read or write
            the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type of object that will be serialized or deserialized with the <paramref name="serializer"/>.</param>
            <param name="serializer">The <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer"/> instance to use.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.SetSerializer``1(System.Runtime.Serialization.Json.DataContractJsonSerializer)">
            <summary>
            Registers the <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer"/> to use to read or write
            the specified <typeparamref name="T"/> type.
            </summary>
            <typeparam name="T">The type of object that will be serialized or deserialized with the <paramref name="serializer"/>.</typeparam>
            <param name="serializer">The <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer"/> instance to use.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.RemoveSerializer(System.Type)">
            <summary>
            Unregisters the serializer currently associated with the given <paramref name="type"/>.
            </summary>
            <remarks>
            Unless another serializer is registered for the <paramref name="type"/>, a default one will be created
            the next time an instance of the type needs to be serialized or deserialized.
            </remarks>
            <param name="type">The type of object whose serializer should be removed.</param>
            <returns><c>true</c> if a serializer was registered for the <paramref name="type"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.CanReadType(System.Type)">
            <summary>
            Determines whether this <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter"/> can read objects
            of the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type of object that will be read.</param>
            <returns><c>true</c> if objects of this <paramref name="type"/> can be read, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.CanWriteType(System.Type)">
            <summary>
            Determines whether this <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter"/> can write objects
            of the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type of object that will be written.</param>
            <returns><c>true</c> if objects of this <paramref name="type"/> can be written, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.OnReadFromStream(System.Type,System.IO.Stream,System.Net.Http.Headers.HttpContentHeaders)">
            <summary>
            Called during deserialization to read an object of the specified <paramref name="type"/>
            from the specified <paramref name="stream"/>.
            </summary>
            <param name="type">The type of object to read.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which to read.</param>
            <param name="contentHeaders">The content headers associated with the request or response.</param>
            <returns>The object instance that has been read.</returns>
        </member>
        <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.OnWriteToStream(System.Type,System.Object,System.IO.Stream,System.Net.Http.Headers.HttpContentHeaders,System.Net.TransportContext)">
            <summary>
            Called during serialization to write an object of the specified <paramref name="type"/>
            to the specified <paramref name="stream"/>.
            </summary>
            <param name="type">The type of object to write.</param>
            <param name="value">The object to write.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to which to write.</param>
            <param name="contentHeaders">The content headers associated with the request or response.</param>
            <param name="context">The <see cref="T:System.Net.TransportContext"/>.</param>
        </member>
        <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.DefaultMediaType">
            <summary>
            Gets the default media type for Json, namely "application/json".
            </summary>
            <remarks>
            The default media type does not have any <c>charset</c> parameter as 
            the <see cref="T:System.Text.Encoding"/> can be configured on a per <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter"/> 
            instance basis.
            </remarks>
            <value>
            Because <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> is mutable, the value
            returned will be a new instance every time.
            </value>
        </member>
        <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.CharacterEncoding">
            <summary>
            Gets or sets the <see cref="T:System.Text.Encoding"/> to use when writing data.
            </summary>
            <remarks>The default encoding is <see cref="T:System.Text.UTF8Encoding"/>.</remarks>
            <value>
            The <see cref="T:System.Text.Encoding"/> to use when writing data.
            </value>
        </member>
        <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.IsModified">
            <summary>
            Gets a value indicating whether this instance is modified from the default settings.
            </summary>
            <value>
            <c>true</c> if this instance is modified; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:System.Net.Http.Formatting.JsonValueMediaTypeFormatter">
            <summary>
            <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> class to handle <see cref="T:System.Json.JsonValue"/>.
            </summary>
        </member>
        <member name="M:System.Net.Http.Formatting.JsonValueMediaTypeFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.JsonValueMediaTypeFormatter"/> class.
            </summary>
        </member>
        <member name="M:System.Net.Http.Formatting.JsonValueMediaTypeFormatter.CanReadType(System.Type)">
            <summary>
            Determines whether this <see cref="T:System.Net.Http.Formatting.JsonValueMediaTypeFormatter"/> can read objects
            of the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type of object that will be read.</param>
            <returns><c>true</c> if objects of this <paramref name="type"/> can be read, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Net.Http.Formatting.JsonValueMediaTypeFormatter.CanWriteType(System.Type)">
            <summary>
            Determines whether this <see cref="T:System.Net.Http.Formatting.JsonValueMediaTypeFormatter"/> can write objects
            of the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type of object that will be written.</param>
            <returns><c>true</c> if objects of this <paramref name="type"/> can be written, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Net.Http.Formatting.JsonValueMediaTypeFormatter.OnReadFromStream(System.Type,System.IO.Stream,System.Net.Http.Headers.HttpContentHeaders)">
            <summary>
            Called during deserialization to read an object of the specified <paramref name="type"/>
            from the specified <paramref name="stream"/>.
            </summary>
            <param name="type">The type of object to read.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which to read.</param>
            <param name="contentHeaders">The content headers associated with the request or response.</param>
            <returns>The object instance that has been read.</returns>
        </member>
        <member name="M:System.Net.Http.Formatting.JsonValueMediaTypeFormatter.OnWriteToStream(System.Type,System.Object,System.IO.Stream,System.Net.Http.Headers.HttpContentHeaders,System.Net.TransportContext)">
            <summary>
            Called during serialization to write an object of the specified <paramref name="type"/>
            to the specified <paramref name="stream"/>.
            </summary>
            <param name="type">The type of object to write.</param>
            <param name="value">The object to write.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to which to write.</param>
            <param name="contentHeaders">The content headers associated with the request or response.</param>
            <param name="context">The <see cref="T:System.Net.TransportContext"/>.</param>
        </member>
        <member name="P:System.Net.Http.Formatting.JsonValueMediaTypeFormatter.DefaultMediaType">
            <summary>
            Gets the default media type for <see cref="T:System.Json.JsonValue"/>, namely "application/json".
            </summary>
            <value>
            Because <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> is mutable, the value
            returned will be a new instance every time.
            </value>
        </member>
        <member name="P:System.Net.Http.Formatting.JsonValueMediaTypeFormatter.JsonWriteOptions">
            <summary>
            Gets or sets the <see cref="T:System.Json.JsonSaveOptions"/> to use when writing out the contents.
            </summary>
            <value>
            The <see cref="T:System.Json.JsonSaveOptions"/> options.
            </value>
        </member>
        <member name="P:System.Net.Http.Formatting.JsonValueMediaTypeFormatter.IsModified">
            <summary>
            Gets a value indicating whether this instance is modified from the default settings.
            </summary>
            <value>
            <c>true</c> if this instance is modified; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:System.Net.Http.Formatting.MediaRangeMapping">
            <summary>
            Class that provides <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/>s for a request or response
            from a media range.
            </summary>
        </member>
        <member name="T:System.Net.Http.Formatting.MediaTypeMapping">
            <summary>
            An abstract base class used to create an association between <see cref="T:System.Net.Http.HttpRequestMessage"/> or 
            <see cref="T:System.Net.Http.HttpResponseMessage"/> instances that have certain characteristics 
            and a specific <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/>. 
            </summary>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeMapping.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Initializes a new instance of a <see cref="T:System.Net.Http.Formatting.MediaTypeMapping"/> with the
            given <paramref name="mediaType"/> value.
            </summary>
            <param name="mediaType">
            The <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> that is associated with <see cref="T:System.Net.Http.HttpRequestMessage"/> or 
            <see cref="T:System.Net.Http.HttpResponseMessage"/> instances that have the given characteristics of the 
            <see cref="T:System.Net.Http.Formatting.MediaTypeMapping"/>.
            </param>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeMapping.#ctor(System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:System.Net.Http.Formatting.MediaTypeMapping"/> with the
            given <paramref name="mediaType"/> value.
            </summary>
            <param name="mediaType">
            The <see cref="T:System.String"/> that is associated with <see cref="T:System.Net.Http.HttpRequestMessage"/> or 
            <see cref="T:System.Net.Http.HttpResponseMessage"/> instances that have the given characteristics of the 
            <see cref="T:System.Net.Http.Formatting.MediaTypeMapping"/>.
            </param>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
            <summary>
            Returns the quality of the match of the <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/>
            associated with <paramref name="request"/>.
            </summary>
            <param name="request">
            The <see cref="T:System.Net.Http.HttpRequestMessage"/> to evaluate for the characteristics 
            associated with the <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/>
            of the <see cref="T:System.Net.Http.Formatting.MediaTypeMapping"/>.
            </param> 
            <returns>
            The quality of the match. It must be between <c>0.0</c> and <c>1.0</c>.
            A value of <c>0.0</c> signifies no match.
            A value of <c>1.0</c> signifies a complete match.
            </returns>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeMapping.TryMatchMediaType(System.Net.Http.HttpResponseMessage)">
            <summary>
            Returns the quality of the match of the <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/>
            associated with <paramref name="response"/>.
            </summary>
            <param name="response">
            The <see cref="T:System.Net.Http.HttpResponseMessage"/> to evaluate for the characteristics 
            associated with the <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/>
            of the <see cref="T:System.Net.Http.Formatting.MediaTypeMapping"/>.
            </param> 
            <returns>
            The quality of the match. It must be between <c>0.0</c> and <c>1.0</c>.
            A value of <c>0.0</c> signifies no match.
            A value of <c>1.0</c> signifies a complete match.
            </returns>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeMapping.OnTryMatchMediaType(System.Net.Http.HttpRequestMessage)">
            <summary>
            Implemented in a derived class to determine if the <see cref="T:System.Net.Http.HttpRequestMessage"/> 
            should be associated with the <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/>
            of the <see cref="T:System.Net.Http.Formatting.MediaTypeMapping"/>. 
            </summary>
            <param name="request">
            The <see cref="T:System.Net.Http.HttpRequestMessage"/> to evaluate for the characteristics 
            associated with the <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/>
            of the <see cref="T:System.Net.Http.Formatting.MediaTypeMapping"/>.
            </param> 
            <returns>
            The quality of the match. It must be between <c>0.0</c> and <c>1.0</c>.
            A value of <c>0.0</c> signifies no match.
            A value of <c>1.0</c> signifies a complete match.
            </returns>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeMapping.OnTryMatchMediaType(System.Net.Http.HttpResponseMessage)">
            <summary>
            Implemented in a derived class to determine if the <see cref="T:System.Net.Http.HttpResponseMessage"/> 
            should be associated with the <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/>
            of the <see cref="T:System.Net.Http.Formatting.MediaTypeMapping"/>. 
            </summary>
            <param name="response">
            The <see cref="T:System.Net.Http.HttpResponseMessage"/> to evaluate for the characteristics 
            associated with the <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/>
            of the <see cref="T:System.Net.Http.Formatting.MediaTypeMapping"/>.
            </param> 
            <returns>
            The quality of the match. It must be between <c>0.0</c> and <c>1.0</c>.
            A value of <c>0.0</c> signifies no match.
            A value of <c>1.0</c> signifies a complete match.
            </returns>
        </member>
        <member name="P:System.Net.Http.Formatting.MediaTypeMapping.MediaType">
            <summary>
            Gets the <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> that is associated with <see cref="T:System.Net.Http.HttpRequestMessage"/> or 
            <see cref="T:System.Net.Http.HttpResponseMessage"/> instances that have the given characteristics of the 
            <see cref="T:System.Net.Http.Formatting.MediaTypeMapping"/>.
            </summary>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaRangeMapping.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.MediaRangeMapping"/> class.
            </summary>
            <param name="mediaRange">The <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> that provides a description
            of the media range.</param>
            <param name="mediaType">The <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> to return on a match.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaRangeMapping.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.MediaRangeMapping"/> class.
            </summary>
            <param name="mediaRange">The description of the media range.</param>
            <param name="mediaType">The media type to return on a match.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaRangeMapping.OnTryMatchMediaType(System.Net.Http.HttpRequestMessage)">
            <summary>
            Returns a value indicating whether this <see cref="T:System.Net.Http.Formatting.MediaRangeMapping"/>
            instance can provide a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> for the <paramref name="request"/>.
            </summary>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> to check.</param>
            <returns>This method always returns <c>0.0</c>.</returns>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaRangeMapping.OnTryMatchMediaType(System.Net.Http.HttpResponseMessage)">
            <summary>
            Returns a value indicating whether this <see cref="T:System.Net.Http.Formatting.MediaRangeMapping"/>
            instance can provide a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> for the <paramref name="response"/>.
            </summary>
            <param name="response">The <see cref="T:System.Net.Http.HttpResponseMessage"/> to check.</param>
            <returns>If this instance can match <paramref name="response"/>
            it returns the quality of the match otherwise <c>0.0</c>.</returns>
        </member>
        <member name="P:System.Net.Http.Formatting.MediaRangeMapping.MediaRange">
            <summary>
            Gets the <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/>
            describing the known media range.
            </summary>
        </member>
        <member name="T:System.Net.Http.Formatting.MediaTypeConstants">
            <summary>
            Constants related to media types.
            </summary>
        </member>
        <member name="P:System.Net.Http.Formatting.MediaTypeConstants.HtmlMediaType">
            <summary>
            Gets a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instance representing <c>text/html</c>.
            </summary>
            <value>
            A new <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instance representing <c>text/html</c>.
            </value>
        </member>
        <member name="P:System.Net.Http.Formatting.MediaTypeConstants.ApplicationXmlMediaType">
            <summary>
            Gets a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instance representing <c>application/xml</c>.
            </summary>
            <value>
            A new <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instance representing <c>application/xml</c>.
            </value>
        </member>
        <member name="P:System.Net.Http.Formatting.MediaTypeConstants.ApplicationJsonMediaType">
            <summary>
            Gets a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instance representing <c>application/json</c>.
            </summary>
            <value>
            A new <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instance representing <c>application/json</c>.
            </value>
        </member>
        <member name="P:System.Net.Http.Formatting.MediaTypeConstants.TextXmlMediaType">
            <summary>
            Gets a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instance representing <c>text/xml</c>.
            </summary>
            <value>
            A new <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instance representing <c>text/xml</c>.
            </value>
        </member>
        <member name="P:System.Net.Http.Formatting.MediaTypeConstants.TextJsonMediaType">
            <summary>
            Gets a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instance representing <c>text/json</c>.
            </summary>
            <value>
            A new <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instance representing <c>text/json</c>.
            </value>
        </member>
        <member name="P:System.Net.Http.Formatting.MediaTypeConstants.ApplicationFormUrlEncodedMediaType">
            <summary>
            Gets a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instance representing <c>application/x-www-form-urlencoded</c>.
            </summary>
            <value>
            A new <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instance representing <c>application/x-www-form-urlencoded</c>.
            </value>
        </member>
        <member name="T:System.Net.Http.Formatting.MediaTypeFormatterCollection">
            <summary>
            Collection class that contains <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> instances.
            </summary>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection"/> class.
            </summary>
            <remarks>
            This collection will be initialized to contain default <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/>
            instances for Xml, JsonValue and Json.
            </remarks>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.#ctor(System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection"/> class.
            </summary>
            <param name="formatters">A collection of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> instances to place in the collection.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.CreateDefaultFormatters">
            <summary>
            Creates a collection of new instances of the default <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/>s.
            </summary>
            <returns>The collection of default <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> instances.</returns>
        </member>
        <member name="P:System.Net.Http.Formatting.MediaTypeFormatterCollection.XmlFormatter">
            <summary>
            Gets the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> to use for Xml.
            </summary>
        </member>
        <member name="P:System.Net.Http.Formatting.MediaTypeFormatterCollection.JsonFormatter">
            <summary>
            Gets the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> to use for Json.
            </summary>
        </member>
        <member name="P:System.Net.Http.Formatting.MediaTypeFormatterCollection.JsonValueFormatter">
            <summary>
            Gets the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> to use for <see cref="T:System.Json.JsonValue"/>.
            </summary>
        </member>
        <member name="P:System.Net.Http.Formatting.MediaTypeFormatterCollection.FormUrlEncodedFormatter">
            <summary>
            Gets the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> to use for <c>application/x-www-form-urlencoded</c> data.
            </summary>
        </member>
        <member name="T:System.Net.Http.Formatting.MediaTypeFormatterExtensionMethods">
            <summary>
            Extension methods to provide convenience in adding <see cref="T:System.Net.Http.Formatting.MediaTypeMapping"/>
            items to a <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/>.
            </summary>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensionMethods.AddQueryStringMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Updates the given <paramref name="formatter"/>'s set of <see cref="T:System.Net.Http.Formatting.MediaTypeMapping"/> elements
            so that it associates the <paramref name="mediaType"/> with <see cref="T:System.Uri"/>s containing
            a specific query parameter and value.
            </summary>
            <param name="formatter">The <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> to receive the new <see cref="T:System.Net.Http.Formatting.QueryStringMapping"/> item.</param>
            <param name="queryStringParameterName">The name of the query parameter.</param>
            <param name="queryStringParameterValue">The value assigned to that query parameter.</param>
            <param name="mediaType">The <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> to associate 
            with a <see cref="T:System.Uri"/> containing a query string matching <paramref name="queryStringParameterName"/> 
            and <paramref name="queryStringParameterValue"/>.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensionMethods.AddQueryStringMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.String)">
            <summary>
            Updates the given <paramref name="formatter"/>'s set of <see cref="T:System.Net.Http.Formatting.MediaTypeMapping"/> elements
            so that it associates the <paramref name="mediaType"/> with <see cref="T:System.Uri"/>s containing
            a specific query parameter and value.
            </summary>
            <param name="formatter">The <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> to receive the new <see cref="T:System.Net.Http.Formatting.QueryStringMapping"/> item.</param>
            <param name="queryStringParameterName">The name of the query parameter.</param>
            <param name="queryStringParameterValue">The value assigned to that query parameter.</param>
            <param name="mediaType">The media type to associate 
            with a <see cref="T:System.Uri"/> containing a query string matching <paramref name="queryStringParameterName"/>
            and <paramref name="queryStringParameterValue"/>.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensionMethods.AddUriPathExtensionMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Updates the given <paramref name="formatter"/>'s set of <see cref="T:System.Net.Http.Formatting.MediaTypeMapping"/> elements
            so that it associates the <paramref name="mediaType"/> with <see cref="T:System.Uri"/>s ending with
            the given <paramref name="uriPathExtension"/>.
            </summary>
            <param name="formatter">The <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> to receive the new <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping"/> item.</param>
            <param name="uriPathExtension">The string of the <see cref="T:System.Uri"/> path extension.</param>
            <param name="mediaType">The <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> to associate with <see cref="T:System.Uri"/>s
            ending with <paramref name="uriPathExtension"/>.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensionMethods.AddUriPathExtensionMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String)">
            <summary>
            Updates the given <paramref name="formatter"/>'s set of <see cref="T:System.Net.Http.Formatting.MediaTypeMapping"/> elements
            so that it associates the <paramref name="mediaType"/> with <see cref="T:System.Uri"/>s ending with
            the given <paramref name="uriPathExtension"/>.
            </summary>
            <param name="formatter">The <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> to receive the new <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping"/> item.</param>
            <param name="uriPathExtension">The string of the <see cref="T:System.Uri"/> path extension.</param>
            <param name="mediaType">The string media type to associate with <see cref="T:System.Uri"/>s
            ending with <paramref name="uriPathExtension"/>.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensionMethods.AddMediaRangeMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String)">
            <summary>
            Updates the given <paramref name="formatter"/>'s set of <see cref="T:System.Net.Http.Formatting.MediaTypeMapping"/> elements
            so that it associates the <paramref name="mediaType"/> with requests or responses containing
            <paramref name="mediaRange"/> in the content headers.
            </summary>
            <param name="formatter">The <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> to receive the new <see cref="T:System.Net.Http.Formatting.MediaRangeMapping"/> item.</param>
            <param name="mediaRange">The media range that will appear in the content headers.</param>
            <param name="mediaType">The media type to associate with that <paramref name="mediaRange"/>.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensionMethods.AddMediaRangeMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Updates the given <paramref name="formatter"/>'s set of <see cref="T:System.Net.Http.Formatting.MediaTypeMapping"/> elements
            so that it associates the <paramref name="mediaType"/> with requests or responses containing
            <paramref name="mediaRange"/> in the content headers.
            </summary>
            <param name="formatter">The <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> to receive the new <see cref="T:System.Net.Http.Formatting.MediaRangeMapping"/> item.</param>
            <param name="mediaRange">The media range that will appear in the content headers.</param>
            <param name="mediaType">The media type to associate with that <paramref name="mediaRange"/>.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensionMethods.AddRequestHeaderMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.StringComparison,System.Boolean,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Updates the given <paramref name="formatter"/>'s set of <see cref="T:System.Net.Http.Formatting.MediaTypeMapping"/> elements
            so that it associates the <paramref name="mediaType"/> with a specific HTTP request header field
            with a specific value.
            </summary>
            <remarks><see cref="T:System.Net.Http.Formatting.RequestHeaderMapping"/> checks header fields associated with <see cref="M:HttpRequestMessage.Headers"/> for a match. It does
            not check header fields associated with <see cref="M:HttpResponseMessage.Headers"/> or <see cref="M:HttpContent.Headers"/> instances.</remarks>
            <param name="formatter">The <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> to receive the new <see cref="T:System.Net.Http.Formatting.MediaRangeMapping"/> item.</param>
            <param name="headerName">Name of the header to match.</param>
            <param name="headerValue">The header value to match.</param>
            <param name="valueComparison">The <see cref="T:System.StringComparison"/> to use when matching <paramref name="headerValue"/>.</param>
            <param name="isValueSubstring">if set to <c>true</c> then <paramref name="headerValue"/> is 
            considered a match if it matches a substring of the actual header value.</param>
            <param name="mediaType">The <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> to associate 
            with a <see cref="M:HttpRequestMessage.Header"/> entry with a name matching <paramref name="headerName"/>
            and a value matching <paramref name="headerValue"/>.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensionMethods.AddRequestHeaderMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.StringComparison,System.Boolean,System.String)">
            <summary>
            Updates the given <paramref name="formatter"/>'s set of <see cref="T:System.Net.Http.Formatting.MediaTypeMapping"/> elements
            so that it associates the <paramref name="mediaType"/> with a specific HTTP request header field
            with a specific value.
            </summary>
            <remarks><see cref="T:System.Net.Http.Formatting.RequestHeaderMapping"/> checks header fields associated with <see cref="M:HttpRequestMessage.Headers"/> for a match. It does
            not check header fields associated with <see cref="M:HttpResponseMessage.Headers"/> or <see cref="M:HttpContent.Headers"/> instances.</remarks>
            <param name="formatter">The <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> to receive the new <see cref="T:System.Net.Http.Formatting.MediaRangeMapping"/> item.</param>
            <param name="headerName">Name of the header to match.</param>
            <param name="headerValue">The header value to match.</param>
            <param name="valueComparison">The <see cref="T:System.StringComparison"/> to use when matching <paramref name="headerValue"/>.</param>
            <param name="isValueSubstring">if set to <c>true</c> then <paramref name="headerValue"/> is 
            considered a match if it matches a substring of the actual header value.</param>
            <param name="mediaType">The media type to associate 
            with a <see cref="M:HttpRequestMessage.Header"/> entry with a name matching <paramref name="headerName"/>
            and a value matching <paramref name="headerValue"/>.</param>
        </member>
        <member name="T:System.Net.Http.Formatting.MediaTypeHeaderValueEqualityComparer">
            <summary>
            Provides a special <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> comparer function
            </summary>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeHeaderValueEqualityComparer.Equals(System.Net.Http.Headers.MediaTypeHeaderValue,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Determines whether two <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instances match. The instance
            <paramref name="mediaType1"/> is said to match <paramref name="mediaType2"/> if and only if
            <paramref name="mediaType1"/> is a strict subset of the values and parameters of <paramref name="mediaType2"/>. 
            That is, if the media type and media type parameters of <paramref name="mediaType1"/> are all present 
            and match those of <paramref name="mediaType2"/> then it is a match even though <paramref name="mediaType2"/> may have additional
            parameters.
            </summary>
            <param name="mediaType1">The first media type.</param>
            <param name="mediaType2">The second media type.</param>
            <returns></returns>
        </member>
        <member name="T:System.Net.Http.Formatting.MediaTypeMatch">
            <summary>
            Class that associates a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> with the
            the quality factor of the match.
            </summary>
        </member>
        <member name="F:System.Net.Http.Formatting.MediaTypeMatch.Match">
            <summary>
            Quality factor to indicate a perfect match.
            </summary>
        </member>
        <member name="F:System.Net.Http.Formatting.MediaTypeMatch.NoMatch">
            <summary>
            Quality factor to indicate no match.
            </summary>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeMatch.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.MediaTypeMatch"/> class.
            </summary>
            <param name="mediaType">The media type that has matched.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeMatch.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.MediaTypeMatch"/> class.
            </summary>
            <param name="mediaType">The media type that has matched.  A <c>null</c> value is allowed.</param>
            <param name="quality">The quality of the match.</param>
        </member>
        <member name="P:System.Net.Http.Formatting.MediaTypeMatch.MediaType">
            <summary>
            Gets the matched media type.
            </summary>
        </member>
        <member name="P:System.Net.Http.Formatting.MediaTypeMatch.Quality">
            <summary>
            Gets the quality of the match
            </summary>
        </member>
        <member name="T:System.Net.Http.Formatting.QueryStringMapping">
            <summary>
            Class that provides <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/>s from query strings.
            </summary>
        </member>
        <member name="M:System.Net.Http.Formatting.QueryStringMapping.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.QueryStringMapping"/> class.
            </summary>
            <param name="queryStringParameterName">The name of the query string parameter to match, if present.</param>
            <param name="queryStringParameterValue">The value of the query string parameter specified by <paramref name="queryStringParameterName"/>.</param>
            <param name="mediaType">The media type to use if the query parameter specified by <paramref name="queryStringParameterName"/> is present
            and assigned the value specified by <paramref name="queryStringParameterValue"/>.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.QueryStringMapping.#ctor(System.String,System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.QueryStringMapping"/> class.
            </summary>
            <param name="queryStringParameterName">The name of the query string parameter to match, if present.</param>
            <param name="queryStringParameterValue">The value of the query string parameter specified by <paramref name="queryStringParameterName"/>.</param>
            <param name="mediaType">The <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> to use if the query parameter specified by <paramref name="queryStringParameterName"/> is present
            and assigned the value specified by <paramref name="queryStringParameterValue"/>.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.QueryStringMapping.OnTryMatchMediaType(System.Net.Http.HttpRequestMessage)">
            <summary>
            Returns a value indicating whether the current <see cref="T:System.Net.Http.Formatting.QueryStringMapping"/>
            instance can return a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> from <paramref name="request"/>.
            </summary>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> to check.</param>
            <returns>If this instance can produce a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> from <paramref name="request"/>
            it returns <c>1.0</c> otherwise <c>0.0</c>.</returns>
        </member>
        <member name="M:System.Net.Http.Formatting.QueryStringMapping.OnTryMatchMediaType(System.Net.Http.HttpResponseMessage)">
            <summary>
            Returns a value indicating whether the current <see cref="T:System.Net.Http.Formatting.QueryStringMapping"/>
            instance can return a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> from <paramref name="response"/>.
            </summary>
            <param name="response">The <see cref="T:System.Net.Http.HttpResponseMessage"/> to check.</param>
            <returns>If this instance can produce a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> from <paramref name="response"/>
            it returns <c>true</c> otherwise <c>false</c>.</returns>
        </member>
        <member name="P:System.Net.Http.Formatting.QueryStringMapping.QueryStringParameterName">
            <summary>
            Gets the query string parameter name.
            </summary>
        </member>
        <member name="P:System.Net.Http.Formatting.QueryStringMapping.QueryStringParameterValue">
            <summary>
            Gets the query string parameter value.
            </summary>
        </member>
        <member name="T:System.Net.Http.Formatting.RequestHeaderMapping">
            <summary>
            This class provides a mapping from an arbitrary HTTP request header field to a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/>
            used to select <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> instances for handling the entity body of an <see cref="T:System.Net.Http.HttpRequestMessage"/>
            or <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            <remarks>This class only checks header fields associated with <see cref="M:HttpRequestMessage.Headers"/> for a match. It does
            not check header fields associated with <see cref="M:HttpResponseMessage.Headers"/> or <see cref="M:HttpContent.Headers"/> instances.</remarks>
            </summary>
        </member>
        <member name="M:System.Net.Http.Formatting.RequestHeaderMapping.#ctor(System.String,System.String,System.StringComparison,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping"/> class.
            </summary>
            <param name="headerName">Name of the header to match.</param>
            <param name="headerValue">The header value to match.</param>
            <param name="valueComparison">The value comparison to use when matching <paramref name="headerValue"/>.</param>
            <param name="isValueSubstring">if set to <c>true</c> then <paramref name="headerValue"/> is 
            considered a match if it matches a substring of the actual header value.</param>
            <param name="mediaType">The media type to use if <paramref name="headerName"/> and <paramref name="headerValue"/> 
            is considered a match.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.RequestHeaderMapping.#ctor(System.String,System.String,System.StringComparison,System.Boolean,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping"/> class.
            </summary>
            <param name="headerName">Name of the header to match.</param>
            <param name="headerValue">The header value to match.</param>
            <param name="valueComparison">The <see cref="T:System.StringComparison"/> to use when matching <paramref name="headerValue"/>.</param>
            <param name="isValueSubstring">if set to <c>true</c> then <paramref name="headerValue"/> is 
            considered a match if it matches a substring of the actual header value.</param>
            <param name="mediaType">The <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> to use if <paramref name="headerName"/> and <paramref name="headerValue"/> 
            is considered a match.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.RequestHeaderMapping.OnTryMatchMediaType(System.Net.Http.HttpRequestMessage)">
            <summary>
            Returns a value indicating whether the current <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping"/>
            instance can return a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> from <paramref name="request"/>.
            </summary>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> to check.</param>
            <returns>
            The quality of the match. It must be between <c>0.0</c> and <c>1.0</c>.
            A value of <c>0.0</c> signifies no match.
            A value of <c>1.0</c> signifies a complete match.
            </returns>
        </member>
        <member name="M:System.Net.Http.Formatting.RequestHeaderMapping.OnTryMatchMediaType(System.Net.Http.HttpResponseMessage)">
            <summary>
            Returns a value indicating whether the current <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping"/>
            instance can return a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> from <paramref name="response"/>.
            </summary>
            <param name="response">The <see cref="T:System.Net.Http.HttpResponseMessage"/> to check.</param>
            <returns>
            The quality of the match. It must be between <c>0.0</c> and <c>1.0</c>.
            A value of <c>0.0</c> signifies no match.
            A value of <c>1.0</c> signifies a complete match.
            </returns>
        </member>
        <member name="P:System.Net.Http.Formatting.RequestHeaderMapping.HeaderName">
            <summary>
            Gets the name of the header to match.
            </summary>
        </member>
        <member name="P:System.Net.Http.Formatting.RequestHeaderMapping.HeaderValue">
            <summary>
            Gets the header value to match.
            </summary>
        </member>
        <member name="P:System.Net.Http.Formatting.RequestHeaderMapping.HeaderValueComparison">
            <summary>
            Gets the <see cref="T:System.StringComparison"/> to use when matching <see cref="M:HeaderValue"/>.
            </summary>
        </member>
        <member name="P:System.Net.Http.Formatting.RequestHeaderMapping.IsValueSubstring">
            <summary>
            Gets a value indicating whether <see cref="M:HeaderValue"/> is 
            a matched as a substring of the actual header value.
            this instance is value substring.
            </summary>
            <value>
            <c>true</c> if <see cref="P:System.Net.Http.Formatting.RequestHeaderMapping.HeaderValue"/> is to be matched as a substring; otherwise <c>false</c>.
            </value>
        </member>
        <member name="T:System.Net.Http.Formatting.ResponseFormatterSelectionResult">
            <summary>
            Contains information about the degree to which a <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> matches the  
            explicit or implicit preferences found in an incoming request.
            </summary>
        </member>
        <member name="F:System.Net.Http.Formatting.ResponseFormatterSelectionResult.None">
            <summary>
            No match was found
            </summary>
        </member>
        <member name="F:System.Net.Http.Formatting.ResponseFormatterSelectionResult.MatchOnCanWriteType">
            <summary>
            Matched on type meaning that the formatter is able to serialize the type
            </summary>
        </member>
        <member name="F:System.Net.Http.Formatting.ResponseFormatterSelectionResult.MatchOnResponseContentType">
            <summary>
            Matched on explicit content-type set on the <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
        </member>
        <member name="F:System.Net.Http.Formatting.ResponseFormatterSelectionResult.MatchOnRequestAcceptHeader">
            <summary>
            Matched on explicit accept header set in <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
        </member>
        <member name="F:System.Net.Http.Formatting.ResponseFormatterSelectionResult.MatchOnRequestAcceptHeaderWithMediaTypeMapping">
            <summary>
            Matched on <see cref="T:System.Net.Http.HttpRequestMessage"/> after having applied
            the various <see cref="T:System.Net.Http.Formatting.MediaTypeMapping"/>s.
            </summary>
        </member>
        <member name="F:System.Net.Http.Formatting.ResponseFormatterSelectionResult.MatchOnRequestContentType">
            <summary>
            Matched on the media type of the <see cref="T:System.Net.Http.HttpContent"/> of the <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
        </member>
        <member name="T:System.Net.Http.Formatting.ResponseMediaTypeMatch">
            <summary>
            Class that describes the media type that will be used for a response for a
            specific <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/>.
            </summary>
        </member>
        <member name="M:System.Net.Http.Formatting.ResponseMediaTypeMatch.#ctor(System.Net.Http.Formatting.MediaTypeMatch,System.Net.Http.Formatting.ResponseFormatterSelectionResult)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.ResponseMediaTypeMatch"/> class.
            </summary>
            <param name="mediaTypeMatch">The <see cref="P:System.Net.Http.Formatting.ResponseMediaTypeMatch.MediaTypeMatch"/> containing the media type and its quality factor.</param>
            <param name="result">The kind of match.</param>
        </member>
        <member name="P:System.Net.Http.Formatting.ResponseMediaTypeMatch.ResponseFormatterSelectionResult">
            <summary>
            Gets the kind of match that occurred.
            </summary>
        </member>
        <member name="P:System.Net.Http.Formatting.ResponseMediaTypeMatch.MediaTypeMatch">
            <summary>
            Gets the media type that was the source of the match.
            </summary>
        </member>
        <member name="T:System.Net.Http.Formatting.StringComparisonHelper">
            <summary>
            Helper class for validating <see cref="T:System.StringComparison"/> values.
            </summary>
        </member>
        <member name="M:System.Net.Http.Formatting.StringComparisonHelper.IsDefined(System.StringComparison)">
            <summary>
            Determines whether the specified <paramref name="value"/> is defined by the <see cref="T:System.StringComparison"/>
            enumeration.
            </summary>
            <param name="value">The value to verify.</param>
            <returns>
            <c>true</c> if the specified options is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Net.Http.Formatting.StringComparisonHelper.Validate(System.StringComparison,System.String)">
            <summary>
            Validates the specified <paramref name="value"/> and throws an <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/>
            exception if not valid.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="parameterName">Name of the parameter to use if throwing exception.</param>
        </member>
        <member name="T:System.Net.Http.Formatting.UriPathExtensionMapping">
            <summary>
            Class that provides <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/>s from path extensions appearing
            in a <see cref="T:System.Uri"/>.
            </summary>
        </member>
        <member name="M:System.Net.Http.Formatting.UriPathExtensionMapping.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping"/> class.
            </summary>
            <param name="uriPathExtension">The extension corresponding to <paramref name="mediaType"/>.
            This value should not include a dot or wildcards.</param>
            <param name="mediaType">The media type that will be returned
            if <paramref name="uriPathExtension"/> is matched.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.UriPathExtensionMapping.#ctor(System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping"/> class.
            </summary>
            <param name="uriPathExtension">The extension corresponding to <paramref name="mediaType"/>.
            This value should not include a dot or wildcards.</param>
            <param name="mediaType">The <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> that will be returned
            if <paramref name="uriPathExtension"/> is matched.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.UriPathExtensionMapping.OnTryMatchMediaType(System.Net.Http.HttpRequestMessage)">
            <summary>
            Returns a value indicating whether this <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping"/>
            instance can provide a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> for the <see cref="T:System.Uri"/> 
            of <paramref name="request"/>.
            </summary>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> to check.</param>
            <returns>If this instance can match a file extension in <paramref name="request"/>
            it returns <c>1.0</c> otherwise <c>0.0</c>.</returns>
        </member>
        <member name="M:System.Net.Http.Formatting.UriPathExtensionMapping.OnTryMatchMediaType(System.Net.Http.HttpResponseMessage)">
            <summary>
            Returns a value indicating whether this <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping"/>
            instance can provide a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> for the <see cref="T:System.Uri"/> 
            of <paramref name="response"/>.
            </summary>
            <param name="response">The <see cref="T:System.Net.Http.HttpResponseMessage"/> to check.</param>
            <returns>If this instance can match a file extension in <paramref name="response"/>
            it returns <c>1.0</c> otherwise <c>0.0</c>.</returns>
        </member>
        <member name="P:System.Net.Http.Formatting.UriPathExtensionMapping.UriPathExtension">
            <summary>
            Gets the <see cref="T:System.Uri"/> path extension.
            </summary>
        </member>
        <member name="T:System.Net.Http.Formatting.XmlMediaTypeFormatter">
            <summary>
            <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> class to handle Xml.
            </summary>
        </member>
        <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter"/> class.
            </summary>
        </member>
        <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.SetSerializer(System.Type,System.Runtime.Serialization.XmlObjectSerializer)">
            <summary>
            Registers the <see cref="T:System.Runtime.Serialization.XmlObjectSerializer"/> to use to read or write
            the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type of object that will be serialized or deserialized with <paramref name="serializer"/>.</param>
            <param name="serializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer"/> instance to use.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.SetSerializer``1(System.Runtime.Serialization.XmlObjectSerializer)">
            <summary>
            Registers the <see cref="T:System.Runtime.Serialization.XmlObjectSerializer"/> to use to read or write
            the specified <typeparamref name="T"/> type.
            </summary>
            <typeparam name="T">The type of object that will be serialized or deserialized with <paramref name="serializer"/>.</typeparam>
            <param name="serializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer"/> instance to use.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.SetSerializer(System.Type,System.Xml.Serialization.XmlSerializer)">
            <summary>
            Registers the <see cref="T:System.Xml.Serialization.XmlSerializer"/> to use to read or write
            the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type of objects for which <paramref name="serializer"/> will be used.</param>
            <param name="serializer">The <see cref="T:System.Xml.Serialization.XmlSerializer"/> instance to use.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.SetSerializer``1(System.Xml.Serialization.XmlSerializer)">
            <summary>
            Registers the <see cref="T:System.Xml.Serialization.XmlSerializer"/> to use to read or write
            the specified <typeparamref name="T"/> type.
            </summary>
            <typeparam name="T">The type of object that will be serialized or deserialized with <paramref name="serializer"/>.</typeparam>
            <param name="serializer">The <see cref="T:System.Xml.Serialization.XmlSerializer"/> instance to use.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.RemoveSerializer(System.Type)">
            <summary>
            Unregisters the serializer currently associated with the given <paramref name="type"/>.
            </summary>
            <remarks>
            Unless another serializer is registered for the <paramref name="type"/>, a default one will be created.
            </remarks>
            <param name="type">The type of object whose serializer should be removed.</param>
            <returns><c>true</c> if a serializer was registered for the <paramref name="type"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.CanReadType(System.Type)">
            <summary>
            Determines whether this <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter"/> can read objects
            of the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type of object that will be read.</param>
            <returns><c>true</c> if objects of this <paramref name="type"/> can be read, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.CanWriteType(System.Type)">
            <summary>
            Determines whether this <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter"/> can write objects
            of the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type of object that will be written.</param>
            <returns><c>true</c> if objects of this <paramref name="type"/> can be written, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.OnReadFromStream(System.Type,System.IO.Stream,System.Net.Http.Headers.HttpContentHeaders)">
            <summary>
            Called during deserialization to read an object of the specified <paramref name="type"/>
            from the specified <paramref name="stream"/>.
            </summary>
            <param name="type">The type of object to read.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which to read.</param>
            <param name="contentHeaders">The content headers associated with the request or response.</param>
            <returns>The object instance that has been read.</returns>
        </member>
        <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.OnWriteToStream(System.Type,System.Object,System.IO.Stream,System.Net.Http.Headers.HttpContentHeaders,System.Net.TransportContext)">
            <summary>
            Called during serialization to write an object of the specified <paramref name="type"/>
            to the specified <paramref name="stream"/>.
            </summary>
            <param name="type">The type of object to write.</param>
            <param name="value">The object to write.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to which to write.</param>
            <param name="contentHeaders">The content headers associated with the request or response.</param>
            <param name="context">The <see cref="T:System.Net.TransportContext"/>.</param>
        </member>
        <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.DefaultMediaType">
            <summary>
            Gets the default media type for xml, namely "application/xml".
            </summary>
            <value>
            <remarks>
            The default media type does not have any <c>charset</c> parameter as 
            the <see cref="T:System.Text.Encoding"/> can be configured on a per <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter"/> 
            instance basis.
            </remarks>
            Because <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> is mutable, the value
            returned will be a new instance every time.
            </value>
        </member>
        <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.UseDataContractSerializer">
            <summary>
            Gets or sets a value indicating whether to use <see cref="T:System.Runtime.Serialization.DataContractSerializer"/> by default.
            </summary>
            <value>
                <c>true</c> if use <see cref="T:System.Runtime.Serialization.DataContractSerializer"/> by default; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.CharacterEncoding">
            <summary>
            Gets or sets the <see cref="T:System.Text.Encoding"/> to use when writing data.
            </summary>
            <remarks>The default encoding is <see cref="T:System.Text.UTF8Encoding"/>.</remarks>
            <value>
            The <see cref="T:System.Text.Encoding"/> to use when writing data.
            </value>
        </member>
        <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.IsModified">
            <summary>
            Gets a value indicating whether this instance is modified from the default settings.
            </summary>
            <value>
            <c>true</c> if this instance is modified; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:System.Net.Http.FormUrlEncodedParser">
            <summary>
            Buffer-oriented parsing of HTML form URL-ended, also known as <c>application/x-www-form-urlencoded</c>, data. 
            </summary>
        </member>
        <member name="M:System.Net.Http.FormUrlEncodedParser.#ctor(System.Collections.Generic.ICollection{System.Tuple{System.String,System.String}},System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.FormUrlEncodedParser"/> class.
            </summary>
            <param name="nameValuePairs">The collection to which name value pairs are added as they are parsed.</param>
            <param name="maxMessageSize">Maximum length of all the individual name value pairs.</param>
        </member>
        <member name="M:System.Net.Http.FormUrlEncodedParser.ParseBuffer(System.Byte[],System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Parse a buffer of URL form-encoded name-value pairs and add them to the <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            Bytes are parsed in a consuming manner from the beginning of the buffer meaning that the same bytes can not be 
            present in the buffer.
            </summary>
            <param name="buffer">Buffer from where data is read</param>
            <param name="bytesReady">Size of buffer</param>
            <param name="bytesConsumed">Offset into buffer</param>
            <param name="isFinal">Indicates whether the end of the URL form-encoded data has been reached.</param>
            <returns>State of the parser. Call this method with new data until it reaches a final state.</returns>
        </member>
        <member name="T:System.Net.Http.FormUrlEncodedParser.CurrentNameValuePair">
            <summary>
            Maintains information about the current header field being parsed. 
            </summary>
        </member>
        <member name="M:System.Net.Http.FormUrlEncodedParser.CurrentNameValuePair.CopyTo(System.Collections.Generic.ICollection{System.Tuple{System.String,System.String}})">
            <summary>
            Copies current name value pair field to the provided <see cref="T:System.Collections.Specialized.NameValueCollection"/> instance.
            </summary>
            <param name="nameValuePairs">The <see cref="T:System.Collections.Specialized.NameValueCollection"/>.</param>
        </member>
        <member name="M:System.Net.Http.FormUrlEncodedParser.CurrentNameValuePair.CopyNameOnlyTo(System.Collections.Generic.ICollection{System.Tuple{System.String,System.String}})">
            <summary>
            Copies current name-only to the provided <see cref="T:System.Collections.Specialized.NameValueCollection"/> instance.
            </summary>
            <param name="nameValuePairs">The <see cref="T:System.Collections.Specialized.NameValueCollection"/>.</param>
        </member>
        <member name="M:System.Net.Http.FormUrlEncodedParser.CurrentNameValuePair.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="P:System.Net.Http.FormUrlEncodedParser.CurrentNameValuePair.Name">
            <summary>
            Gets the name of the name value pair.
            </summary>
        </member>
        <member name="P:System.Net.Http.FormUrlEncodedParser.CurrentNameValuePair.Value">
            <summary>
            Gets the value of the name value pair
            </summary>
        </member>
        <member name="T:System.Net.Http.HttpContentCollectionExtensionMethods">
            <summary>
            Extension methods to provide convenience methods for finding <see cref="T:System.Net.Http.HttpContent"/> items  
            within a <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection.
            </summary>
        </member>
        <member name="M:System.Net.Http.HttpContentCollectionExtensionMethods.FirstDispositionType(System.Collections.Generic.IEnumerable{System.Net.Http.HttpContent},System.String)">
            <summary>
            Returns the first <see cref="T:System.Net.Http.HttpContent"/> in a sequence that has a <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue"/> header field
            with a <see cref="P:System.Net.Http.Headers.ContentDispositionHeaderValue.DispositionType"/> property equal to <paramref name="dispositionType"/>.
            </summary>
            <param name="contents">The contents to evaluate</param>
            <param name="dispositionType">The disposition type to look for.</param>
            <returns>The first <see cref="T:System.Net.Http.HttpContent"/> in the sequence with a matching disposition type.</returns>
        </member>
        <member name="M:System.Net.Http.HttpContentCollectionExtensionMethods.FirstDispositionTypeOrDefault(System.Collections.Generic.IEnumerable{System.Net.Http.HttpContent},System.String)">
            <summary>
            Returns the first <see cref="T:System.Net.Http.HttpContent"/> in a sequence that has a <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue"/> header field
            with a <see cref="P:System.Net.Http.Headers.ContentDispositionHeaderValue.DispositionType"/> property equal to <paramref name="dispositionType"/>.
            </summary>
            <param name="contents">The contents to evaluate</param>
            <param name="dispositionType">The disposition type to look for.</param>
            <returns>null if source is empty or if no element matches; otherwise the first <see cref="T:System.Net.Http.HttpContent"/> in 
            the sequence with a matching disposition type.</returns>
        </member>
        <member name="M:System.Net.Http.HttpContentCollectionExtensionMethods.FirstDispositionName(System.Collections.Generic.IEnumerable{System.Net.Http.HttpContent},System.String)">
            <summary>
            Returns the first <see cref="T:System.Net.Http.HttpContent"/> in a sequence that has a <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue"/> header field
            with a <see cref="P:System.Net.Http.Headers.ContentDispositionHeaderValue.Name"/> property equal to <paramref name="dispositionName"/>.
            </summary>
            <param name="contents">The contents to evaluate</param>
            <param name="dispositionName">The disposition name to look for.</param>
            <returns>The first <see cref="T:System.Net.Http.HttpContent"/> in the sequence with a matching disposition name.</returns>
        </member>
        <member name="M:System.Net.Http.HttpContentCollectionExtensionMethods.FirstDispositionNameOrDefault(System.Collections.Generic.IEnumerable{System.Net.Http.HttpContent},System.String)">
            <summary>
            Returns the first <see cref="T:System.Net.Http.HttpContent"/> in a sequence that has a <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue"/> header field
            with a <see cref="P:System.Net.Http.Headers.ContentDispositionHeaderValue.Name"/> property equal to <paramref name="dispositionName"/>.
            </summary>
            <param name="contents">The contents to evaluate</param>
            <param name="dispositionName">The disposition name to look for.</param>
            <returns>null if source is empty or if no element matches; otherwise the first <see cref="T:System.Net.Http.HttpContent"/> in 
            the sequence with a matching disposition name.</returns>
        </member>
        <member name="M:System.Net.Http.HttpContentCollectionExtensionMethods.FirstStart(System.Collections.Generic.IEnumerable{System.Net.Http.HttpContent},System.String)">
            <summary>
            Returns the <c>start</c> multipart body part. The <c>start</c> is used to identify the main body 
            in <c>multipart/related</c> content (see RFC 2387).
            </summary>
            <param name="contents">The contents to evaluate.</param>
            <param name="start">The <c>start</c> value to look for. 
            A match is found if a <see cref="T:System.Net.Http.HttpContent"/> has a <c>Content-ID</c> 
            header field with the given value.</param>
            <returns>The first <see cref="T:System.Net.Http.HttpContent"/> in the sequence with a matching value.</returns>
        </member>
        <member name="M:System.Net.Http.HttpContentCollectionExtensionMethods.FirstStartOrDefault(System.Collections.Generic.IEnumerable{System.Net.Http.HttpContent},System.String)">
            <summary>
            Returns the first <see cref="T:System.Net.Http.HttpContent"/> in a sequence that has a <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue"/> header field
            parameter equal to <paramref name="start"/>. This parameter is typically used in connection with <c>multipart/related</c>
            content (see RFC 2387).
            </summary>
            <param name="contents">The contents to evaluate.</param>
            <param name="start">The start value to look for. A match is found if a <see cref="T:System.Net.Http.HttpContent"/> has a <c>Content-ID</c> 
            header field with the given value.</param>
            <returns>null if source is empty or if no element matches; otherwise the first <see cref="T:System.Net.Http.HttpContent"/> in 
            the sequence with a matching value.</returns>
        </member>
        <member name="M:System.Net.Http.HttpContentCollectionExtensionMethods.TryGetFormFieldValue(System.Collections.Generic.IEnumerable{System.Net.Http.HttpContent},System.String,System.String@)">
            <summary>
            Tries to get the contents of the first <see cref="T:System.Net.Http.HttpContent"/> that has a 
            <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue"/> header field with a 
            <see cref="P:System.Net.Http.Headers.ContentDispositionHeaderValue.Name"/> property equal 
            to <paramref name="dispositionName"/>.
            </summary>
            <param name="contents">The contents to evaluate.</param>
            <param name="dispositionName">The disposition name to look for.</param>
            <param name="formFieldValue">The form field value as a string.</param>
            <returns>The string content of the form field with the given disposition name if found; otherwise null.</returns>
        </member>
        <member name="M:System.Net.Http.HttpContentCollectionExtensionMethods.FindAllContentType(System.Collections.Generic.IEnumerable{System.Net.Http.HttpContent},System.String)">
            <summary>
            Returns all instances of <see cref="T:System.Net.Http.HttpContent"/> in a sequence that has a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> header field
            with a <see cref="P:System.Net.Http.Headers.MediaTypeHeaderValue.MediaType"/> property equal to the provided <paramref name="contentType"/>.
            </summary>
            <param name="contents">The content to evaluate</param>
            <param name="contentType">The media type to look for.</param>
            <returns>null if source is empty or if no element matches; otherwise the first <see cref="T:System.Net.Http.HttpContent"/> in 
            the sequence with a matching media type.</returns>
        </member>
        <member name="M:System.Net.Http.HttpContentCollectionExtensionMethods.FindAllContentType(System.Collections.Generic.IEnumerable{System.Net.Http.HttpContent},System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Returns all instances of <see cref="T:System.Net.Http.HttpContent"/> in a sequence that has a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> header field
            with a <see cref="P:System.Net.Http.Headers.MediaTypeHeaderValue.MediaType"/> property equal to the provided <paramref name="contentType"/>.
            </summary>
            <param name="contents">The content to evaluate</param>
            <param name="contentType">The media type to look for.</param>
            <returns>null if source is empty or if no element matches; otherwise the first <see cref="T:System.Net.Http.HttpContent"/> in 
            the sequence with a matching media type.</returns>
        </member>
        <member name="T:System.Net.Http.HttpContentExtensionMethods">
            <summary>
            Extension methods to allow strongly typed objects to be read from <see cref="T:System.Net.Http.HttpContent"/> instances.
            </summary>
        </member>
        <member name="M:System.Net.Http.HttpContentExtensionMethods.ReadAsAsync(System.Net.Http.HttpContent,System.Type)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that will yield an object of the specified type
            from the <paramref name="content"/> instance.
            </summary>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> instance from which to read.</param>
            <param name="type">The type of the object to read.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will yield an object instance of the specified type.</returns>
        </member>
        <member name="M:System.Net.Http.HttpContentExtensionMethods.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that will yield an object of the specified type
            from the <paramref name="content"/> instance.
            </summary>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> instance from which to read.</param>
            <param name="type">The type of the object to read.</param>
            <param name="formatters">The collection of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> instances to use.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will return an object instance of the specified type.</returns>
        </member>
        <member name="M:System.Net.Http.HttpContentExtensionMethods.ReadAsOrDefaultAsync(System.Net.Http.HttpContent,System.Type)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that will yield an object or default value
            of the specified type from the <paramref name="content"/> instance.
            </summary>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> instance from which to read.</param>
            <param name="type">The type of the object to read.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will yield an object instance of the specified type or the
            default value for that type if it was not possible to read the object from the <paramref name="content"/>.
            </returns>
        </member>
        <member name="M:System.Net.Http.HttpContentExtensionMethods.ReadAsOrDefaultAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that will yield an object or default value
            of the specified type from the <paramref name="content"/> instance.
            </summary>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> instance from which to read.</param>
            <param name="type">The type of the object to read.</param>
            <param name="formatters">The collection of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> instances to use.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will yield an object instance of the specified type or the
            default value for that type if it was not possible to read the object from the <paramref name="content"/>.
            </returns>
        </member>
        <member name="M:System.Net.Http.HttpContentExtensionMethods.ReadAsAsync``1(System.Net.Http.HttpContent)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that will yield an object of the specified 
            type <typeparamref name="T"/> from the <paramref name="content"/> instance.
            </summary>
            <typeparam name="T">The type of the object to read.</typeparam>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> instance from which to read.</param>
            <returns>An object instance of the specified type.</returns>
        </member>
        <member name="M:System.Net.Http.HttpContentExtensionMethods.ReadAsAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that will yield an object of the specified 
            type <typeparamref name="T"/> from the <paramref name="content"/> instance.
            </summary>
            <typeparam name="T">The type of the object to read.</typeparam>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> instance from which to read.</param>
            <param name="formatters">The collection of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> instances to use.</param>
            <returns>An object instance of the specified type.</returns>
        </member>
        <member name="M:System.Net.Http.HttpContentExtensionMethods.ReadAsOrDefaultAsync``1(System.Net.Http.HttpContent)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that will yield an object or default value
            of the specified type <typeparamref name="T"/> 
            from the <paramref name="content"/> instance.
            </summary>
            <typeparam name="T">The type of the object to read.</typeparam>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> instance from which to read.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will yield object instance of the specified type or
            the default value of that type if it was not possible to read from the <paramref name="content"/>.
            </returns>
        </member>
        <member name="M:System.Net.Http.HttpContentExtensionMethods.ReadAsOrDefaultAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that will yield an object or default value
            of the specified type <typeparamref name="T"/> 
            from the <paramref name="content"/> instance.
            </summary>
            <typeparam name="T">The type of the object to read.</typeparam>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> instance from which to read.</param>
            <param name="formatters">The collection of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> instances to use.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will yield object instance of the specified type or
            the default value of that type if it was not possible to read from the <paramref name="content"/>.
            </returns>
        </member>
        <member name="T:System.Net.Http.HttpContentMessageExtensionMethods">
            <summary>
            Extension methods to read <see cref="T:System.Net.Http.HttpRequestMessage"/> and <see cref="T:System.Net.Http.HttpResponseMessage"/> entities from <see cref="T:System.Net.Http.HttpContent"/> instances.
            </summary>
        </member>
        <member name="M:System.Net.Http.HttpContentMessageExtensionMethods.IsHttpRequestMessageContent(System.Net.Http.HttpContent)">
            <summary>
            Determines whether the specified content is HTTP request message content.
            </summary>
            <param name="content">The content.</param>
            <returns>
              <c>true</c> if the specified content is HTTP message content; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Net.Http.HttpContentMessageExtensionMethods.IsHttpResponseMessageContent(System.Net.Http.HttpContent)">
            <summary>
            Determines whether the specified content is HTTP response message content.
            </summary>
            <param name="content">The content.</param>
            <returns>
              <c>true</c> if the specified content is HTTP message content; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Net.Http.HttpContentMessageExtensionMethods.ReadAsHttpRequestMessage(System.Net.Http.HttpContent)">
            <summary>
            Read the <see cref="T:System.Net.Http.HttpContent"/> as an <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
            <param name="content">The content to read.</param>
            <returns>The parsed <see cref="T:System.Net.Http.HttpRequestMessage"/> instance.</returns>
        </member>
        <member name="M:System.Net.Http.HttpContentMessageExtensionMethods.ReadAsHttpRequestMessage(System.Net.Http.HttpContent,System.String)">
            <summary>
            Read the <see cref="T:System.Net.Http.HttpContent"/> as an <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
            <param name="content">The content to read.</param>
            <param name="uriScheme">The URI scheme to use for the request URI.</param>
            <returns>The parsed <see cref="T:System.Net.Http.HttpRequestMessage"/> instance.</returns>
        </member>
        <member name="M:System.Net.Http.HttpContentMessageExtensionMethods.ReadAsHttpRequestMessage(System.Net.Http.HttpContent,System.String,System.Int32)">
            <summary>
            Read the <see cref="T:System.Net.Http.HttpContent"/> as an <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
            <param name="content">The content to read.</param>
            <param name="uriScheme">The URI scheme to use for the request URI (the 
            URI scheme is not actually part of the HTTP Request URI and so must be provided externally).</param>
            <param name="bufferSize">Size of the buffer.</param>
            <returns>The parsed <see cref="T:System.Net.Http.HttpRequestMessage"/> instance.</returns>
        </member>
        <member name="M:System.Net.Http.HttpContentMessageExtensionMethods.ReadAsHttpResponseMessage(System.Net.Http.HttpContent)">
            <summary>
            Read the <see cref="T:System.Net.Http.HttpContent"/> as an <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
            <param name="content">The content to read.</param>
            <returns>The parsed <see cref="T:System.Net.Http.HttpResponseMessage"/> instance.</returns>
        </member>
        <member name="M:System.Net.Http.HttpContentMessageExtensionMethods.ReadAsHttpResponseMessage(System.Net.Http.HttpContent,System.Int32)">
            <summary>
            Read the <see cref="T:System.Net.Http.HttpContent"/> as an <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
            <param name="content">The content to read.</param>
            <param name="bufferSize">Size of the buffer.</param>
            <returns>The parsed <see cref="T:System.Net.Http.HttpResponseMessage"/> instance.</returns>
        </member>
        <member name="M:System.Net.Http.HttpContentMessageExtensionMethods.CreateRequestUri(System.String,System.Net.Http.HttpUnsortedRequest)">
            <summary>
            Creates the request URI by combining scheme (provided) with parsed values of
            host and path.
            </summary>
            <param name="uriScheme">The URI scheme to use for the request URI.</param>
            <param name="httpRequest">The unsorted HTTP request.</param>
            <returns>A fully qualified request URI.</returns>
        </member>
        <member name="M:System.Net.Http.HttpContentMessageExtensionMethods.CreateHeaderFields(System.Net.Http.Headers.HttpHeaders,System.Net.Http.Headers.HttpHeaders,System.IO.Stream,System.Int32)">
            <summary>
            Copies the unsorted header fields to a sorted collection.
            </summary>
            <param name="source">The unsorted source headers</param>
            <param name="destination">The destination <see cref="T:System.Net.Http.Headers.HttpRequestHeaders"/> or <see cref="T:System.Net.Http.Headers.HttpResponseHeaders"/>.</param>
            <param name="contentStream">The input <see cref="T:System.IO.Stream"/> used to form any <see cref="T:System.Net.Http.HttpContent"/> being part of this HTTP request.</param>
            <param name="rewind">Start location of any request entity within the <paramref name="contentStream"/>.</param>
            <returns>An <see cref="T:System.Net.Http.HttpContent"/> instance if header fields contained and <see cref="T:System.Net.Http.Headers.HttpContentHeaders"/>.</returns>
        </member>
        <member name="M:System.Net.Http.HttpContentMessageExtensionMethods.CreateHttpRequestMessage(System.String,System.Net.Http.HttpUnsortedRequest,System.IO.Stream,System.Int32)">
            <summary>
            Creates an <see cref="T:System.Net.Http.HttpRequestMessage"/> based on information provided in <see cref="T:System.Net.Http.HttpUnsortedRequest"/>.
            </summary>
            <param name="uriScheme">The URI scheme to use for the request URI.</param>
            <param name="httpRequest">The unsorted HTTP request.</param>
            <param name="contentStream">The input <see cref="T:System.IO.Stream"/> used to form any <see cref="T:System.Net.Http.HttpContent"/> being part of this HTTP request.</param>
            <param name="rewind">Start location of any request entity within the <paramref name="contentStream"/>.</param>
            <returns>A newly created <see cref="T:System.Net.Http.HttpRequestMessage"/> instance.</returns>
        </member>
        <member name="M:System.Net.Http.HttpContentMessageExtensionMethods.CreateHttpResponseMessage(System.Net.Http.HttpUnsortedResponse,System.IO.Stream,System.Int32)">
            <summary>
            Creates an <see cref="T:System.Net.Http.HttpResponseMessage"/> based on information provided in <see cref="T:System.Net.Http.HttpUnsortedResponse"/>.
            </summary>
            <param name="httpResponse">The unsorted HTTP Response.</param>
            <param name="contentStream">The input <see cref="T:System.IO.Stream"/> used to form any <see cref="T:System.Net.Http.HttpContent"/> being part of this HTTP Response.</param>
            <param name="rewind">Start location of any Response entity within the <paramref name="contentStream"/>.</param>
            <returns>A newly created <see cref="T:System.Net.Http.HttpResponseMessage"/> instance.</returns>
        </member>
        <member name="T:System.Net.Http.HttpContentMultipartExtensionMethods">
            <summary>
            Extension methods to read MIME multipart entities from <see cref="T:System.Net.Http.HttpContent"/> instances.
            </summary>
        </member>
        <member name="M:System.Net.Http.HttpContentMultipartExtensionMethods.IsMimeMultipartContent(System.Net.Http.HttpContent)">
            <summary>
            Determines whether the specified content is MIME multipart content.
            </summary>
            <param name="content">The content.</param>
            <returns>
              <c>true</c> if the specified content is MIME multipart content; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Net.Http.HttpContentMultipartExtensionMethods.IsMimeMultipartContent(System.Net.Http.HttpContent,System.String)">
            <summary>
            Determines whether the specified content is MIME multipart content with the 
            specified subtype. For example, the subtype <c>mixed</c> would match content
            with a content type of <c>multipart/mixed</c>. 
            </summary>
            <param name="content">The content.</param>
            <param name="subtype">The MIME multipart subtype to match.</param>
            <returns>
              <c>true</c> if the specified content is MIME multipart content with the specified subtype; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Net.Http.HttpContentMultipartExtensionMethods.ReadAsMultipart(System.Net.Http.HttpContent)">
            <summary>
            Reads all body parts within a MIME multipart message and produces a set of <see cref="T:System.Net.Http.HttpContent"/> instances as a result.
            </summary>
            <param name="content">An existing <see cref="T:System.Net.Http.HttpContent"/> instance to use for the object's content.</param>
            <returns>Collection of <see cref="T:System.Net.Http.HttpContent"/> instances where each instance represents a body part.</returns>
        </member>
        <member name="M:System.Net.Http.HttpContentMultipartExtensionMethods.ReadAsMultipart(System.Net.Http.HttpContent,System.Net.Http.IMultipartStreamProvider)">
            <summary>
            Reads all body parts within a MIME multipart message and produces a set of <see cref="T:System.Net.Http.HttpContent"/> instances as a result
            using the <paramref name="streamProvider"/> instance to determine where the contents of each body part is written.
            </summary>
            <param name="content">An existing <see cref="T:System.Net.Http.HttpContent"/> instance to use for the object's content.</param>
            <param name="streamProvider">A stream provider providing output streams for where to write body parts as they are parsed.</param>
            <returns>Collection of <see cref="T:System.Net.Http.HttpContent"/> instances where each instance represents a body part.</returns>
        </member>
        <member name="M:System.Net.Http.HttpContentMultipartExtensionMethods.ReadAsMultipart(System.Net.Http.HttpContent,System.Net.Http.IMultipartStreamProvider,System.Int32)">
            <summary>
            Reads all body parts within a MIME multipart message and produces a set of 
            <see cref="T:System.Net.Http.HttpContent"/> instances as a result using the <paramref name="streamProvider"/> 
            instance to determine where the contents of each body part is written and 
            <paramref name="bufferSize"/> as read buffer size.
            </summary>
            <param name="content">An existing <see cref="T:System.Net.Http.HttpContent"/> instance to use for the 
            object's content.</param>
            <param name="streamProvider">A stream provider providing output streams for where to 
            write body parts as they are parsed.</param>
            <param name="bufferSize">Size of the buffer used to read the contents.</param>
            <returns>Collection of <see cref="T:System.Net.Http.HttpContent"/> instances where each instance 
            represents a body part.</returns>
        </member>
        <member name="M:System.Net.Http.HttpContentMultipartExtensionMethods.ReadAsMultipartAsync(System.Net.Http.HttpContent)">
            <summary>
            Reads all body parts within a MIME multipart message and produces a set of <see cref="T:System.Net.Http.HttpContent"/> instances as a result.
            </summary>
            <param name="content">An existing <see cref="T:System.Net.Http.HttpContent"/> instance to use for the object's content.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the tasks of getting the collection of <see cref="T:System.Net.Http.HttpContent"/> instances where each instance represents a body part.</returns>
        </member>
        <member name="M:System.Net.Http.HttpContentMultipartExtensionMethods.ReadAsMultipartAsync(System.Net.Http.HttpContent,System.Net.Http.IMultipartStreamProvider)">
            <summary>
            Reads all body parts within a MIME multipart message and produces a set of <see cref="T:System.Net.Http.HttpContent"/> instances as a result
            using the <paramref name="streamProvider"/> instance to determine where the contents of each body part is written. 
            </summary>
            <param name="content">An existing <see cref="T:System.Net.Http.HttpContent"/> instance to use for the object's content.</param>
            <param name="streamProvider">A stream provider providing output streams for where to write body parts as they are parsed.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the tasks of getting the collection of <see cref="T:System.Net.Http.HttpContent"/> instances where each instance represents a body part.</returns>
        </member>
        <member name="M:System.Net.Http.HttpContentMultipartExtensionMethods.ReadAsMultipartAsync(System.Net.Http.HttpContent,System.Net.Http.IMultipartStreamProvider,System.Int32)">
            <summary>
            Reads all body parts within a MIME multipart message and produces a set of <see cref="T:System.Net.Http.HttpContent"/> instances as a result
            using the <paramref name="streamProvider"/> instance to determine where the contents of each body part is written and 
            <paramref name="bufferSize"/> as read buffer size.
            </summary>
            <param name="content">An existing <see cref="T:System.Net.Http.HttpContent"/> instance to use for the object's content.</param>
            <param name="streamProvider">A stream provider providing output streams for where to write body parts as they are parsed.</param>
            <param name="bufferSize">Size of the buffer used to read the contents.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the tasks of getting the collection of <see cref="T:System.Net.Http.HttpContent"/> instances where each instance represents a body part.</returns>
        </member>
        <member name="T:System.Net.Http.HttpContentMultipartExtensionMethods.MultipartAsyncContext">
            <summary>
            Managing state for asynchronous read and write operations
            </summary>
        </member>
        <member name="M:System.Net.Http.HttpContentMultipartExtensionMethods.MultipartAsyncContext.#ctor(System.Net.Http.HttpContent,System.Threading.Tasks.TaskCompletionSource{System.Collections.Generic.IEnumerable{System.Net.Http.HttpContent}},System.Net.Http.MimeMultipartBodyPartParser,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.HttpContentMultipartExtensionMethods.MultipartAsyncContext"/> class.
            </summary>
            <param name="content">The content.</param>
            <param name="taskCompletionSource">The task completion source.</param>
            <param name="mimeParser">The MIME parser.</param>
            <param name="data">The buffer that we read data from.</param>
        </member>
        <member name="P:System.Net.Http.HttpContentMultipartExtensionMethods.MultipartAsyncContext.Content">
            <summary>
            Gets the <see cref="T:System.Net.Http.HttpContent"/> that we read from.
            </summary>
            <value>
            The content instance.
            </value>
        </member>
        <member name="P:System.Net.Http.HttpContentMultipartExtensionMethods.MultipartAsyncContext.Result">
            <summary>
            Gets the collection of parsed <see cref="T:System.Net.Http.HttpContent"/> instances.
            </summary>
            <value>
            The result collection.
            </value>
        </member>
        <member name="P:System.Net.Http.HttpContentMultipartExtensionMethods.MultipartAsyncContext.TaskCompletionSource">
            <summary>
            Gets the task completion source.
            </summary>
            <value>
            The task completion source.
            </value>
        </member>
        <member name="P:System.Net.Http.HttpContentMultipartExtensionMethods.MultipartAsyncContext.Data">
            <summary>
            Gets the data.
            </summary>
            <value>
            The buffer that we read data from.
            </value>
        </member>
        <member name="P:System.Net.Http.HttpContentMultipartExtensionMethods.MultipartAsyncContext.MimeParser">
            <summary>
            Gets the MIME parser.
            </summary>
            <value>
            The MIME parser.
            </value>
        </member>
        <member name="P:System.Net.Http.HttpContentMultipartExtensionMethods.MultipartAsyncContext.PartsEnumerator">
            <summary>
            Gets or sets the parts enumerator for going through the parsed parts.
            </summary>
            <value>
            The parts enumerator.
            </value>
        </member>
        <member name="P:System.Net.Http.HttpContentMultipartExtensionMethods.MultipartAsyncContext.SegmentsEnumerator">
            <summary>
            Gets or sets the segments enumerator for going through the segments within each part.
            </summary>
            <value>
            The segments enumerator.
            </value>
        </member>
        <member name="T:System.Net.Http.HttpMessageContent">
            <summary>
            Derived <see cref="T:System.Net.Http.HttpContent"/> class which can encapsulate an <see cref="P:System.Net.Http.HttpMessageContent.HttpResponseMessage"/>
            or an <see cref="P:System.Net.Http.HttpMessageContent.HttpRequestMessage"/> as an entity with media type "application/http".
            </summary>
        </member>
        <member name="M:System.Net.Http.HttpMessageContent.#ctor(System.Net.Http.HttpRequestMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.HttpMessageContent"/> class encapsulating an
            <see cref="P:System.Net.Http.HttpMessageContent.HttpRequestMessage"/>.
            </summary>
            <param name="httpRequest">The <see cref="P:System.Net.Http.HttpMessageContent.HttpResponseMessage"/> instance to encapsulate.</param>
        </member>
        <member name="M:System.Net.Http.HttpMessageContent.#ctor(System.Net.Http.HttpResponseMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.HttpMessageContent"/> class encapsulating an
            <see cref="P:System.Net.Http.HttpMessageContent.HttpResponseMessage"/>.
            </summary>
            <param name="httpResponse">The <see cref="P:System.Net.Http.HttpMessageContent.HttpResponseMessage"/> instance to encapsulate.</param>
        </member>
        <member name="M:System.Net.Http.HttpMessageContent.ValidateHttpMessageContent(System.Net.Http.HttpContent,System.Boolean,System.Boolean)">
            <summary>
            Validates whether the content contains an HTTP Request or an HTTP Response.
            </summary>
            <param name="content">The content to validate.</param>
            <param name="isRequest">if set to <c>true</c> if the content is either an HTTP Request or an HTTP Response.</param>
            <param name="throwOnError">Indicates whether validation failure should result in an <see cref="T:System.Exception"/> or not.</param>
            <returns><c>true</c> if content is either an HTTP Request or an HTTP Response</returns>
        </member>
        <member name="M:System.Net.Http.HttpMessageContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
            <summary>
            Asynchronously serializes the object's content to the given <paramref name="stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to which to write.</param>
            <param name="context">The associated <see cref="T:System.Net.TransportContext"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> instance that is asynchronously serializing the object's content.</returns>
        </member>
        <member name="M:System.Net.Http.HttpMessageContent.TryComputeLength(System.Int64@)">
            <summary>
            Computes the length of the stream if possible.
            </summary>
            <param name="length">The computed length of the stream.</param>
            <returns><c>true</c> if the length has been computed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Net.Http.HttpMessageContent.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:System.Net.Http.HttpMessageContent.SerializeRequestLine(System.Text.StringBuilder,System.Net.Http.HttpRequestMessage)">
            <summary>
            Serializes the HTTP request line.
            </summary>
            <param name="message">Where to write the request line.</param>
            <param name="httpRequest">The HTTP request.</param>
        </member>
        <member name="M:System.Net.Http.HttpMessageContent.SerializeStatusLine(System.Text.StringBuilder,System.Net.Http.HttpResponseMessage)">
            <summary>
            Serializes the HTTP status line.
            </summary>
            <param name="message">Where to write the status line.</param>
            <param name="httpResponse">The HTTP response.</param>
        </member>
        <member name="M:System.Net.Http.HttpMessageContent.SerializeHeaderFields(System.Text.StringBuilder,System.Net.Http.Headers.HttpHeaders)">
            <summary>
            Serializes the header fields.
            </summary>
            <param name="message">Where to write the status line.</param>
            <param name="headers">The headers to write.</param>
        </member>
        <member name="P:System.Net.Http.HttpMessageContent.HttpRequestMessage">
            <summary>
            Gets the HTTP request message.
            </summary>
        </member>
        <member name="P:System.Net.Http.HttpMessageContent.HttpResponseMessage">
            <summary>
            Gets the HTTP response message.
            </summary>
        </member>
        <member name="T:System.Net.Http.HttpRequestHeaderParser">
            <summary>
            The <see cref="T:System.Net.Http.HttpRequestHeaderParser"/> combines <see cref="T:System.Net.Http.HttpRequestLineParser"/> for parsing the HTTP Request Line  
            and <see cref="T:System.Net.Http.InternetMessageFormatHeaderParser"/> for parsing each header field. 
            </summary>
        </member>
        <member name="M:System.Net.Http.HttpRequestHeaderParser.#ctor(System.Net.Http.HttpUnsortedRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.HttpRequestHeaderParser"/> class.
            </summary>
            <param name="httpRequest">The parsed HTTP request without any header sorting.</param>
        </member>
        <member name="M:System.Net.Http.HttpRequestHeaderParser.#ctor(System.Net.Http.HttpUnsortedRequest,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.HttpRequestHeaderParser"/> class.
            </summary>
            <param name="httpRequest">The parsed HTTP request without any header sorting.</param>
            <param name="maxRequestLineSize">The max length of the HTTP request line.</param>
            <param name="maxHeaderSize">The max length of the HTTP header.</param>
        </member>
        <member name="M:System.Net.Http.HttpRequestHeaderParser.ParseBuffer(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Parse an HTTP request header and fill in the <see cref="T:System.Net.Http.HttpRequestMessage"/> instance.
            </summary>
            <param name="buffer">Request buffer from where request is read</param>
            <param name="bytesReady">Size of request buffer</param>
            <param name="bytesConsumed">Offset into request buffer</param>
            <returns>State of the parser.</returns>
        </member>
        <member name="T:System.Net.Http.HttpRequestLineParser">
            <summary>
            HTTP Request Line parser for parsing the first line (the request line) in an HTTP request.
            </summary>
        </member>
        <member name="M:System.Net.Http.HttpRequestLineParser.#ctor(System.Net.Http.HttpUnsortedRequest,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.HttpRequestLineParser"/> class.
            </summary>
            <param name="httpRequest"><see cref="T:System.Net.Http.HttpUnsortedRequest"/> instance where the request line properties will be set as they are parsed.</param>
            <param name="maxRequestLineSize">Maximum length of HTTP header.</param>
        </member>
        <member name="M:System.Net.Http.HttpRequestLineParser.ParseBuffer(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Parse an HTTP request line. 
            Bytes are parsed in a consuming manner from the beginning of the request buffer meaning that the same bytes can not be 
            present in the request buffer.
            </summary>
            <param name="buffer">Request buffer from where request is read</param>
            <param name="bytesReady">Size of request buffer</param>
            <param name="bytesConsumed">Offset into request buffer</param>
            <returns>State of the parser.</returns>
        </member>
        <member name="T:System.Net.Http.HttpRequestMessage`1">
            <summary>
            Derived <see cref="T:System.Net.Http.HttpRequestMessage"/> class that contains a strongly typed object as its content.
            </summary>
            <typeparam name="T">The type of object it contains as its content.</typeparam>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessage`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.HttpRequestMessage`1"/> class.
            </summary>
            <remarks>
            This constructor sets <see cref="P:System.Net.Http.HttpRequestMessage.Content"/> to contain an instance of
            <see cref="T:System.Net.Http.ObjectContent"/> containing the default value for <typeparamref name="T"/>.
            </remarks>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessage`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.HttpRequestMessage`1"/> class.
            </summary>
            <param name="value">The object to use as the content of this new instance.</param>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessage`1.#ctor(`0,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.HttpRequestMessage`1"/> class.
            </summary>
            <param name="value">The object to use as the content of this new instance.</param>
            <param name="formatters">The collection of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> instances
            to use for serialization.</param>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessage`1.#ctor(`0,System.Net.Http.HttpMethod,System.Uri,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.HttpRequestMessage`1"/> class.
            </summary>
            <param name="value">The object to use as the content of this new instance.</param>
            <param name="method">The <see cref="T:System.Net.Http.HttpMethod"/> for this request.</param>
            <param name="requestUri">The <see cref="T:System.Uri"/> to use for this request.</param>
            <param name="formatters">The collection of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> instances
            to use for serialization.</param>
        </member>
        <member name="P:System.Net.Http.HttpRequestMessage`1.Content">
            <summary>
            Gets or sets the <see cref="T:System.Net.Http.ObjectContent"/> that manages the object value for this <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
        </member>
        <member name="T:System.Net.Http.HttpResponseHeaderParser">
            <summary>
            The <see cref="T:System.Net.Http.HttpResponseHeaderParser"/> combines <see cref="T:System.Net.Http.HttpStatusLineParser"/> for parsing the HTTP Status Line  
            and <see cref="T:System.Net.Http.InternetMessageFormatHeaderParser"/> for parsing each header field. 
            </summary>
        </member>
        <member name="M:System.Net.Http.HttpResponseHeaderParser.#ctor(System.Net.Http.HttpUnsortedResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.HttpResponseHeaderParser"/> class.
            </summary>
            <param name="httpResponse">The parsed HTTP response without any header sorting.</param>
        </member>
        <member name="M:System.Net.Http.HttpResponseHeaderParser.#ctor(System.Net.Http.HttpUnsortedResponse,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.HttpResponseHeaderParser"/> class.
            </summary>
            <param name="httpResponse">The parsed HTTP response without any header sorting.</param>
            <param name="maxResponseLineSize">The max length of the HTTP status line.</param>
            <param name="maxHeaderSize">The max length of the HTTP header.</param>
        </member>
        <member name="M:System.Net.Http.HttpResponseHeaderParser.ParseBuffer(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Parse an HTTP response header and fill in the <see cref="T:System.Net.Http.HttpResponseMessage"/> instance.
            </summary>
            <param name="buffer">Response buffer from where response is read</param>
            <param name="bytesReady">Size of response buffer</param>
            <param name="bytesConsumed">Offset into response buffer</param>
            <returns>State of the parser.</returns>
        </member>
        <member name="T:System.Net.Http.HttpResponseMessage`1">
            <summary>
            Derived <see cref="T:System.Net.Http.HttpResponseMessage"/> class that contains a strongly typed object as its content.
            </summary>
            <typeparam name="T">The type of object instances of this class will contain as its content.</typeparam>
        </member>
        <member name="M:System.Net.Http.HttpResponseMessage`1.#ctor(System.Net.HttpStatusCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.HttpResponseMessage`1"/> class.
            </summary>
            <remarks>
            This constructor sets <see cref="P:System.Net.Http.HttpResponseMessage`1.Content"/> to contain an instance of
            <see cref="T:System.Net.Http.ObjectContent"/> containing the default value for <typeparamref name="T"/>.
            </remarks>
            <param name="statusCode">The <see cref="T:System.Net.HttpStatusCode"/> to use for this response.</param>
        </member>
        <member name="M:System.Net.Http.HttpResponseMessage`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.HttpResponseMessage`1"/> class.
            </summary>
            <param name="value">The value to use as the content of this new instance.</param>
        </member>
        <member name="M:System.Net.Http.HttpResponseMessage`1.#ctor(`0,System.Net.HttpStatusCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.HttpResponseMessage`1"/> class.
            </summary>
            <param name="value">The value to use as the content of this new instance.</param>
            <param name="statusCode">The <see cref="T:System.Net.HttpStatusCode"/> to use for this response.</param>
        </member>
        <member name="M:System.Net.Http.HttpResponseMessage`1.#ctor(`0,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.HttpResponseMessage`1"/> class.
            </summary>
            <param name="value">The value to use as the content of this new instance.</param>
            <param name="formatters">The collection of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> instances 
            to use for serialization.</param>
        </member>
        <member name="M:System.Net.Http.HttpResponseMessage`1.#ctor(`0,System.Net.HttpStatusCode,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.HttpResponseMessage`1"/> class.
            </summary>
            <param name="value">The value to use as the content of this new instance.</param>
            <param name="statusCode">The <see cref="T:System.Net.HttpStatusCode"/> to use for this response.</param>
            <param name="formatters">The collection of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> instances 
            to use for serialization.</param>
        </member>
        <member name="P:System.Net.Http.HttpResponseMessage`1.Content">
            <summary>
            Gets or sets the <see cref="T:System.Net.Http.ObjectContent"/> that manages the value for this instance.
            </summary>
        </member>
        <member name="T:System.Net.Http.HttpStatusLineParser">
            <summary>
            HTTP Status line parser for parsing the first line (the status line) in an HTTP response.
            </summary>
        </member>
        <member name="M:System.Net.Http.HttpStatusLineParser.#ctor(System.Net.Http.HttpUnsortedResponse,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.HttpStatusLineParser"/> class.
            </summary>
            <param name="httpResponse"><see cref="T:System.Net.Http.HttpUnsortedResponse"/> instance where the response line properties will be set as they are parsed.</param>
            <param name="maxStatusLineSize">Maximum length of HTTP header.</param>
        </member>
        <member name="M:System.Net.Http.HttpStatusLineParser.ParseBuffer(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Parse an HTTP status line. 
            Bytes are parsed in a consuming manner from the beginning of the response buffer meaning that the same bytes can not be 
            present in the response buffer.
            </summary>
            <param name="buffer">Response buffer from where response is read</param>
            <param name="bytesReady">Size of response buffer</param>
            <param name="bytesConsumed">Offset into response buffer</param>
            <returns>State of the parser.</returns>
        </member>
        <member name="T:System.Net.Http.HttpUnsortedHeaders">
            <summary>
            All of the existing non-abstract <see cref="T:System.Net.Http.Headers.HttpHeaders"/> implementations, namely
            <see cref="T:System.Net.Http.Headers.HttpRequestHeaders"/>, <see cref="T:System.Net.Http.Headers.HttpResponseHeaders"/>, and <see cref="T:System.Net.Http.Headers.HttpContentHeaders"/>
            enforce strict rules on what kinds of HTTP header fields can be added to each collection.
            When parsing the "application/http" media type we need to just get the unsorted list. It
            will get sorted later.
            </summary>
        </member>
        <member name="T:System.Net.Http.HttpUnsortedRequest">
            <summary>
            Represents the HTTP Request Line and header parameters parsed by <see cref="T:System.Net.Http.HttpRequestLineParser"/>
            and <see cref="T:System.Net.Http.HttpRequestHeaderParser"/>.
            </summary>
        </member>
        <member name="M:System.Net.Http.HttpUnsortedRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.HttpUnsortedRequest"/> class.
            </summary>
        </member>
        <member name="P:System.Net.Http.HttpUnsortedRequest.Method">
            <summary>
            Gets or sets the HTTP method.
            </summary>
            <value>
            The HTTP method.
            </value>
        </member>
        <member name="P:System.Net.Http.HttpUnsortedRequest.RequestUri">
            <summary>
            Gets or sets the HTTP request URI portion that is carried in the RequestLine (i.e the URI path + query).
            </summary>
            <value>
            The request URI.
            </value>
        </member>
        <member name="P:System.Net.Http.HttpUnsortedRequest.Version">
            <summary>
            Gets or sets the HTTP version.
            </summary>
            <value>
            The HTTP version.
            </value>
        </member>
        <member name="P:System.Net.Http.HttpUnsortedRequest.HttpHeaders">
            <summary>
            Gets the unsorted HTTP request headers.
            </summary>
        </member>
        <member name="T:System.Net.Http.HttpUnsortedResponse">
            <summary>
            Represents the HTTP Status Line and header parameters parsed by <see cref="T:System.Net.Http.HttpStatusLineParser"/>
            and <see cref="T:System.Net.Http.HttpResponseHeaderParser"/>.
            </summary>
        </member>
        <member name="M:System.Net.Http.HttpUnsortedResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.HttpUnsortedRequest"/> class.
            </summary>
        </member>
        <member name="P:System.Net.Http.HttpUnsortedResponse.Version">
            <summary>
            Gets or sets the HTTP version.
            </summary>
            <value>
            The HTTP version.
            </value>
        </member>
        <member name="P:System.Net.Http.HttpUnsortedResponse.StatusCode">
            <summary>
            Gets or sets the <see cref="T:System.Net.HttpStatusCode"/>
            </summary>
            <value>
            The HTTP status code
            </value>
        </member>
        <member name="P:System.Net.Http.HttpUnsortedResponse.ReasonPhrase">
            <summary>
            Gets or sets the HTTP reason phrase
            </summary>
            <value>
            The response reason phrase
            </value>
        </member>
        <member name="P:System.Net.Http.HttpUnsortedResponse.HttpHeaders">
            <summary>
            Gets the unsorted HTTP request headers.
            </summary>
        </member>
        <member name="T:System.Net.Http.IMultipartStreamProvider">
            <summary>
            An <see cref="T:System.Net.Http.IMultipartStreamProvider"/> implementation examines the headers provided by the MIME multipart parser
            as part of the MIME multipart extension methods (see <see cref="T:System.Net.Http.HttpContentMultipartExtensionMethods"/>) and decides 
            what kind of stream to return for the body part to be written to.
            </summary>
        </member>
        <member name="M:System.Net.Http.IMultipartStreamProvider.GetStream(System.Net.Http.Headers.HttpContentHeaders)">
            <summary>
            When a MIME multipart body part has been parsed this method is called to get a stream for where to write the body part to.
            </summary>
            <param name="headers">Header fields describing the body part.</param>
            <returns>The <see cref="T:System.IO.Stream"/> instance where the message body part is written to.</returns>
        </member>
        <member name="T:System.Net.Http.InternetMessageFormatHeaderParser">
            <summary>
            Buffer-oriented RFC 5322 style Internet Message Format parser which can be used to pass header 
            fields used in HTTP and MIME message entities. 
            </summary>
        </member>
        <member name="M:System.Net.Http.InternetMessageFormatHeaderParser.#ctor(System.Net.Http.Headers.HttpHeaders,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.InternetMessageFormatHeaderParser"/> class.
            </summary>
            <param name="headers">Concrete <see cref="T:System.Net.Http.Headers.HttpHeaders"/> instance where header fields are added as they are parsed.</param>
            <param name="maxHeaderSize">Maximum length of complete header containing all the individual header fields.</param>
        </member>
        <member name="M:System.Net.Http.InternetMessageFormatHeaderParser.ParseBuffer(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Parse a buffer of RFC 5322 style header fields and add them to the <see cref="T:System.Net.Http.Headers.HttpHeaders"/> collection.
            Bytes are parsed in a consuming manner from the beginning of the buffer meaning that the same bytes can not be 
            present in the buffer.
            </summary>
            <param name="buffer">Request buffer from where request is read</param>
            <param name="bytesReady">Size of request buffer</param>
            <param name="bytesConsumed">Offset into request buffer</param>
            <returns>State of the parser. Call this method with new data until it reaches a final state.</returns>
        </member>
        <member name="T:System.Net.Http.InternetMessageFormatHeaderParser.CurrentHeaderFieldStore">
            <summary>
            Maintains information about the current header field being parsed. 
            </summary>
        </member>
        <member name="M:System.Net.Http.InternetMessageFormatHeaderParser.CurrentHeaderFieldStore.CopyTo(System.Net.Http.Headers.HttpHeaders)">
            <summary>
            Copies current header field to the provided <see cref="T:System.Net.Http.Headers.HttpHeaders"/> instance.
            </summary>
            <param name="headers">The headers.</param>
        </member>
        <member name="M:System.Net.Http.InternetMessageFormatHeaderParser.CurrentHeaderFieldStore.IsEmpty">
            <summary>
            Determines whether this instance is empty.
            </summary>
            <returns>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Net.Http.InternetMessageFormatHeaderParser.CurrentHeaderFieldStore.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="P:System.Net.Http.InternetMessageFormatHeaderParser.CurrentHeaderFieldStore.Name">
            <summary>
            Gets the header field name.
            </summary>
        </member>
        <member name="P:System.Net.Http.InternetMessageFormatHeaderParser.CurrentHeaderFieldStore.Value">
            <summary>
            Gets the header field value.
            </summary>
        </member>
        <member name="T:System.Net.Http.MimeBodyPart">
            <summary>
            Maintains information about MIME body parts parsed by <see cref="T:System.Net.Http.MimeMultipartBodyPartParser"/>.
            </summary>
        </member>
        <member name="M:System.Net.Http.MimeBodyPart.#ctor(System.Net.Http.IMultipartStreamProvider,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.MimeBodyPart"/> class.
            </summary>
            <param name="streamProvider">The stream provider.</param>
            <param name="maxBodyPartHeaderSize">The max length of the MIME header within each MIME body part.</param>
        </member>
        <member name="M:System.Net.Http.MimeBodyPart.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:System.Net.Http.MimeBodyPart"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:System.Net.Http.MimeBodyPart.GetOutputStream">
            <summary>
            Gets the output stream.
            </summary>
            <returns>The output stream to write the body part to.</returns>
        </member>
        <member name="M:System.Net.Http.MimeBodyPart.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:System.Net.Http.MimeBodyPart.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:System.Net.Http.MimeBodyPart.CleanupOutputStream">
            <summary>
            Resets the output stream by either closing it or, in the case of a <see cref="T:System.IO.MemoryStream"/> resetting
            position to 0 so that it can be read by the caller.
            </summary>
        </member>
        <member name="P:System.Net.Http.MimeBodyPart.HeaderParser">
            <summary>
            Gets the header parser.
            </summary>
            <value>
            The header parser.
            </value>
        </member>
        <member name="P:System.Net.Http.MimeBodyPart.HttpContent">
            <summary>
            Gets the content of the HTTP.
            </summary>
            <value>
            The content of the HTTP.
            </value>
        </member>
        <member name="P:System.Net.Http.MimeBodyPart.Segments">
            <summary>
            Gets the set of <see cref="T:System.ArraySegment`1"/> pointing to the read buffer with
            contents of this body part.
            </summary>
            <remarks>We deliberately use <see cref="T:System.Collections.ArrayList"/> as List{ArraySegment{byte}} and Collection{ArraySegment{byte}} trip FxCop rule CA908
            which states the following: "Assemblies that are precompiled (using ngen.exe) should only instantiate generic types that will not cause JIT 
            compilation at runtime. Generic types with value type type parameters (outside of a special set of supported runtime generic types) will 
            always cause JIT compilation, even if the encapsulating assembly has been precompiled". As we don't want to force JIT'ing we use the old
            non-generic form which doesn't have this problem (ArraySegment{byte} of course is a value type).</remarks>
        </member>
        <member name="P:System.Net.Http.MimeBodyPart.IsComplete">
            <summary>
            Gets or sets a value indicating whether the body part has been completed.
            </summary>
            <value>
            <c>true</c> if this instance is complete; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Net.Http.MimeBodyPart.IsFinal">
            <summary>
            Gets or sets a value indicating whether this is the final body part.
            </summary>
            <value>
            <c>true</c> if this instance is complete; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:System.Net.Http.MimeMultipartBodyPartParser">
            <summary>
            Complete MIME multipart parser that combines <see cref="T:System.Net.Http.MimeMultipartParser"/> for parsing the MIME message into individual body parts 
            and <see cref="T:System.Net.Http.InternetMessageFormatHeaderParser"/> for parsing each body part into a MIME header and a MIME body. The caller of the parser is returned
            the resulting MIME bodies which can then be written to some output.
            </summary>
        </member>
        <member name="M:System.Net.Http.MimeMultipartBodyPartParser.#ctor(System.Net.Http.HttpContent,System.Net.Http.IMultipartStreamProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.MimeMultipartBodyPartParser"/> class.
            </summary>
            <param name="content">An existing <see cref="T:System.Net.Http.HttpContent"/> instance to use for the object's content.</param>
            <param name="streamProvider">A stream provider providing output streams for where to write body parts as they are parsed.</param>
        </member>
        <member name="M:System.Net.Http.MimeMultipartBodyPartParser.#ctor(System.Net.Http.HttpContent,System.Net.Http.IMultipartStreamProvider,System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.MimeMultipartBodyPartParser"/> class.
            </summary>
            <param name="content">An existing <see cref="T:System.Net.Http.HttpContent"/> instance to use for the object's content.</param>
            <param name="streamProvider">A stream provider providing output streams for where to write body parts as they are parsed.</param>
            <param name="maxMessageSize">The max length of the entire MIME multipart message.</param>
            <param name="maxBodyPartHeaderSize">The max length of the MIME header within each MIME body part.</param>
        </member>
        <member name="M:System.Net.Http.MimeMultipartBodyPartParser.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:System.Net.Http.MimeMultipartBodyPartParser"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:System.Net.Http.MimeMultipartBodyPartParser.IsMimeMultipartContent(System.Net.Http.HttpContent)">
            <summary>
            Determines whether the specified content is MIME multipart content.
            </summary>
            <param name="content">The content.</param>
            <returns>
              <c>true</c> if the specified content is MIME multipart content; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Net.Http.MimeMultipartBodyPartParser.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:System.Net.Http.MimeMultipartBodyPartParser.ParseBuffer(System.Byte[],System.Int32)">
            <summary>
            Parses the data provided and generates parsed MIME body part bodies in the form of <see cref="T:System.ArraySegment`1"/> which are ready to 
            write to the output stream.
            </summary>
            <param name="data">The data to parse</param>
            <param name="bytesRead">The number of bytes available in the input data</param>
            <returns>Parsed <see cref="T:System.Net.Http.MimeBodyPart"/> instances.</returns>
        </member>
        <member name="M:System.Net.Http.MimeMultipartBodyPartParser.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:System.Net.Http.MimeMultipartParser">
            <summary>
            Buffer-oriented MIME multipart parser.
            </summary>
        </member>
        <member name="M:System.Net.Http.MimeMultipartParser.#ctor(System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.MimeMultipartParser"/> class.
            </summary>
            <param name="boundary">Message boundary</param>
            <param name="maxMessageSize">Maximum length of entire MIME multipart message.</param>
        </member>
        <member name="M:System.Net.Http.MimeMultipartParser.ParseBuffer(System.Byte[],System.Int32,System.Int32@,System.ArraySegment{System.Byte}@,System.ArraySegment{System.Byte}@,System.Boolean@)">
            <summary>
            Parse a MIME multipart message. Bytes are parsed in a consuming
            manner from the beginning of the request buffer meaning that the same bytes can not be 
            present in the request buffer.
            </summary>
            <param name="buffer">Request buffer from where request is read</param>
            <param name="bytesReady">Size of request buffer</param>
            <param name="bytesConsumed">Offset into request buffer</param>
            <param name="remainingBodyPart">Any body part that was considered as a potential MIME multipart boundary but which was in fact part of the body.</param>
            <param name="bodyPart">The bulk of the body part.</param>
            <param name="isFinalBodyPart">Indicates whether the final body part has been found.</param>
            <remarks>In order to get the complete body part, the caller is responsible for concatenating the contents of the 
            <paramref name="remainingBodyPart"/> and <paramref name="bodyPart"/> out parameters.</remarks>
            <returns>State of the parser.</returns>
        </member>
        <member name="T:System.Net.Http.MimeMultipartParser.State">
            <summary>
            Represents the overall state of the <see cref="T:System.Net.Http.MimeMultipartParser"/>.
            </summary>
        </member>
        <member name="F:System.Net.Http.MimeMultipartParser.State.NeedMoreData">
            <summary>
            Need more data
            </summary>
        </member>
        <member name="F:System.Net.Http.MimeMultipartParser.State.BodyPartCompleted">
            <summary>
            Parsing of a complete body part succeeded.
            </summary>
        </member>
        <member name="F:System.Net.Http.MimeMultipartParser.State.Invalid">
            <summary>
            Bad data format
            </summary>
        </member>
        <member name="F:System.Net.Http.MimeMultipartParser.State.DataTooBig">
            <summary>
            Data exceeds the allowed size
            </summary>
        </member>
        <member name="T:System.Net.Http.MimeMultipartParser.CurrentBodyPartStore">
            <summary>
            Maintains information about the current body part being parsed.
            </summary>
        </member>
        <member name="M:System.Net.Http.MimeMultipartParser.CurrentBodyPartStore.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.MimeMultipartParser.CurrentBodyPartStore"/> class.
            </summary>
            <param name="referenceBoundary">The reference boundary.</param>
        </member>
        <member name="M:System.Net.Http.MimeMultipartParser.CurrentBodyPartStore.ResetBoundaryOffset">
            <summary>
            Resets the boundary offset.
            </summary>
        </member>
        <member name="M:System.Net.Http.MimeMultipartParser.CurrentBodyPartStore.ResetBoundary">
            <summary>
            Resets the boundary.
            </summary>
        </member>
        <member name="M:System.Net.Http.MimeMultipartParser.CurrentBodyPartStore.AppendBoundary(System.Byte)">
            <summary>
            Appends byte to the current boundary.
            </summary>
            <param name="data">The data to append to the boundary.</param>
        </member>
        <member name="M:System.Net.Http.MimeMultipartParser.CurrentBodyPartStore.AppendBoundary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Appends array of bytes to the current boundary.
            </summary>
            <param name="data">The data to append to the boundary.</param>
            <param name="offset">The offset into the data.</param>
            <param name="count">The number of bytes to append.</param>
        </member>
        <member name="M:System.Net.Http.MimeMultipartParser.CurrentBodyPartStore.GetDiscardedBoundary">
            <summary>
            Gets the discarded boundary.
            </summary>
            <returns>An <see cref="T:System.ArraySegment`1"/> containing the discarded boundary.</returns>
        </member>
        <member name="M:System.Net.Http.MimeMultipartParser.CurrentBodyPartStore.IsBoundaryValid">
            <summary>
            Determines whether current boundary is valid.
            </summary>
            <returns>
              <c>true</c> if curent boundary is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Net.Http.MimeMultipartParser.CurrentBodyPartStore.ClearBodyPart">
            <summary>
            Clears the body part.
            </summary>
        </member>
        <member name="M:System.Net.Http.MimeMultipartParser.CurrentBodyPartStore.ClearAll">
            <summary>
            Clears all.
            </summary>
        </member>
        <member name="P:System.Net.Http.MimeMultipartParser.CurrentBodyPartStore.HasPotentialBoundaryLeftOver">
            <summary>
            Gets or sets a value indicating whether this instance has potential boundary left over.
            </summary>
            <value>
            <c>true</c> if this instance has potential boundary left over; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Net.Http.MimeMultipartParser.CurrentBodyPartStore.BoundaryDelta">
            <summary>
            Gets the boundary delta.
            </summary>
        </member>
        <member name="P:System.Net.Http.MimeMultipartParser.CurrentBodyPartStore.BodyPart">
            <summary>
            Gets or sets the body part.
            </summary>
            <value>
            The body part.
            </value>
        </member>
        <member name="P:System.Net.Http.MimeMultipartParser.CurrentBodyPartStore.IsFinal">
            <summary>
            Gets a value indicating whether this body part instance is final.
            </summary>
            <value>
              <c>true</c> if this body part instance is final; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:System.Net.Http.MultipartFileStreamProvider">
            <summary>
            An <see cref="T:System.Net.Http.IMultipartStreamProvider"/> suited for writing each MIME body parts of the MIME multipart
            message to a file using a <see cref="T:System.IO.FileStream"/>.
            </summary>
        </member>
        <member name="M:System.Net.Http.MultipartFileStreamProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.MultipartFileStreamProvider"/> class.
            </summary>
        </member>
        <member name="M:System.Net.Http.MultipartFileStreamProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.MultipartFileStreamProvider"/> class.
            </summary>
            <param name="rootPath">The root path where the content of MIME multipart body parts are written to.</param>
        </member>
        <member name="M:System.Net.Http.MultipartFileStreamProvider.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.MultipartFileStreamProvider"/> class.
            </summary>
            <param name="rootPath">The root path where the content of MIME multipart body parts are written to.</param>
            <param name="bufferSize">The number of bytes buffered for writes to the file.</param>
        </member>
        <member name="M:System.Net.Http.MultipartFileStreamProvider.GetStream(System.Net.Http.Headers.HttpContentHeaders)">
            <summary>
            This body part stream provider examines the headers provided by the MIME multipart parser
            and decides which <see cref="T:System.IO.FileStream"/> to write the body part to.
            </summary>
            <param name="headers">Header fields describing the body part</param>
            <returns>The <see cref="T:System.IO.Stream"/> instance where the message body part is written to.</returns>
        </member>
        <member name="M:System.Net.Http.MultipartFileStreamProvider.OnGetStream(System.Net.Http.Headers.HttpContentHeaders)">
            <summary>
            Override this method in a derived class to examine the headers provided by the MIME multipart parser
            and decides which <see cref="T:System.IO.FileStream"/> to write the body part to.
            </summary>
            <param name="headers">Header fields describing the body part</param>
            <returns>The <see cref="T:System.IO.Stream"/> instance where the message body part is written to.</returns>
        </member>
        <member name="M:System.Net.Http.MultipartFileStreamProvider.GetLocalFileName(System.Net.Http.Headers.HttpContentHeaders)">
            <summary>
            Gets the name of the local file which will be combined with the root path to
            create an absolute file name where the contents of the current MIME body part
            will be stored.
            </summary>
            <param name="headers">The headers for the current MIME body part.</param>
            <returns>A relative filename with no path component.</returns>
        </member>
        <member name="P:System.Net.Http.MultipartFileStreamProvider.BodyPartFileNames">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the files names of MIME 
            body part written to file.
            </summary>
        </member>
        <member name="T:System.Net.Http.MultipartFormDataStreamProvider">
            <summary>
            An <see cref="T:System.Net.Http.IMultipartStreamProvider"/> suited for use with HTML file uploads for writing file 
            content to a <see cref="T:System.IO.FileStream"/>. The stream provider looks at the <b>Content-Disposition</b> header 
            field and determines an output <see cref="T:System.IO.Stream"/> based on the presence of a <b>filename</b> parameter.
            If a <b>filename</b> parameter is present in the <b>Content-Disposition</b> header field then the body 
            part is written to a <see cref="T:System.IO.FileStream"/>, otherwise it is written to a <see cref="T:System.IO.MemoryStream"/>.
            This makes it convenient to process MIME Multipart HTML Form data which is a combination of form 
            data and file content.
            </summary>
        </member>
        <member name="M:System.Net.Http.MultipartFormDataStreamProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.MultipartFormDataStreamProvider"/> class.
            </summary>
        </member>
        <member name="M:System.Net.Http.MultipartFormDataStreamProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.MultipartFormDataStreamProvider"/> class.
            </summary>
            <param name="rootPath">The root path where the content of MIME multipart body parts are written to.</param>
        </member>
        <member name="M:System.Net.Http.MultipartFormDataStreamProvider.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.MultipartFormDataStreamProvider"/> class.
            </summary>
            <param name="rootPath">The root path where the content of MIME multipart body parts are written to.</param>
            <param name="bufferSize">The number of bytes buffered for writes to the file.</param>
        </member>
        <member name="M:System.Net.Http.MultipartFormDataStreamProvider.GetStream(System.Net.Http.Headers.HttpContentHeaders)">
            <summary>
            This body part stream provider examines the headers provided by the MIME multipart parser
            and decides whether it should return a file stream or a memory stream for the body part to be 
            written to.
            </summary>
            <param name="headers">Header fields describing the body part</param>
            <returns>The <see cref="T:System.IO.Stream"/> instance where the message body part is written to.</returns>
        </member>
        <member name="M:System.Net.Http.MultipartFormDataStreamProvider.OnGetStream(System.Net.Http.Headers.HttpContentHeaders)">
            <summary>
            Override this method in a derived class to examine the headers provided by the MIME multipart parser
            and decide whether it should return a file stream or a memory stream for the body part to be 
            written to.
            </summary>
            <param name="headers">Header fields describing the body part</param>
            <returns>The <see cref="T:System.IO.Stream"/> instance where the message body part is written to.</returns>
        </member>
        <member name="M:System.Net.Http.MultipartFormDataStreamProvider.GetLocalFileName(System.Net.Http.Headers.HttpContentHeaders)">
            <summary>
            Gets the name of the local file which will be combined with the root path to
            create an absolute file name where the contents of the current MIME body part
            will be stored.
            </summary>
            <param name="headers">The headers for the current MIME body part.</param>
            <returns>A relative filename with no path component.</returns>
        </member>
        <member name="P:System.Net.Http.MultipartFormDataStreamProvider.BodyPartFileNames">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing mappings of each 
            <b>filename</b> parameter provided in a <b>Content-Disposition</b> header field 
            (represented as the keys) to a local file name where the contents of the body part is 
            stored (represented as the values).
            </summary>
        </member>
        <member name="T:System.Net.Http.MultipartMemoryStreamProvider">
            <summary>
            Provides a <see cref="T:System.Net.Http.IMultipartStreamProvider"/> implementation that returns a <see cref="T:System.IO.MemoryStream"/> instance.
            This facilitates deserialization or other manipulation of the contents in memory.
            </summary>
        </member>
        <member name="M:System.Net.Http.MultipartMemoryStreamProvider.GetStream(System.Net.Http.Headers.HttpContentHeaders)">
            <summary>
            This <see cref="T:System.Net.Http.IMultipartStreamProvider"/> implementation returns a <see cref="T:System.IO.MemoryStream"/> instance.
            This facilitates deserialization or other manipulation of the contents in memory. 
            </summary>
            <param name="headers">The header fields describing the body parts content. Looking for header fields such as 
            Content-Type and Content-Disposition can help provide the appropriate stream. In addition to using the information
            in the provided header fields, it is also possible to add new header fields or modify existing header fields. This can
            be useful to get around situations where the Content-type may say <b>application/octet-stream</b> but based on
            analyzing the <b>Content-Disposition</b> header field it is found that the content in fact is <b>application/json</b>, for example.</param>
            <returns>A stream instance where the contents of a body part will be written to.</returns>
        </member>
        <member name="P:System.Net.Http.MultipartMemoryStreamProvider.Instance">
            <summary>
            Gets a static instance of the <see cref="T:System.Net.Http.MultipartMemoryStreamProvider"/>
            </summary>
        </member>
        <member name="T:System.Net.Http.ObjectContent">
            <summary>
            Derived <see cref="P:System.Net.Http.ObjectContent.HttpContent"/> class that contains a strongly typed object.
            </summary>
        </member>
        <member name="M:System.Net.Http.ObjectContent.#ctor(System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.ObjectContent"/> class.
            </summary>
            <param name="type">The type of object this instance will contain.</param>
            <param name="value">The value of the object this instance will contain.</param>
        </member>
        <member name="M:System.Net.Http.ObjectContent.#ctor(System.Type,System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.ObjectContent"/> class.
            </summary>
            <param name="type">The type of object this instance will contain.</param>
            <param name="value">The value of the object this instance will contain.</param>
            <param name="mediaType">The media type to associate with this object.</param>
        </member>
        <member name="M:System.Net.Http.ObjectContent.#ctor(System.Type,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.ObjectContent"/> class.
            </summary>
            <param name="type">The type of object this instance will contain.</param>
            <param name="value">The value of the object this instance will contain.</param>
            <param name="mediaType">The media type to associate with this object.</param>
        </member>
        <member name="M:System.Net.Http.ObjectContent.#ctor(System.Type,System.Net.Http.HttpContent)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.ObjectContent"/> class.
            </summary>
            <param name="type">The type of object this instance will contain.</param>
            <param name="content">An existing <see cref="P:System.Net.Http.ObjectContent.HttpContent"/> instance to use for the object's content.</param>
        </member>
        <member name="M:System.Net.Http.ObjectContent.#ctor(System.Type,System.Object,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.ObjectContent"/> class.
            </summary>
            <param name="type">The type of object this instance will contain.</param>
            <param name="value">The value of the object this instance will contain.</param>
            <param name="formatters">The collection of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> instances
            to use for serialization or deserialization.</param>
        </member>
        <member name="M:System.Net.Http.ObjectContent.#ctor(System.Type,System.Object,System.String,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.ObjectContent"/> class.
            </summary>
            <param name="type">The type of object this instance will contain.</param>
            <param name="value">The value of the object this instance will contain.</param>
            <param name="mediaType">The media type to associate with this object.</param>
            <param name="formatters">The collection of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> instances
            to use for serialization or deserialization.</param>
        </member>
        <member name="M:System.Net.Http.ObjectContent.#ctor(System.Type,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.ObjectContent"/> class.
            </summary>
            <param name="type">The type of object this instance will contain.</param>
            <param name="value">The value of the object this instance will contain.</param>
            <param name="mediaType">The media type to associate with this object.</param>
            <param name="formatters">The collection of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> instances
            to use for serialization or deserialization.</param>
        </member>
        <member name="M:System.Net.Http.ObjectContent.#ctor(System.Type,System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.ObjectContent"/> class.
            </summary>
            <param name="type">The type of object this instance will contain.</param>
            <param name="content">An existing <see cref="P:System.Net.Http.ObjectContent.HttpContent"/> instance to use for the object's content.</param>
            <param name="formatters">The collection of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> instances
            to use for serialization or deserialization.</param>
        </member>
        <member name="M:System.Net.Http.ObjectContent.ReadAsAsync">
            <summary>
            Asynchronously returns the object instance for this <see cref="T:System.Net.Http.ObjectContent"/>.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> instance that will yield the object instance.</returns>
        </member>
        <member name="M:System.Net.Http.ObjectContent.ReadAsOrDefaultAsync">
            <summary>
            Asynchronously returns the object instance for this <see cref="T:System.Net.Http.ObjectContent"/>
            or the default value for the type if content is not available.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> instance that will yield the object instance.</returns>
        </member>
        <member name="M:System.Net.Http.ObjectContent.DetermineWriteSerializerAndContentType">
            <summary>
            Forces selection of the write <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> and content-type.
            </summary>
        </member>
        <member name="M:System.Net.Http.ObjectContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
            <summary>
            Asynchronously serializes the object's content to the given <paramref name="stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to which to write.</param>
            <param name="context">The associated <see cref="T:System.Net.TransportContext"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> instance that is asynchronously serializing the object's content.</returns>
        </member>
        <member name="M:System.Net.Http.ObjectContent.CreateContentReadStreamAsync">
            <summary>
            Asynchronously creates the content read stream.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> instance that will yield a stream intended for reading.</returns>
        </member>
        <member name="M:System.Net.Http.ObjectContent.TryComputeLength(System.Int64@)">
            <summary>
            Computes the length of the stream if possible.
            </summary>
            <param name="length">The computed length of the stream.</param>
            <returns><c>true</c> if the length has been computed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Net.Http.ObjectContent.SelectReadFormatter">
            <summary>
            Selects the appropriate <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> to read the object content.
            </summary>
            <returns>The selected <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> or null.</returns>
        </member>
        <member name="M:System.Net.Http.ObjectContent.SelectWriteFormatter(System.Net.Http.Headers.MediaTypeHeaderValue@)">
            <summary>
            Selects the appropriate <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> to write the object content.
            </summary>
            <param name="mediaType">The <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> to use to describe the object's content type.</param>
            <returns>The selected <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> or null.</returns>
        </member>
        <member name="M:System.Net.Http.ObjectContent.WrapOrCastAsHttpContent(System.Object)">
            <summary>
            Determines if the given <paramref name="value"/> is an instance of
            <see cref="P:System.Net.Http.ObjectContent.HttpContent"/> or is some type we automatically wrap inside
            <see cref="P:System.Net.Http.ObjectContent.HttpContent"/>.
            </summary>
            <param name="value">The object value to test.</param>
            <returns>A non-null <see cref="P:System.Net.Http.ObjectContent.HttpContent"/> if the <paramref name="value"/>
            was an instance of <see cref="P:System.Net.Http.ObjectContent.HttpContent"/> or needed to be wrapped
            inside one.  A <c>null</c> indicates the <paramref name="value"/> is not
            <see cref="P:System.Net.Http.ObjectContent.HttpContent"/> or needed to be wrapped in one.</returns>
        </member>
        <member name="P:System.Net.Http.ObjectContent.ObjectType">
            <summary>
            Gets the type of object managed by this <see cref="T:System.Net.Http.ObjectContent"/> instance.
            </summary>
        </member>
        <member name="P:System.Net.Http.ObjectContent.Formatters">
            <summary>
            Gets the mutable collection of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> instances used to
            serialize or deserialize the value of this <see cref="T:System.Net.Http.ObjectContent"/>.
            </summary>
        </member>
        <member name="P:System.Net.Http.ObjectContent.HttpContent">
            <summary>
            Gets or sets the inner <see cref="P:System.Net.Http.ObjectContent.HttpContent"/> wrapped by
            by the current <see cref="T:System.Net.Http.ObjectContent"/>.
            </summary>
        </member>
        <member name="P:System.Net.Http.ObjectContent.Value">
            <summary>
            Gets or sets the value of the current <see cref="T:System.Net.Http.ObjectContent"/>.
            </summary>
        </member>
        <member name="T:System.Net.Http.ObjectContent`1">
            <summary>
            Generic form of <see cref="T:System.Net.Http.ObjectContent"/>.
            </summary>
            <typeparam name="T">The type of object this <see cref="T:System.Net.Http.ObjectContent"/> class will contain.</typeparam>
        </member>
        <member name="M:System.Net.Http.ObjectContent`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.ObjectContent`1"/> class.
            </summary>
            <param name="value">The value of the object this instance will contain.</param>
        </member>
        <member name="M:System.Net.Http.ObjectContent`1.#ctor(`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.ObjectContent`1"/> class.
            </summary>
            <param name="value">The value of the object this instance will contain.</param>
            <param name="mediaType">The media type to associate with this object.</param>
        </member>
        <member name="M:System.Net.Http.ObjectContent`1.#ctor(`0,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.ObjectContent`1"/> class.
            </summary>
            <param name="value">The value of the object this instance will contain.</param>
            <param name="mediaType">The media type to associate with this object.</param>
        </member>
        <member name="M:System.Net.Http.ObjectContent`1.#ctor(System.Net.Http.HttpContent)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.ObjectContent`1"/> class.
            </summary>
            <param name="content">An existing <see cref="T:System.Net.Http.HttpContent"/> instance to use for the object's content.</param>
        </member>
        <member name="M:System.Net.Http.ObjectContent`1.#ctor(`0,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.ObjectContent`1"/> class.
            </summary>
            <param name="value">The value of the object this instance will contain.</param>
            <param name="formatters">The collection of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> instances
            to serialize or deserialize the object content.</param>
        </member>
        <member name="M:System.Net.Http.ObjectContent`1.#ctor(`0,System.String,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.ObjectContent`1"/> class.
            </summary>
            <param name="value">The value of the object this instance will contain.</param>
            <param name="mediaType">The media type to associate with this object.</param>
            <param name="formatters">The collection of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> instances
            to serialize or deserialize the object content.</param>
        </member>
        <member name="M:System.Net.Http.ObjectContent`1.#ctor(`0,System.Net.Http.Headers.MediaTypeHeaderValue,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.ObjectContent`1"/> class.
            </summary>
            <param name="value">The value of the object this instance will contain.</param>
            <param name="mediaType">The media type to associate with this object.</param>
            <param name="formatters">The collection of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> instances
            to serialize or deserialize the object content.</param>
        </member>
        <member name="M:System.Net.Http.ObjectContent`1.#ctor(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.ObjectContent`1"/> class.
            </summary>
            <param name="content">An existing <see cref="T:System.Net.Http.HttpContent"/> instance to use for the object's content.</param>
            <param name="formatters">The collection of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> instances
            to serialize or deserialize the object content.</param>
        </member>
        <member name="M:System.Net.Http.ObjectContent`1.ReadAsAsync">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> instance to yield the object instance for this <see cref="T:System.Net.Http.ObjectContent"/>.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will yield the object instance.</returns>
        </member>
        <member name="M:System.Net.Http.ObjectContent`1.ReadAsOrDefaultAsync">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> instance to yield the object instance for this <see cref="T:System.Net.Http.ObjectContent"/>
            or the default value for the type if content is not available.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will yield the object instance.</returns>
        </member>
        <member name="T:System.Net.Http.ParserState">
            <summary>
            Represents the overall state of various parsers.
            </summary>
        </member>
        <member name="F:System.Net.Http.ParserState.NeedMoreData">
            <summary>
            Need more data
            </summary>
        </member>
        <member name="F:System.Net.Http.ParserState.Done">
            <summary>
            Parsing completed (final)
            </summary>
        </member>
        <member name="F:System.Net.Http.ParserState.Invalid">
            <summary>
            Bad data format (final)
            </summary>
        </member>
        <member name="F:System.Net.Http.ParserState.DataTooBig">
            <summary>
            Data exceeds the allowed size (final)
            </summary>
        </member>
        <member name="T:System.Net.Http.UriExtensionMethods">
            <summary>
            Extension methods to allow strongly typed objects to be read from the query component of <see cref="T:System.Uri"/> instances.
            </summary>
        </member>
        <member name="M:System.Net.Http.UriExtensionMethods.TryReadQueryAsJson(System.Uri,System.Json.JsonObject@)">
            <summary>
            Reads HTML form URL encoded data provided in the <see cref="T:System.Uri"/> query component as a <see cref="T:System.Json.JsonValue"/> object.
            </summary>
            <param name="address">The <see cref="T:System.Uri"/> instance from which to read.</param>
            <param name="value">An object to be initialized with this instance or null if the conversion cannot be performed.</param>
            <returns>true if the query component can be read as <see cref="T:System.Json.JsonValue"/>; otherwise, false.</returns>
        </member>
        <member name="M:System.Net.Http.UriExtensionMethods.TryReadQueryAs(System.Uri,System.Type,System.Object@)">
            <summary>
            Reads HTML form URL encoded data provided in the <see cref="T:System.Uri"/> query component as an <see cref="T:System.Object"/> of the given <paramref name="type"/>.
            </summary>
            <param name="address">The <see cref="T:System.Uri"/> instance from which to read.</param>
            <param name="type">The type of the object to read.</param>
            <param name="value">An object to be initialized with this instance or null if the conversion cannot be performed.</param>
            <returns>true if the query component can be read as the specified type; otherwise, false.</returns>
        </member>
        <member name="M:System.Net.Http.UriExtensionMethods.TryReadQueryAs``1(System.Uri,``0@)">
            <summary>
            Reads HTML form URL encoded data provided in the <see cref="T:System.Uri"/> query component as an <see cref="T:System.Object"/> of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the object to read.</typeparam>
            <param name="address">The <see cref="T:System.Uri"/> instance from which to read.</param>
            <param name="value">An object to be initialized with this instance or null if the conversion cannot be performed.</param>
            <returns>true if the query component can be read as the specified type; otherwise, false.</returns>
        </member>
    </members>
</doc>
