name: .NET Core

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_NOLOGO: true
      DOTNET_GENERATE_ASPNET_CERTIFICATE: false
      solutionpath: src\WsusSmartApprove.sln
      unittestprojectpath: src\WsusSmartApprove.UnitTests\WsusSmartApprove.UnitTests.csproj
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        
    - name: Setup .NET Core 3.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x

    - name: Setup .NET 5
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@c26a08ba26249b81327e26f6ef381897b6a8754d
      
    - name: Install RSAT WSUS tools
      run: Install-WindowsFeature UpdateServices-API
      shell: powershell

    - name: Install dotnet tools
      run: |
        dotnet tool install --global dotMorten.OmdGenerator
        dotnet tool install --global ConfigValidate
        dotnet tool install --global dotnet-outdated-tool
        dotnet tool install --global snitch
        dotnet tool install --global dotnet-sonarscanner
        dotnet tool install --global JetBrains.ReSharper.GlobalTools

    - name: Prepare Artifact Directory
      run: |
        mkdir artifacts
        mkdir artifacts\nupkg
        mkdir artifacts\outdated
        mkdir artifacts\snitch
        mkdir artifacts\omd
        mkdir artifacts\docfx

    - name: Restore Packages
      run: |
        dotnet restore ${{ env.solutionpath }} /bl:artifacts\\binlog\\restore.binlog

    - name: Run Build
      run: |
        dotnet build ${{ env.solutionpath }} --configuration Release --no-restore /bl:artifacts\\binlog\\build.binlog /p:ContinuousIntegrationBuild=true 

    - name: Run Unit Tests
      run: |
        dotnet test ${{ env.unittestprojectpath }} --configuration Release --no-build /bl:artifacts\\binlog\\unittest.binlog --nologo --blame-hang-timeout 60000 --results-directory artifacts\opencover --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

      
# only store binlog on failure      
    - name: store binlogs
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: binlogs
        path: artifacts/binlog
        
    - name: store docfx
      if: ${{ !startsWith(github.ref, 'refs/heads/dependabot') }}
      uses: actions/upload-artifact@v2
      with:
        name: docfx
        path: artifacts/docfx
        
    - name: store nuget packages
      if: ${{ !startsWith(github.ref, 'refs/heads/dependabot') }}
      uses: actions/upload-artifact@v2
      with:
        name: nuget
        path: artifacts/nuget
        
    - name: store omd
      if: ${{ !startsWith(github.ref, 'refs/heads/dependabot') }}
      uses: actions/upload-artifact@v2
      with:
        name: omd
        path: artifacts/omd
        
    - name: store outdated
      if: ${{ !startsWith(github.ref, 'refs/heads/dependabot') }}
      uses: actions/upload-artifact@v2
      with:
        name: outdated
        path: artifacts/outdated
        
    - name: store snitch
      if: ${{ !startsWith(github.ref, 'refs/heads/dependabot') }}
      uses: actions/upload-artifact@v2
      with:
        name: snitch
        path: artifacts/snitch
